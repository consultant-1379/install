#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB SCRIPT
# ********************************************************************
# (c) Ericsson Radio Systems AB 2016 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : check_DNS.bsh
# Date    : 08/10/2016 
# Revision: A 
# Purpose : Script to check if DNS configuration is proper 
# Usage   : ./check_DNS.bsh
# Exit Values: 
#     0   : Success-DNS Configuration is Proper
#     3   : Failure-Script Aborted
#   122   : Failure-DNS is not configured
#   123   : Failure-Glassfish Hostname is not available
#   124   : Failure-Directory for Hostname configuration file not found
#  
# ********************************************************************
#
#   Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
CAT=/usr/bin/cat
CUT=/usr/bin/cut
DATE=/usr/bin/date
ECHO=/usr/bin/echo
GREP=/usr/bin/grep
HOST=/usr/sbin/host
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
RM=/usr/bin/rm
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
# ********************************************************************
#                                                                    *
#                     Functions                                      *
#                                                                    *
# ********************************************************************

### Function: abort_script 
#                                                                     
#   This will be called if the script is aborted through an error        
#   encountered during runtime                               
#                                                                     
# Arguments:                                                          
#       $1 - Error message from part of program (Not always used)     
# Return Values:                                                      
#       none                                                          
#
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi
if [ "${LOGFILE}" ]; then
    $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
else
    $ECHO "\nERROR : ${_err_msg_}\n"
fi
exit 3 
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
#
check_id()
{
local _check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}

### Function: check_create_logfile ###
#
# Checks presence/creation of Logfile
#
# Arguments:
#   none
# Return Values:
#   none
#
check_create_logfile()
{
if [ -s $LOGFILE ]; then
    $RM -rf $LOGFILE
    if [ -f $LOGFILE ]; then
        _err_msg_="Warning : Could not remove older ${LOGFILE}"
        abort_script "$_err_msg_"
    fi
fi

if [ ! -d  ${ENIQ_PRECHECK_LOG_DIR} ]; then
    ${MKDIR} -p ${ENIQ_PRECHECK_LOG_DIR}
    if [ $? -ne 0 ]; then 
        _err_msg_="Could not create ${ENIQ_PRECHECK_LOG_DIR}"
        abort_script "$_err_msg_"
    fi
fi

$TOUCH -a ${LOGFILE}
if [ $? -ne 0 ]; then 
    _err_msg_="Could not create ${LOGFILE}"
    abort_script "$_err_msg_"
fi

$CHMOD 640 ${LOGFILE}
if [ $? -ne 0 ]; then 
    _err_msg_="Could not change the permissions of the ${LOGFILE}"
    abort_script "$_err_msg_"
fi
}


### Function: check_glassfish_host ###################################
#
# Checks if glassfish host is accessible from DNS or not
#
# Arguments: None
# Return values:
#    0     : DNS Configuration is Proper 
#    122   : DNS is not configured
#    123   : Glassfish Hostname is not available
#    124   : Directory for Hostname config file not found
######################################################################

check_glassfish_host()
{
if [ -d ${ENIQ_CONF_DIR} ]; then
    HOST_NAME=`$CAT ${ENIQ_CONF_DIR}/service_names | $GREP -i glassfish | $CUT -d ':' -f3`
    CHECK_HOST=`${HOST} ${HOST_NAME}`

    if [ "${HOST_NAME}" != "" ]; then
        if [[ $CHECK_HOST =~ "has address" ]] ; then
            log_msg -q -s "DNS Configuration for the ${HOST_NAME} is proper" -l ${LOGFILE}
            RET_CODE=0
        else
            log_msg -q -s "ERROR:DNS Configuration for ${HOST_NAME} is not proper" -l ${LOGFILE}
            RET_CODE=122
        fi
    else
        log_msg -q -s "ERROR:Glassfish Host name ${HOST_NAME} is not available in file ${ENIQ_CONF_DIR}/service_names\n" -l ${LOGFILE}
        RET_CODE=123
    fi
else
    log_msg -q -s "ERROR:Directory path ${ENIQ_CONF_DIR} not present" -l ${LOGFILE}
    RET_CODE=124
fi
}

### Function: setup_env ###
#
# Setup path environment
# Imports the common lib files which imports common functions 
# 
# Arguments:
#   none
# Return Values:
#   none
#
setup_env()
{

if [ ! "${ENIQ_BASE_DIR}" ]; then 
   ENIQ_BASE_DIR=/eniq
fi

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

#Installation lib directory
ENIQ_LIB_DIR=${ENIQ_INST_DIR}/core_install/lib

#Common function directory
COMMON_FUNCS_LIB=${ENIQ_LIB_DIR}/common_functions.lib

#Directory for Hostname Configuration file
ENIQ_CONF_DIR=/eniq/sw/conf

# Precheck logs directory
ENIQ_PRECHECK_LOG_DIR=${ENIQ_BASE_DIR}/local_logs/precheck_logs

# Logfile path
LOGFILE=${ENIQ_PRECHECK_LOG_DIR}/log_DNS.log

# Return code declaration
RET_CODE=0 

#Imports the common library functions
if [ ! -f "${COMMON_FUNCS_LIB}" ]; then
    _err_msg_="${COMMON_FUNCS_LIB} missing, this is required for this script, exiting!!!!"
    abort_script "${_err_msg_}"
fi

. ${COMMON_FUNCS_LIB}

if [ $? -ne 0 ]; then
    _err_msg_="Importing functions of ${COMMON_FUNCS_LIB} failed, exiting!!!!"
    abort_script "${_err_msg_}"
fi
}

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************

# Default user
DEFAULT_USER=root

# Check that the effective id of the user is root
check_id $DEFAULT_USER

# Set up environment variables for script.
setup_env

# Check/Create Logfile
check_create_logfile

#Check for the DNS Configuration 
check_glassfish_host
log_msg -t -s "ENIQ DNS check completed" -l ${LOGFILE}
log_msg -t -s "Check log $LOGFILE\n"
exit $RET_CODE
