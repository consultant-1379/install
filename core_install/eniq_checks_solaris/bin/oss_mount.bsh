#!/usr/bin/bash
#********************************************************************
# Ericsson Radio Systems AB SCRIPT
#********************************************************************
#
# (c) Ericsson Radio Systems AB 2016 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# in the agreement/contract under which the program(s) have been
# supplied.
#
#********************************************************************
# Name     : oss_mount.bsh
# Date     : 06/24/2016
# Revision : A
# Purpose  : Objective of this script is to enable users to check if
#            OSS is mounted correctly on EniQ Blades
#
# Usage    : oss_mount.bsh
# Exit Values:
#      0   : Success
#      3   : No Run: Abort script
#      53  : No Run: Not applicable for multiblade stats coordinator
#      156 : Fail  :All OSS are not mounted.
#      157 : Fail  :Some OSS are not mounted.
#
#********************************************************************
#
#       Command Section
#
#********************************************************************
AWK=/usr/bin/awk
BASH=/usr/bin/bash
CAT=/usr/bin/cat
CUT=/usr/bin/cut
CP=/usr/bin/cp
DATE=/usr/bin/date
DF=/usr/bin/df
ECHO=/usr/bin/echo
GETENT=/usr/bin/getent
GREP=/usr/bin/grep
HEAD=/usr/bin/head
MYHOSTNAME=/usr/bin/hostname
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
NAWK=/usr/bin/nawk
PING=/usr/sbin/ping
PWD=/usr/bin/pwd
RM=/usr/bin/rm
SCP=/usr/bin/scp
SLEEP=/usr/bin/sleep
SVCS=/usr/bin/svcs
TAIL=/usr/bin/tail
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
ZFS=/usr/sbin/zfs
MV=/usr/bin/mv


# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************

# Default user
DEFAULT_USER=root

#Present Working Directory
PWD=`pwd`


# ********************************************************************
#
#   Functions
#
# ********************************************************************

### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
else
    $ECHO "\nERROR : ${_err_msg_}\n"
fi

cleanup
exit 3
}


### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "${_err_msg_}"
fi
}


### Function: cleanup ###
#
# Cleanup of temporary directory
#
# Arguments:
#   none
# Return Values:
#   none
cleanup()
{
$RM -rf ${TEM_DIR}
}

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
# ENIQ Base Directory
ENIQ_BASE_DIR=/eniq

# ENIQ Admin Directory
ENIQ_ADMIN_DIR=${ENIQ_BASE_DIR}/admin

# ENIQ VAR Directory
ENIQ_VAR_DIR=/var

# ERICSSON Directory
ERICSSON_DIR=/ericsson

# ENIQ OPT Directory
OPT_DIR=/opt

# ENIQ LIB Directory
LIB_DIR=/lib

# ENIQ ETC Directory
ETC_DIR=/etc

# ENIQ SSH Directory
SSH_DIR=/.ssh

# ENIQ Admin Bin Directory
ENIQ_ADMIN_BIN_DIR=${ENIQ_ADMIN_DIR}/bin

# ENIQ Core Installation Directory
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# ENIQ Core Installation SW
ENIQ_CORE_INST_DIR=${ENIQ_INST_DIR}/core_install

# ENIQ Core Installation Bin Directory
ENIQ_CORE_DIR=${ENIQ_CORE_INST_DIR}/bin

# ENIQ Log Directory
ENIQ_LOG_DIR=${ENIQ_BASE_DIR}/local_logs

# ENIQ Config Directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

# ENIQ SW Conf Directory
ENIQ_SW_CONF_DIR=${ENIQ_BASE_DIR}/sw/conf

# ENIQ Crontab Directory
CRONTABS_DIR=${ENIQ_VAR_DIR}/spool/cron/crontabs

# Ericsson Bin Directory
ERICSSON_BIN_DIR=${ERICSSON_DIR}/storage/bin

# Unisphere Etc Directory
UNISPHERE_ETC_DIR=${ETC_DIR}/Unisphere

# Unisphere Bin Directory
UNISPHERE_BIN_DIR=${OPT_DIR}/Unisphere/bin

# ENIQ VAR SVC Directory
VAR_SVC_DIR=${ENIQ_VAR_DIR}/svc

# ENIQ VAR MANIFEST Directory
VAR_MANIFEST_DIR=${VAR_SVC_DIR}/manifest

# LIB METHOD Directory
LIB_METHOD_DIR=${LIB_DIR}/svc/method


HNAME=`${MYHOSTNAME}`
HOST_IP=`$GETENT hosts ${HNAME} | $NAWK '{print $1}' | $HEAD -1`

# Source the common functions
if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib not found"
    abort_script "${_err_msg_}"
fi

if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib not found"
    abort_script "${_err_msg_}"
fi

if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib not found"
    abort_script "${_err_msg_}"
fi



# File containing the type of OSS installation. Eg. events or statistics
INST_TYPE_FILE=${ENIQ_CONF_DIR}/ericsson_use_config
if [ ! -s "${INST_TYPE_FILE}" ]; then
    _err_msg_="ENIQ install type not defined in ${INST_TYPE_FILE}"
    abort_script "${_err_msg_}"
fi

# Read the installation type - should be "events" or "stats"
INST_TYPE=`$CAT ${INST_TYPE_FILE} | $NAWK -F\= '{print $2}'`

# Templates Directory
ENIQ_TEMPL_DIR=${ENIQ_CORE_INST_DIR}/templates/${INST_TYPE}

# Determine the current server type
CURR_SERVER_TYPE=`$CAT $ENIQ_CONF_DIR/installed_server_type | $GEGREP -v  '^[[:blank:]]*#' | $SED -e 's/ //g'`
if [ ! "${CURR_SERVER_TYPE}" ]; then
      _err_msg_="Could not determine which server type this is"
     abort_script "${_err_msg_}"
fi

}

### Function: oss_mount###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none

oss_mount(){
[ ! -f  $OSS_REF ] && { log_msg -t -s "$OSS_REF file not found" -l $LOGFILE; log_msg -t -s "INFO: OSS is not be mounted on this Blade." -l $LOGFILE; exit 0; }
[ ! -s $OSS_REF ] && { log_msg -t -s "$OSS_REF has no OSS to mount" -l $LOGFILE; log_msg -t -s "INFO: OSS is not be mounted on this Blade." -l $LOGFILE;exit 0; }

$CAT $OSS_REF | cut -d " " -f1 >  ${TEM_DIR}/oss_alias
log_msg -t -s "List of OSS that should be mounted:" -l $LOGFILE
log_msg -s "`$CAT $TEM_DIR/oss_alias`\n" -l $LOGFILE

for _line_ in `$CAT $TEM_DIR/oss_alias` ;do
   log_msg -s "Checking OSS Mount for ${_line_}" -l $LOGFILE
   mount -p | grep ${_line_} > $TEM_DIR/oss_alias_tmp

   if [ -s  $TEM_DIR/oss_alias_tmp ] ;then
   log_msg -s "${_line_} is mounted \n" -l $LOGFILE
   $ECHO "${_line_}\n" >> ${TEM_DIR}/oss_mount_y
   else
   log_msg -s "${_line_} is not mounted \n" -l $LOGFILE
   $ECHO "${_line_}\n" >> ${TEM_DIR}/oss_mount_n
   fi
$RM $TEM_DIR/oss_alias_tmp
done
}




# ********************************************************************
#
#   Main body of program
#
# ********************************************************************

# Timestamp
TIMESTAMP=`$DATE '+%d-%m-%y_%H.%M.%S'`


# Ctrl+C
trap "abort_script" INT


# Check that the effective id of the user is root
check_id $DEFAULT_USER


# Set up environment variables for script.
setup_env


# Log file
if [ ! -d "${LOGFILE}" ]; then
    $MKDIR -p /var/tmp/Precheck/logs/oss_mount
    LOGFILE="/var/tmp/Precheck/logs/oss_mount/ossMount.log"
    if [ -e "${LOGFILE}" ]; then
    $RM $LOGFILE
    fi
    $TOUCH $LOGFILE
fi


# Create a temporary Directory
TEM_DIR=/tmp/oss_mount.$$.$$
$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory $TEM_DIR"
    abort_script "${_err_msg_}"
fi

# Check  the server type

if [ "$CURR_SERVER_TYPE" == "stats_coordinator" ] ;then
        log_msg -t -s "This check is not valid for multi-blade Stats coordinator." -l $LOGFILE
        cleanup
        exit 53
fi

# OSS Refrence File
OSS_REF="/eniq/connectd/mount_info/.oss_ref_name_file"

# Check if OSS is mounted
oss_mount
if [ -s $TEM_DIR/oss_mount_n ] && [ ! -s $TEM_DIR/oss_mount_y ] ;then
        log_msg -t -s "ERROR:None of the OSS are mounted.\n" -l $LOGFILE
        log_msg -s "List of OSS not Mounted:" -l $LOGFILE
        log_msg -s "`$CAT $TEM_DIR/oss_mount_n`\n" -l $LOGFILE
        cleanup
        exit 156 
elif [ -s $TEM_DIR/oss_mount_y ] && [ ! -s $TEM_DIR/oss_mount_n ] ;then
        log_msg -t -s "INFO: All OSS are Mounted.\n" -l $LOGFILE
        log_msg -s "List of OSS Mounted:" -l $LOGFILE
        log_msg -s "`$CAT $TEM_DIR/oss_mount_y`\n" -l $LOGFILE
        cleanup
        exit 0
elif [ -s $TEM_DIR/oss_mount_n ] && [ -s $TEM_DIR/oss_mount_y ] ;then
        log_msg -t -s "ERROR: Some OSS are not mounted.\n" -l $LOGFILE
        log_msg -s "List of OSS not Mounted:" -l $LOGFILE
        log_msg -s "`$CAT $TEM_DIR/oss_mount_n`\n" -l $LOGFILE
        log_msg -s "List of OSS Mounted:" -l $LOGFILE
        log_msg -s "`$CAT $TEM_DIR/oss_mount_y`\n" -l $LOGFILE
        cleanup
        exit 157 
fi
