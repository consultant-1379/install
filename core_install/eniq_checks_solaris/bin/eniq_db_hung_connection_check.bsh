#!/usr/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2016 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : eniq_db_hung_connection_check.bsh 
# Date    : 29/08/2016
# Revision: B
# Purpose : Script will check the database hung connections.
#
# Usage   : eniq_db_hung_connection_check.bsh 
#
# Exit Values:
#  0   : SUCCESS
#  3   : NO RUN  : Healthcheck Aborted
#  74  : FAILED  : Failed to set DB env variables.
#  77  : FAILED  : Failed to execute DB query.
# 242  : WARNING : DB hung connection present.
#
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************

AWK="/usr/bin/awk"
CAT="/usr/bin/cat"
CP="/usr/bin/cp"
SU="/usr/bin/su"
CUT="/usr/bin/cut"
DATE="/usr/bin/date"
ECHO="/usr/bin/echo"
ID="/usr/bin/id"
TEE="/usr/bin/tee"
GREP="/usr/bin/grep"
DUMPADM="/usr/sbin/dumpadm"
XARGS="/usr/bin/xargs"
WC="/usr/bin/wc"
CD="cd"
LS="/usr/bin/ls"
RM="/usr/bin/rm"
HEAD="/usr/bin/head"
TAIL="/usr/bin/tail"
SED="/usr/bin/sed"
PERL="/usr/bin/perl"

#### RETURN CODE ENUM's ####
SUCCESS=0
FAILED=1
WARNING=2
NORUN=3
ROOT_USER_FAILED=71
DB_ENV_SET_FAILED=74
DB_QUERY_EXEC_FAILED=77
DB_HUNG_CON_WARNING=242

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
   if [ ! "${ENIQ_BASE_DIR}" ]; then
       ENIQ_BASE_DIR=/eniq
   fi

   # Main Directory for the Core Installation SW
   ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

   # Installation config directory
   ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

   # Precheck logs directory
   ENIQ_PRECHECK_LOG_DIR=${ENIQ_BASE_DIR}/local_logs

   # Installation lib directory
   ENIQ_LIB_DIR=${ENIQ_INST_DIR}/core_install/lib/

   # Common function directory
   COMMON_FUNCS_LIB=${ENIQ_LIB_DIR}/common_functions.lib

   # Installed server type path
   INSTALLED_SERVER_TYPE=${ENIQ_CONF_DIR}/installed_server_type

   # Ericsson config file path
   ERICSSON_USE_CONFIG=${ENIQ_CONF_DIR}/ericsson_use_config

   # Events_checks config file
   EVENTS_CHECK_CONFIG=${ENIQ_INST_DIR}/core_install/eniq_checks/config/events_config.cfg

   # Stats_checks config file
   STATS_CHECK_CONFIG=${ENIQ_INST_DIR}/core_install/eniq_checks/config/stats_config.cfg

   # Logfile path
   LOG_FILE=${ENIQ_PRECHECK_LOG_DIR}/precheck_hung_connection_check.log

   # Return code declaration
   RET_CODE=0

   # Imports the common library functions
   if [ ! -f "${COMMON_FUNCS_LIB}" ]; then
      _err_msg_="${COMMON_FUNCS_LIB} missing, this is required for this script, exiting!!!!"
      abort_script "${_err_msg_}"
   fi

   . ${COMMON_FUNCS_LIB}

   if [ $? -ne 0 ]; then
      _err_msg_="Importing functions of ${COMMON_FUNCS_LIB} failed, exiting!!!!"
      abort_script "${_err_msg_}"
   fi
}

### Function: abort_script
#
#   This will be called if the script is aborted through an error
#   encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program
# Return Values:
#       none
#

abort_script()
{
   _err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

   if [ "$1" ]; then
      _err_msg_="${_err_time_} - $1"
   else
      _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
   fi

   if [ "${LOG_FILE}" ]; then
      $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOG_FILE}
   else
      $ECHO "\nERROR : ${_err_msg_}\n"
   fi
   exit 3
}


#### Function: create_log_file ######
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       none
# Return Values:
#       none
#

create_log_file()
{
   $ECHO "" > ${LOG_FILE}  
}

### Function: check_user ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
#
check_user()
{
   local _check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

   if [ "$_check_id_" != "$1" ]; then
      _err_msg_="You must be $1 to execute this script."
      abort_script "$_err_msg_"
   fi
}

### Function: setup_db_env_var ###
#
# Set up database environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   0 : SUCCESS
#  74 : FAILED : Databse enviornment variable set failure
###

setup_db_env_var()
{
   # Configuration files.
   ENIQ_INI=niq.ini
   SUNOS_INI=SunOS.ini
   DWHDB_CFG=dwhdb.cfg

   # ENIQ directories
   ENIQ_BASE_DIR=/eniq
   ENIQ_SW_DIR=${ENIQ_BASE_DIR}/sw
   CLI_CONF_DIR=${ENIQ_BASE_DIR}/sw/conf
   DWHDB_CFG_DIR=$ENIQ_BASE_DIR/database/dwh_main
   ENIQ_CONF_DIR=$ENIQ_BASE_DIR/installation/config
   ENIQ_ADMIN_DIR=$ENIQ_BASE_DIR/admin
   ENIQ_ADMIN_ETC_DIR=$ENIQ_ADMIN_DIR/etc
   ENIQ_CORE_INST_DIR=$ENIQ_BASE_DIR/installation/core_install
   ENIQ_IQMSG_PATH=$ENIQ_BASE_DIR/local_logs/iq
   ENIQ_LOG_DIR=$ENIQ_BASE_DIR/log
   ENIQ_ARCHIEVE_IQMSG_PATH=$ENIQ_LOG_DIR/sw_log/iq
   ENIQ_ADMIN_BIN_DIR=$ENIQ_ADMIN_DIR/bin
   ENIQ_CORE_BIN_DIR=$ENIQ_CORE_INST_DIR/bin

   # Sybase directory
   DBISQL="$($LS $ENIQ_BASE_DIR/sybase_iq/IQ-*/bin64/dbisql)"
   SYBENV=$ENIQ_BASE_DIR/sybase_iq/IQ-*
   SYBSOURCE=$SYBENV/IQ-*.sh
   DBCCENV=$ENIQ_ADMIN_ETC_DIR/dbcheck.env
   SYSUSER="dcuser"

   _ret_code_=${SUCCESS}
   _err_string_="INFO : DB env variables set successfully."
   _db_conn_string_=""

   log_msg -t -s "INFO: Setting up the database env variables." -l  ${LOG_FILE}

   # Get DB server name
   DWH_ENG=`iniget DWH -v ServerName -f ${CLI_CONF_DIR}/niq.ini`
   if [ "$DWH_ENG" == "dwhdb" ]
   then
      server_type='DWH'
   else
      _err_string_="ERROR : Could not read server name from ${CLI_CONF_DIR}/${ENIQ_INI} ,VALUE: [ $DWH_ENG ]"
      abort_script "$_err_string_"
   fi

   # Get DB port
   DWH_PORT=`iniget ${server_type} -v PortNumber -f ${CLI_CONF_DIR}/niq.ini`
   if [ ! "${DWH_PORT}" -o ! "${DWH_ENG}" ]
   then
      _err_string_="ERROR : Could not read port number from ${CLI_CONF_DIR}/${ENIQ_INI},VALUE: [ ${DWH_PORT} ]"
      abort_script "$_err_string_"
   fi

   # Get the DB Password
   $GREP "DBAPassword_Encrypted" ${CLI_CONF_DIR}/${ENIQ_INI} > /dev/null

   if [ $? -ne 0 ]
   then
      DBA_PASSWORD=`iniget DB -f ${CLI_CONF_DIR}/${ENIQ_INI} -v DBAPassword`
   else
      DBA_PASSWORD=`inigetpassword DB -f ${CLI_CONF_DIR}/${ENIQ_INI} -v DBAPassword`
      if [ ! ${DBA_PASSWORD} ]
      then
         if [ -f ${ENIQ_BASE_DIR}/sw/installer/dbusers ]
         then
            DBA_PASSWORD=`${ENIQ_BASE_DIR}/sw/installer/dbusers dba dwh`
            if [ ! "${DBA_PASSWORD}" ]
            then
               _err_string_="ERROR : Could not get dwhdb DBA Password, VALUE: [ ${DBA_PASSWORD} ]"
               abort_script "$_err_string_"
            fi
         else
            _err_string_="ERROR : Could not get dwhdb DBA Password, VALUE: [ ${DBA_PASSWORD} ]"
            abort_script "$_err_string_"
         fi
      fi
   fi

   # Initialize the connection string for dwhdb
   _db_conn_string_="-nogui -onerror exit -c \"eng=${DWH_ENG};links=tcpip{host=localhost;port=${DWH_PORT}};uid=dba;pwd=${DBA_PASSWORD}\""

   log_msg -t -s " ${_err_string_}" -l  ${LOG_FILE}

}



#### Function : check_db_hung_connections #####
#
# Arguments:
#           None
# Return values:
#  0   : SUCCESS
#  3   : NO RUN  : Healthcheck Aborted
#  74  : FAILED  : Failed to set DB env variables.
#  77  : FAILED  : Failed to execute DB query.
# 242  : WARNING : DB hung connection present.
#
##

check_db_hung_connections()
{
   _query_file_="/tmp/queryFile.sql"
   _output_file_="/tmp/opFile"
   _ret_code_=${SUCCESS}
   _hung_conn_count_=0
   _hung_conn_count1_=0


   log_msg -t -s "INFO: Checking Database hung connections." -l  ${LOG_FILE}
   setup_db_env_var; _ret_code_=$?

   _err_string_=""

   if [ ${_ret_code_} -eq ${SUCCESS} ]
   then
      # Check for the connection count which is idle from 4hrs and consuming memory more then 4Gb
      $ECHO "select count(conn.ConnHandle) from sp_iqconnection() conn, sp_iqversionuse() ver where conn.IQConnID = ver.IQConnID AND LastIdle>=240 AND MaxKBRelease >= 41943040" > ${_query_file_}
      log_msg -q -t -s "INFO: Executing below query : \n" -l ${LOG_FILE}
      log_msg -q -t -s "$SU - $SYSUSER -c $DBISQL ${_db_conn_string_} '`$CAT ${_query_file_}`'" -l ${LOG_FILE}

      $SU - $SYSUSER -c "$DBISQL ${_db_conn_string_} '${_query_file_}'" > ${_output_file_} 2>&1; _ret_code_=$?
      log_msg -q -t -s "\nINFO : Query result :\n" -l ${LOG_FILE}
      $CAT ${_output_file_} >> ${LOG_FILE}

      if [ $_ret_code_ -ne ${SUCCESS} ]
      then
         _err_string_="ERROR : Failed to execute the DB query."
         _ret_code_=${DB_QUERY_EXEC_FAILED}
      else
         _hung_conn_count_=`$CAT ${_output_file_} | $HEAD -n 4 | $TAIL -1 | $SED -e 's/ //g'`

         # Check for the connection count which is idle from 12hrs 
         $ECHO "select count(ConnHandle) from  sp_iqconnection() where Userid in ('dcpublic','dcbo') AND DATEDIFF(mi,LastReqTime,now()) >= 720" > ${_query_file_}
         log_msg -q -t -s "INFO: Executing below query : \n" -l  ${LOG_FILE}
         log_msg -q -t -s "$SU - $SYSUSER -c $DBISQL ${_db_conn_string_} '`$CAT ${_query_file_}`'" -l ${LOG_FILE}
         $SU - $SYSUSER -c "$DBISQL ${_db_conn_string_} '${_query_file_}'" > ${_output_file_} 2>&1; _ret_code_=$?
         log_msg -q -t -s "\nINFO: Query result :\n" -l ${LOG_FILE}
         $CAT ${_output_file_} >> ${LOG_FILE}

         if [ $_ret_code_ -ne ${SUCCESS} ]
         then
            _err_string_="ERROR : Failed to execute the DB query."
            _ret_code_=${DB_QUERY_EXEC_FAILED}
         else
            _hung_conn_count1_=`$CAT ${_output_file_} | $HEAD -n 4 | $TAIL -1 | $SED -e 's/ //g'`

            # Check if any hung connection present or not
            if [ ${_hung_conn_count_} -ge 3 -o ${_hung_conn_count1_} -ne 0 ]
            then
               if [ ${_hung_conn_count_} -ge 3 ]
               then
                  _err_string_="\nWARNING : Found ${_hung_conn_count_} connections, which is idle from 4hrs and more then 40Gb in size."
                  $ECHO "select conn.ConnHandle from sp_iqconnection() conn, sp_iqversionuse() ver where conn.IQConnID = ver.IQConnID AND LastIdle>=240 AND MaxKBRelease >= 41943040" > ${_query_file_} 
                  $SU - $SYSUSER -c "$DBISQL ${_db_conn_string_} '${_query_file_}'" > ${_output_file_} 2>&1;
                  log_msg -q -t -s "\nINFO: Below are the connection handle details(Idle time : >=4hrs, Space: >=4Gb) \n" -l ${LOG_FILE}
                  $CAT ${_output_file_} >> ${LOG_FILE}
               fi

               if [ ${_hung_conn_count1_} -ne 0 ]
               then
                  _err_string_+="\nWARNING : Found ${_hung_conn_count1_} connections, which is idle from 12hrs.\n"
                  $ECHO "select ConnHandle from  sp_iqconnection() where Userid in ('dcpublic','dcbo') AND DATEDIFF(mi,LastReqTime,now()) >= 720" > ${_query_file_} 
                  $SU - $SYSUSER -c "$DBISQL ${_db_conn_string_} '${_query_file_}'" > ${_output_file_} 2>&1;
                  log_msg -q -t -s "\nINFO : Below are the connection handle details (Idle time : >=12hrs)\n" -l ${LOG_FILE}
                  $CAT ${_output_file_} >> ${LOG_FILE}
               fi
               _ret_code_=${DB_HUNG_CON_WARNING}
            else
               _err_string_="SUCCESS : No hung connection found."
               _ret_code_=${SUCCESS}
            fi
         fi
      fi
   else
      _err_string_="ERROR : Failed to check hung connection's"
   fi

   $RM -rf ${_query_file_} ${_output_file_}

   log_msg -t -s "INFO :  ${_err_string_}\n" -l  ${LOG_FILE}
   log_msg -t -s "INFO :  Log location : ${LOG_FILE}"
   return ${_ret_code_}
}

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************

# Check the current user as root
check_user "root"; _ret_code_=$?
if [ "$_ret_code_" -ne ${SUCCESS} ]
then
   log_msg -t -s "FAILED : You need to be a root user to execute this script" -l ${LOG_FILE}
   _ret_code_=${ROOT_USER_FAILED}
   exit ${_ret_code_}
fi

# Set up environment variables for script.
setup_env

# Create log file
create_log_file

# Check database hung connections 
log_msg -t -s "INFO : Checking database hung connections : BEGIN" -l ${LOG_FILE}
check_db_hung_connections; rCode=$?
log_msg -t -s "INFO : Checking database hung connections : END, RC:$rCode" -l ${LOG_FILE}
exit ${rCode}

