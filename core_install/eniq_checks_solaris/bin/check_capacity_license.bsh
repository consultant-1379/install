#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2017 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : check_capacity_license.bsh
# Date    : 28/04/2017
# Revision: A
# Purpose : Script to check the capacity of the server in case of SB to MB upgrade 
# Usage   : check_capacity_license.bsh
# Author  :xgaurku
# Exit Values:
#    0   : SUCCESS
#  131   : FAIL 
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************
NAWK=/usr/bin/nawk
CHMOD=/usr/bin/chmod
DATE=/usr/bin/date
ID=/usr/bin/id
RM=/usr/bin/rm
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
SU=/usr/bin/su
TAIL=/usr/bin/tail
MKDIR=/usr/bin/mkdir
ECHO=/usr/bin/echo
GEGREP=/usr/sfw/bin/gegrep
CAT=/usr/bin/cat
WC=/usr/bin/wc
# ********************************************************************
#                                                                    *
#                        Functions                                   *
#                                                                    *
# ********************************************************************

### Function: abort_script
#
#   This will be called if the script is aborted through an error
#   encountered during runtime
#
# Arguments: $1 - Error message from part of program (Not always used)
# Return Values: none
#
#
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi
if [ "${LOGFILE}" ]; then
    $ECHO "\nERROR: ${_err_msg_}\n" | $TEE -a ${LOGFILE}
else
    $ECHO "\nERROR: ${_err_msg_}\n"
fi
exit 3
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments: $1 : User ID name
# Return Values: none
#
#

check_id()
{
local _check_id_=`$ID  | $NAWK -F\( '{print $2}' | $NAWK -F\) '{print $1}'`

if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}

### Function: check_create_logfile ###
#
# Check/Create Logfile
#
# Arguments: none
# Return Values: none
#
#
check_create_logfile()
{
if [ -s $LOGFILE  ]; then
    $RM -rf $LOGFILE
    if [ -f $LOGFILE  ]; then
        _err_msg_="Could not remove older ${LOGFILE}"
        abort_script "$_err_msg_"
    fi
fi

if [ ! -d  ${ENIQ_PRECHECK_LOG_DIR} ]; then
    ${MKDIR} -p ${ENIQ_PRECHECK_LOG_DIR}
    if [ $? -ne 0 ]; then
        _err_msg_="Could not create ${ENIQ_PRECHECK_LOG_DIR}"
        abort_script "$_err_msg_"
    fi
fi

$TOUCH ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create log file ${LOGFILE}"
    abort_script "$_err_msg_"
fi

$CHMOD 640 ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not change the permissions of the ${LOGFILE}"
    abort_script "$_err_msg_"
fi

}

### Function: check_capacity_license ###
#
# status of check_capacity_license
#
# Arguments: None
# Return values:
#    0   : SUCCESS
#  131   : FAIL     
check_capacity_license()
{
DETECTED_CPUS=`/usr/sbin/psrinfo -p`

LICENSED_CPUS=`$SU - dcuser -c "licmgr -getlicinfo  | $GEGREP -i \"capacity\" | $TAIL -1" | $TAIL -1 | $NAWK '{print $NF}'`

SERVER_TYPES_COUNT=`$CAT $ENIQ_SW_CONF/server_types | $WC -l`

MultiBlade_CPUs=$(($DETECTED_CPUS*$SERVER_TYPES_COUNT))

CURR_SERVER_TYPE=`$CAT $ENIQ_CONF_DIR/installed_server_type`

if [ $CURR_SERVER_TYPE == "stats_coordinator" ]; then
	if [ $LICENSED_CPUS -lt $MultiBlade_CPUs ]; then 
	log_msg -s "Installed license of capacity :$LICENSED_CPUS has less capacity than the system capacity:$MultiBlade_CPUs , Please install a license of capacity:$MultiBlade_CPUs " -l ${LOGFILE}
	RET_CODE=131
	else
	log_msg -s "Installed license has sufficient capacity of :$LICENSED_CPUS which is in accordance of system capacity:$MultiBlade_CPUs " -l ${LOGFILE}
	RET_CODE=0
	fi 
else
	log_msg -s "Installed server is not a Multi Blade deployment and has system capacity of $DETECTED_CPUS " -l ${LOGFILE}
	RET_CODE=0
fi 

}
### Function: setup_env ###
#
# Setup path environment
# Imports the common lib files which imports common functions
#
# Arguments: none
# Return Values: none
#
#
setup_env()
{
if [ ! "${ENIQ_BASE_DIR}" ]; then
    ENIQ_BASE_DIR=/eniq
fi

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# Installation config directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

# Precheck logs directory
ENIQ_PRECHECK_LOG_DIR=${ENIQ_BASE_DIR}/local_logs/precheck_logs

#Installation lib directory
ENIQ_LIB_DIR=${ENIQ_INST_DIR}/core_install/lib/

#Configuration directory
ENIQ_SW_CONF=${ENIQ_BASE_DIR}/sw/conf

# Logfile path
LOGFILE=${ENIQ_PRECHECK_LOG_DIR}/check_capacity_license.log

#Common function directory
COMMON_FUNCS_LIB=${ENIQ_LIB_DIR}/common_functions.lib

#Imports the common library functions
if [ ! -f "${COMMON_FUNCS_LIB}" ]; then
    _err_msg_="${COMMON_FUNCS_LIB} missing, this is required for this script, exiting!!!!"
    abort_script "${_err_msg_}"
fi

. ${COMMON_FUNCS_LIB}

if [ $? -ne 0 ]; then
    _err_msg_="Importing functions of ${COMMON_FUNCS_LIB} failed, exiting!!!!"
    abort_script "${_err_msg_}"
fi



}

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************
# Default user
DEFAULT_USER=root

# Check that the effective id of the user is root
check_id $DEFAULT_USER

# Set up environment variables for script.
setup_env

#Check and create the log file
check_create_logfile

# Return code declaration
RET_CODE=0

#Check for capacity license 
check_capacity_license    

log_msg -t -s "Capacity License check completed" -l ${LOGFILE}
log_msg -t -s "Check log $LOGFILE\n"

exit $RET_CODE
                                                

