#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2016 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : check_ssh.bsh
# Date    : 06/05/2017
# Revision: B
# Purpose : This script is to check the file system size.
#
# Usage   : check_ssh.bsh
# ********************************************************************
#
#   Command Section
#
# ********************************************************************

CAT=/usr/bin/cat
AWK=/usr/bin/awk
ECHO=/usr/bin/echo
MYHOSTNAME=/usr/bin/hostname
MKDIR=/usr/bin/mkdir
NAWK=/usr/bin/nawk
PWD=/usr/bin/pwd
RM=/usr/bin/rm
CHMOD=/usr/bin/chmod
DATE=/usr/bin/date
DF=/usr/bin/df
SSH=/usr/bin/ssh
DIRNAME=/usr/bin/dirname
EGREP=/usr/bin/egrep
GREP=/usr/bin/grep
ID=/usr/bin/id
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
GETENT=/usr/bin/getent
HEAD=/usr/bin/head


### Function: abort_script 
#                                                                     
#   This will be called if the script is aborted through an error     
#   signal sent by the kernel such as CTRL-C or if a serious          
#   error is encountered during runtime                               
#                                                                     
# Arguments:                                                          
#       $1 - Error message from part of program (Not always used)     
# Return Values:                                                      
#       none                                                          

abort_script()
{
    _err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

    if [ "$1" ]; then
        _err_msg_="${_err_time_} - $1"
    else
        _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
    fi
    if [ "${LOGFILE}" ]; then
        $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
    else
        $ECHO "\nERROR : ${_err_msg_}\n"
    fi
	$RM -rf ${TEM_DIR}
    exit 3
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
local _check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}

### Function: chk_logfile ###
#
# Check Logfile
#
# Arguments:
#   none
# Return Values:
#   none

chk_logfile()
{

if [ ! -d $ENIQ_PRECHECK_LOG_DIR  ]
    then
	$MKDIR -p `$ENIQ_PRECHECK_LOG_DIR`
    if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory `$ENIQ_PRECHECK_LOG_DIR`"
    abort_script "${_err_msg_}" 
    fi
 fi
 
 if [ -s $LOGFILE  ]
    then
    $RM -rf $LOGFILE 
	if [ -s $LOGFILE  ]
	then
	    _err_msg_="Warning : Could not remove older ${LOGFILE}"
        abort_script "$_err_msg_"
	fi	
 fi

 
$TOUCH ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not write to file ${LOGFILE}"
    abort_script "$_err_msg_"
fi
$CHMOD 777 ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not change the permissions of the ${LOGFILE}"
    abort_script "$_err_msg_"
fi
}


### Function: ssh_execute ###
#
# Get the order of the blades
# 
#
# Arguments:
#       none
# Return Values:
#       none

ssh_execute()
{
$RM -rf ${TEM_DIR}/execution_order_list

log_msg -l "$LOGFILE" -s "\nGetting execution order for the blades..\n"

/usr/bin/perl ${ENIQ_CORE_INST_DIR}/lib/get_ip_order.pl -f ${TEM_DIR}/execution_order

if [ $? -ne 0 ]; then
    _err_msg_="Could not get an ordered list of servers."
    abort_script "${_err_msg_}"
fi

log_msg -l "$LOGFILE" -s "Execution Order :\n\n`$CAT ${TEM_DIR}/execution_order`\n"
for _line_ in `$CAT ${TEM_DIR}/execution_order`; do
    _ip_address_=`$ECHO ${_line_} | $NAWK -F"::" '{print $1}'`
    _serv_hostname_=`$ECHO ${_line_} | $NAWK -F"::" '{print $2}'`
	
        if [ ! "${_ip_address_}" -o ! "${_serv_hostname_}" ]; then
                _err_msg_="Could not read required info."
                abort_script "${_err_msg_}"
        fi
		log_msg -l "$LOGFILE" -s "\nBLADE : ${_serv_hostname_}"
		if [ "${_ip_address_}" == "${HOST_IP}" ]; then
		    log_msg -t -l "$LOGFILE" -s "Same host name. SSh check not required"
		else
            
			
		    SERVICE_COMMAND="$ECHO Status : Connection Successful"
			
            log_msg -t -q -l "$LOGFILE" -s "Checking ssh on server ${_serv_hostname_}"
            $SSH -o StrictHostKeyChecking=no -o BatchMode=yes -q $DEFAULT_USER@$_serv_hostname_ $SERVICE_COMMAND | tee -a $LOGFILE
		
            if [ $? -ne 0 ]; then            
			       log_msg -t -l "$LOGFILE" -s "\nCould not ssh on ${_serv_hostname_}."
			       RET_CODE=117
                   else 
			       log_msg -t -l "$LOGFILE" -s "Connection established on ${_serv_hostname_}"
            fi
        
        fi 
done
}

### Function: key_checks ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none
key_checks()
{
_encryption_id_ras_pub_key_=`$CAT ${ENIQ_SSH_DIR}/id_rsa.pub | $AWK '{print $2}'`
while read line
do
  _encryption_authorized_key_=`$ECHO $line | $AWK '{print $2}'`
  if [ "${_encryption_id_ras_pub_key_}" == "${_encryption_authorized_key_}" ]; then
           log_msg -l "$LOGFILE" -s "\nauthorized_keys file contains id_rsa.pub of this server"
           return 0
  fi
done<${ENIQ_SSH_DIR}/authorized_keys
log_msg -l "$LOGFILE" -s "\nauthorized_keys file does not contain id_rsa.pub of this server"
RET_CODE=117
}

### Function: setup_env ###
#
# Setup up path environment
# Imports the common lib files which imports common functions 
#
# Arguments:
#   none
# Return Values:
#   none

setup_env()
{
if [ ! "${ENIQ_BASE_DIR}" ]; then
    ENIQ_BASE_DIR=/eniq
fi

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# Installation lib directory
ENIQ_LIB_DIR=${ENIQ_INST_DIR}/core_install/lib/

# ENIQ LIB Directory
LIB_DIR=/lib

# Installation config directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

# Common function directory
COMMON_FUNCS_LIB=${ENIQ_LIB_DIR}/common_functions.lib

# Local logs directory
ENIQ_PRECHECK_LOG_DIR=${ENIQ_BASE_DIR}/local_logs/precheck_logs

# Eniq core install directory
ENIQ_CORE_INST_DIR=${ENIQ_INST_DIR}/core_install

# ENIQ ssh Directory
ENIQ_SSH_DIR=${ENIQ_BASE_DIR}/home/dcuser/.ssh

# Source the common functions
if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib not found"
    abort_script "${_err_msg_}"
fi

if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib not found"
    abort_script "${_err_msg_}"
fi

if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib not found"
    abort_script "${_err_msg_}"
fi


HNAME=`${MYHOSTNAME}`
HOST_IP=`$GETENT hosts ${HNAME} | $NAWK '{print $1}' | $HEAD -1`
}

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************
#

# Default user
DEFAULT_USER=root

# Check that the effective id of the user is root
check_id $DEFAULT_USER

# Set up environment variables for script.
setup_env

# Logfile path
LOGFILE=${ENIQ_PRECHECK_LOG_DIR}/log_ssh.log

#Return code declaration
RET_CODE=0 

# Check Logfile
chk_logfile

#Create a temporary Directory
TEM_DIR=/tmp/ssh_check.$$.$$

$MKDIR -p ${TEM_DIR}

if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory ${TEM_DIR}"
    abort_script "${_err_msg_}"
fi

# SSH on other blades 
ssh_execute

# key checks
key_checks

log_msg -t -s "SSH check completed. Check log $LOGFILE\n"

$RM -rf ${TEM_DIR}
if [ -s ${TEM_DIR} ]; then
    _err_msg_="Could not remove ${TEM_DIR}"
    abort_script "$_err_msg_"
fi

exit $RET_CODE


