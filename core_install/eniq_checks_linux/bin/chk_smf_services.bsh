#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2019 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : chk_smf_services.bsh
# Date    : 18/08/2023 
# Revision: \main\9
# Purpose : Script to check the status of ENIQ and ddc services of ENIQ server
# Usage   : chk_smf_services.bsh
# Exit Values: 
#    0   : SUCCESS
#    155 : WARNING -DDC service is in failed state
#    101 : FAILURE -All services are down
# ********************************************************************
#
#   Command Section
#
# ********************************************************************

AWK=/usr/bin/awk
BASH=/usr/bin/bash
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO="/usr/bin/echo -e"
EGREP=/usr/bin/egrep
GAWK=/usr/bin/gawk
GREP=/usr/bin/grep
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
RM=/usr/bin/rm
SYSTEMCTL=/usr/bin/systemctl
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch


# ********************************************************************
#                                                                    *
#   		         Functions                                   *
#                                                                    *
# ********************************************************************

### Function: abort_script 
#                                                                     
#   This will be called if the script is aborted through an error        
#   encountered during runtime                               
#                                                                     
# Arguments:                                                          
#       $1 - Error message from part of program (Not always used)     
# Return Values:                                                      
#       none                                                          
#
abort_script()
{

_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi
if [ "${LOGFILE}" ]; then
    $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
else
    $ECHO "\nERROR : ${_err_msg_}\n"
fi
$RM -rf ${TEM_DIR}
exit 3

}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
#
check_id()
{
local _check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}

### Function: chk_create_logfile ###
#
# Check/Create Logfile
#
# Arguments:
#   none
# Return Values:
#   none
#
chk_create_logfile()
{

if [ ! -d ${ENIQ_PRECHECK_LOG_DIR}  ]
    then
	$MKDIR -p ${ENIQ_PRECHECK_LOG_DIR}
    if [ $? -ne 0 ]; then
        _err_msg_="Could not create directory `${ENIQ_PRECHECK_LOG_DIR}`"
        abort_script "${_err_msg_}" 
    fi
fi 
 
if [ -s $LOGFILE  ]
    then
    $RM -rf $LOGFILE
    if [ -s $LOGFILE  ]
	then
	    _err_msg_="Warning : Could not remove older ${LOGFILE}"
        abort_script "$_err_msg_"
	fi	
fi

$TOUCH -a ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not write to file ${LOGFILE}"
    abort_script "$_err_msg_"
fi

$ECHO "Changing permission of the ${LOGFILE} to 644" | $TEE -a ${LOGFILE}
$CHMOD 644 ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not change the permissions of the ${LOGFILE} file to 644"
    abort_script "$_err_msg_"
fi
}

### Function: check_services ###
#
# Create a list of all ENIQ services and DDC service
# from service contract file and checks their status
#
# Arguments:
#    None
# Return values:
#    0 SUCCESS 155 WARNING-DDC service is in Maintenance state 
#    101 FAIL- Services are down
#
check_services()
{       
# Getting the services list from contract file        
$CAT ${SVC_CONTRACT_INFO} | $EGREP -w ${CURR_SERVER_TYPE} | $EGREP -w "${MANAGED_STR}|${DDC_SERVICE}" | $GREP -w "Y" > $TEM_DIR/server_type_contracts
if [ ! -s $TEM_DIR/server_type_contracts ]; then
    _err_msg_="Could not parse services for ${CURR_SERVER_TYPE} server from ${SVC_CONTRACT_INFO}"
    abort_script "${_err_msg_}"
fi
log_msg -t -l "$LOGFILE" -q -s "The current server type : $CURR_SERVER_TYPE"
log_msg -t -l "$LOGFILE" -q -s  "Getting the services in the contract file\n "
log_msg -l "$LOGFILE" -q -s "List of services on ${CURR_SERVER_TYPE} : \n"

# Parsing the service list
while read _line_; do
    # Determine the service name string
    _service_name_=`$ECHO ${_line_} | $GAWK -F"::" '{print $3}'`
    if [ "${_service_name_}" != "${DDC_SERVICE}" ]; then
        _service_name_="${SVC_COMMON_STR}-${_service_name_}"
    fi

    log_msg -q -l "$LOGFILE" -s "${_service_name_}"
    
    # Checks the status of services
    _state_=`$SYSTEMCTL show -p ActiveState ${_service_name_} | $AWK -F= '{print $2}'`
    if [ "${_state_}" == "active" ]; then
        $ECHO "${_service_name_}::${_state_}" >> $TEM_DIR/online_file
    elif [ "${_state_}" == "failed" -a "${_service_name_}" == "${DDC_SERVICE}" ]; then
        $ECHO "${_service_name_}::${_state_}" >> $TEM_DIR/ddc_file
    elif [ "${_service_name_}" == "${FLS_SERVICE}" ];then
        if [ -s $ENIQ_CONF_DIR/fls_conf ]; then
            $ECHO "${_service_name_}::${_state_}" >> $TEM_DIR/offline_file
        fi
    else
        $ECHO "${_service_name_}::${_state_}" >> $TEM_DIR/offline_file
    fi
done < $TEM_DIR/server_type_contracts

log_msg -t -l "$LOGFILE" -s "Checking the status of the services..\n"

# Checking the content of the files
if [ -s "$TEM_DIR/offline_file" ]; then
    RET_CODE=101
elif [ -s "$TEM_DIR/ddc_file" ]; then
    RET_CODE=155
fi

if [ -s "$TEM_DIR/ddc_file" ]; then
    $CAT $TEM_DIR/ddc_file >> $TEM_DIR/offline_file 
fi	

# Prints the active services
if [ -s "${TEM_DIR}/online_file" ]; then
    log_msg -l "$LOGFILE" -s "Active Services:"
    log_msg -l "$LOGFILE" -s "----------------"
    log_msg -l "$LOGFILE" -s "`$CAT ${TEM_DIR}/online_file`\n"
fi

# Prints the non-active Services. Can include 'failed' services.
if [ ! -s "${TEM_DIR}/offline_file" ]; then
    log_msg -t -l "$LOGFILE" -s "SUCCESS : All Services are up and running\n"
else	
    log_msg -l "$LOGFILE" -s "Non-active Services:"
    log_msg -l "$LOGFILE" -s "--------------------"
    log_msg -l "$LOGFILE" -s "`$CAT ${TEM_DIR}/offline_file`\n" 
    log_msg -t -l "$LOGFILE" -s "ERROR : Services are not up and running.\n"
fi

}

### Function: setup_env ###
#
# Setup path environment
# Imports the common lib files which imports common functions 
# 
# Arguments:
#   none
# Return Values:
#   none
#
setup_env()
{

# Gloabal values
SVC_COMMON_STR='eniq'
DDC_SERVICE='ddc'
FLS_SERVICE='eniq-fls'

if [ ! "${ENIQ_BASE_DIR}" ]; then
    ENIQ_BASE_DIR=/eniq
fi

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# Installation config directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

# Local logs directory
ENIQ_PRECHECK_LOG_DIR=${ENIQ_BASE_DIR}/local_logs/precheck_logs

# Admin directory
ENIQ_ADMIN_DIR=${ENIQ_BASE_DIR}/admin/etc

# Common function file
COMMON_FUNCS_LIB=${ENIQ_INST_DIR}/core_install/lib/common_functions.lib

# Imports the common library function
if [ ! -f "${COMMON_FUNCS_LIB}" ]
    then
    _err_msg_="${COMMON_FUNCS_LIB} missing, this is required for this script, exiting!!!!"
    abort_script "${_err_msg_}"
else
    . ${COMMON_FUNCS_LIB}
    if [ $? -ne 0 ]
        then
        _err_msg_="Importing functions of ${COMMON_FUNCS_LIB} failed, exiting!!!!"
        abort_script "${_err_msg_}"
    fi
fi

# Getting the current server type
CURR_SERVER_TYPE=`$CAT $ENIQ_CONF_DIR/installed_server_type`
if [ ! "${CURR_SERVER_TYPE}" ]; then
    _err_msg_="Could not read $ENIQ_CONF_DIR/installed_server_type"
    abort_script "${_err_msg_}" 
fi

# Getting the CONTRACT file
SVC_CONTRACT_INFO=${ENIQ_ADMIN_DIR}/smf_contract_config
if [ ! -s ${SVC_CONTRACT_INFO} ]; then
    _err_msg_="Could not find ${SVC_CONTRACT_INFO} file, or it is empty"
    abort_script "${_err_msg_}" 
fi

}

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************


# Default user
DEFAULT_USER=root

# Check that the effective id of the user is root
check_id $DEFAULT_USER

# Set up environment variables for script.
setup_env

# Logfile path
LOGFILE=${ENIQ_PRECHECK_LOG_DIR}/log_service_precheck.log

# Return code declaration
RET_CODE=0 
	
# Check/Create Logfile
chk_create_logfile

# String used to determine if the service is an actual ENIQ managed service
MANAGED_STR="ENIQ"

#Create a temporary Directory
TEM_DIR=/tmp/service_precheck.$$.$$

$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory ${TEM_DIR}"
    abort_script "${_err_msg_}"
fi

# Check for the status of services
log_msg -t -s " Starting ENIQ services status check. \n"
check_services
log_msg -t -s "ENIQ services status check completed . \n"

$RM -rf ${TEM_DIR}

exit $RET_CODE
