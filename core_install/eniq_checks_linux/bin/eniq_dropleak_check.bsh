#!/usr/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2019 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : eniq_dropleak_check.bsh 
# Date    : 15/09/2022
# Revision: \main\4
# Purpose : Script will check for any leak blocks in database.
#
# Usage   : eniq_dropleak_check.bsh 
#
# Exit Values:
#  0   : SUCCESS
#  3   : FAILURE : Healthcheck Aborted
#  73  : FAILURE : Dropleaks found in database.
#  74  : FAILURE : Failed to set DB env variables.
#  77  : FAILURE : Failed to execute DB query.
#  78  : FAILURE : Dropleak check not executed yet.
#  84  : FAILURE : Current System is running below 16B, need to run the check manually.
#
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************

AWK="/usr/bin/awk"
CAT="/usr/bin/cat"
DATE="/usr/bin/date"
ECHO="/usr/bin/echo -e"
ID="/usr/bin/id"
TEE="/usr/bin/tee"
GREP="/usr/bin/grep"

#### RETURN CODE ENUM's ####
SUCCESS=0
FAILED=1
WARNING=2
NORUN=3
ROOT_USER_FAILED=71
DROPLEAK_FAILED=73
DB_ENV_SET_FAILED=74
DROPLEAK_NOT_EXEC_FAILED=78
SYSTEM_BELOW_16B=84

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
   if [ ! "${ENIQ_BASE_DIR}" ]; then
       ENIQ_BASE_DIR=/eniq
   fi

   # Main Directory for the Core Installation SW
   ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

   # Installation config directory
   ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

   # Precheck logs directory
   ENIQ_PRECHECK_LOG_DIR=${ENIQ_BASE_DIR}/local_logs

   # Installation lib directory
   ENIQ_LIB_DIR=${ENIQ_INST_DIR}/core_install/lib/

   # Common function directory
   COMMON_FUNCS_LIB=${ENIQ_LIB_DIR}/common_functions.lib

   # Installed server type path
   INSTALLED_SERVER_TYPE=${ENIQ_CONF_DIR}/installed_server_type

   # Ericsson config file path
   ERICSSON_USE_CONFIG=${ENIQ_CONF_DIR}/ericsson_use_config

   # Events_checks config file
   EVENTS_CHECK_CONFIG=${ENIQ_INST_DIR}/core_install/eniq_checks/config/events_config.cfg

   # Stats_checks config file
   STATS_CHECK_CONFIG=${ENIQ_INST_DIR}/core_install/eniq_checks/config/stats_config.cfg

   # Logfile path
   LOG_FILE=${ENIQ_PRECHECK_LOG_DIR}/precheck_dropleak_check.log

   # Return code declaration
   RET_CODE=0

   # Imports the common library functions
   if [ ! -f "${COMMON_FUNCS_LIB}" ]; then
      _err_msg_="${COMMON_FUNCS_LIB} missing, this is required for this script, exiting!!!!"
      abort_script "${_err_msg_}"
   fi

   . ${COMMON_FUNCS_LIB}

   if [ $? -ne 0 ]; then
      _err_msg_="Importing functions of ${COMMON_FUNCS_LIB} failed, exiting!!!!"
      abort_script "${_err_msg_}"
   fi
}

### Function: abort_script
#
#   This will be called if the script is aborted through an error
#   encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program
# Return Values:
#       none
#

abort_script()
{
   _err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

   if [ "$1" ]; then
      _err_msg_="${_err_time_} - $1"
   else
      _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
   fi

   if [ "${LOG_FILE}" ]; then
      $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOG_FILE}
   else
      $ECHO "\nERROR : ${_err_msg_}\n"
   fi
   exit 3
}


#### Function: create_log_file ######
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       none
# Return Values:
#       none
#

create_log_file()
{
   $ECHO "" > ${LOG_FILE}  
}

### Function: check_user ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
#
check_user()
{
   local _check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

   if [ "$_check_id_" != "$1" ]; then
      _err_msg_="You must be $1 to execute this script."
      abort_script "$_err_msg_"
   fi
}

#### Function : check_drop_leaks #####
#
# Arguments:
#           None
# Return values:
#  0   : SUCCESS
#  73  : FAILURE : Dropleaks found in database.
#  74  : FAILURE : Failed to set DB env variables.
#  77  : FAILURE : Failed to execute DB query.
#  51  : NO RUN  : Dropleak check not executed yet.
#  84  : FAILURE : Current System is running below 16B, need to run the check manually.
##

check_drop_leaks()
{
   declare -a _drop_leaks_err_data_;
   _is_drop_leak_=0;
   _err_index_=0;
   _drop_leak_exec_check_=0;
   _ret_code_=${SUCCESS}
   _drop_leak_log_dir_=""
   _err_string_="";
   _db_alloc_status_="";
   _verify_table_status_="";
   _iq_msg_check_status_="";
   _db_check_env_file_="/eniq/admin/etc/dbcheck.env";

   # In drop-leaks we check the results generated by trigger_dbcheck.bsh script in cronjob everyday

   # Check dbcheck.env file existence
   if [ -f ${_db_check_env_file_} ]
   then
      _drop_leak_exec_check_=`$CAT $_db_check_env_file_ | $GREP "RUNNUMBER=" | $AWK -F= '{print $2}'`
      _drop_leak_log_dir_=`$CAT $_db_check_env_file_ | $GREP "RESULTSDIR=" | $AWK -F= '{print $2}'`

      # Check if "trigger_dbcheck.bsh" script is executed in cron or not
      if [ ${_drop_leak_exec_check_} -ne 0 ]
      then
         _db_alloc_status_=`$CAT $_db_check_env_file_ | $GREP "db_allocation_LASTRUN_STATE="`
         _verify_table_status_=`$CAT $_db_check_env_file_ | $GREP "verify_tables_LASTRUN_STATE="`
         _iq_msg_check_status_=`$CAT $_db_check_env_file_ | $GREP "iqmsg_check_LASTRUN_STATE="`

         if [ "${_db_alloc_status_}" == "" -a "${_verify_table_status_}" == "" -a "${_iq_msg_check_status_}" == "" ]
         then
            # We are here because current system is running below ENIQ 16B release
            log_msg -t -s "SUCCESS : Current system is running below 16B. Please run the check manually." -l  ${LOG_FILE}
            _ret_code_=${SYSTEM_BELOW_16B}
         else 
            _db_alloc_status_=`$CAT $_db_check_env_file_ | $GREP "db_allocation_LASTRUN_STATE=" | $AWK -F= '{print $2}'`
            _verify_table_status_=`$CAT $_db_check_env_file_ | $GREP "verify_tables_LASTRUN_STATE=" | $AWK -F= '{print $2}'`
            _iq_msg_check_status_=`$CAT $_db_check_env_file_ | $GREP "iqmsg_check_LASTRUN_STATE=" | $AWK -F= '{print $2}'`

            log_msg -t -s "INFO : Checking Drop leaks."  -l  ${LOG_FILE}
            $CAT $_db_check_env_file_ >> ${LOG_FILE}
 
            # Check for any failures 
            if [ "${_db_alloc_status_}" != "PASS" -o "${_verify_table_status_}" != "PASS" -o "${_iq_msg_check_status_}" != "PASS" ]
            then
               _is_drop_leak_=1;
               if [ "${_db_alloc_status_}" != "PASS" ]
               then
                  _drop_leaks_err_data_[$_err_index_]="DB Allocation failed."
                  _err_index_=`expr $_err_index_ + 1`
               fi

               if [ "${_verify_table_status_}" != "PASS" ]
               then
                  _drop_leaks_err_data_[$_err_index_]="Verify table failed."
                  _err_index_=`expr $_err_index_ + 1`
               fi

               if [ "${_iq_msg_check_status_}" != "PASS" ]
               then
                  _drop_leaks_err_data_[$_err_index_]="IQMSG check failed."
                  _err_index_=`expr $_err_index_ + 1`
               fi

               if [ ${_is_drop_leak_} -ne 0 ]
               then
                  _err_index_=`expr $_err_index_ - 1`
                  log_msg -t -s "FAILED : Following checks failed during DB dropleak check : " -l  ${LOG_FILE}

                  while [ ${_err_index_} -ge 0 ]
                  do
                     log_msg -s "${_drop_leaks_err_data_[$_err_index_]}" -l  ${LOG_FILE}
                     _err_index_=`expr $_err_index_ - 1`
                  done
               fi
               _ret_code_=${DROPLEAK_FAILED}
            else
               log_msg -t -s "SUCCESS : No issues found in database check." -l  ${LOG_FILE}
               _ret_code_=${SUCCESS}
            fi
         fi
      else
         # We are here because "trigger_dbcheck.bsh" script is not executed as a part of cronjob
         log_msg -t -s "NO_RUN : Dropleak check not executed yet."
         _ret_code_=${DROPLEAK_NOT_EXEC_FAILED}
      fi
      log_msg -t -s "INFO : For more details please check logs in directory : ${_drop_leak_log_dir_}" >> ${LOG_FILE}
   else
      # We are here because current system is running below ENIQ 16B release
      log_msg -t -s "SUCCESS : Current system is running below 16B. Please run the check manually." -l  ${LOG_FILE}
      _ret_code_=${SYSTEM_BELOW_16B}
   fi
   log_msg -t -s "INFO : Log location : ${LOG_FILE}"
   return ${_ret_code_}
}

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************

# Check the current user as root
check_user "root"; _ret_code_=$?
if [ "$_ret_code_" -ne ${SUCCESS} ]
then
   log_msg -t -s "FAILED : You need to be a root user to execute this script" -l ${LOG_FILE}
   _ret_code_=${ROOT_USER_FAILED}
   exit ${_ret_code_}
fi

# Set up environment variables for script.
setup_env

# Create log file
create_log_file

# Check dropleaks in database
log_msg -t -s "INFO : Checking drop leaks : BEGIN" -l ${LOG_FILE}
check_drop_leaks; rCode=$?
log_msg -t -s "INFO : Checking drop leaks : END, RC:$rCode" -l ${LOG_FILE}
exit ${rCode}
