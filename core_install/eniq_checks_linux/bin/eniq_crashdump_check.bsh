#!/usr/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2018 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : eniq_crashdump_check.bsh
# Date    : 19/12/2018
# Revision: \main\4
# Purpose : Script will check the crash dumps.
#
# Usage   : eniq_crashdump_check.bsh 
#
# Exit Values:
#  0   : SUCCESS
#  3   : NO RUN  : Healthcheck Aborted
#  244 : WARNING : Crash Dump reported.
#
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************

AWK="/usr/bin/awk"
CAT="/usr/bin/cat"
SU="/usr/bin/su"
CUT="/usr/bin/cut"
DATE="/usr/bin/date"
ECHO="/usr/bin/echo"
FIND="/usr/bin/find"
ID="/usr/bin/id"
TEE="/usr/bin/tee"
GREP="/usr/bin/grep"
XARGS="/usr/bin/xargs"
WC="/usr/bin/wc"
CD="cd"
LS="/usr/bin/ls"
SED="/usr/bin/sed"

#### RETURN CODE ENUM's ####
SUCCESS=0
FAILED=1
WARNING=2
NORUN=3
ROOT_USER_FAILED=71
CRASH_DUMP_WARNING=244

### Function: abort_script
#
#   This will be called if the script is aborted through an error
#   encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program
# Return Values:
#       none
#

abort_script()
{
   _err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

   if [ "$1" ]; then
      _err_msg_="${_err_time_} - $1"
   else
      _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
   fi

   if [ "${LOG_FILE}" ]; then
      $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOG_FILE} 
   else
      $ECHO "\nERROR : ${_err_msg_}\n"
   fi
   exit 3
}

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
   if [ ! "${ENIQ_BASE_DIR}" ]; then
       ENIQ_BASE_DIR=/eniq
   fi

   # Main Directory for the Core Installation SW
   ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

   # Installation config directory
   ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

   # Precheck logs directory
   ENIQ_PRECHECK_LOG_DIR=${ENIQ_BASE_DIR}/local_logs

   # Installation lib directory
   ENIQ_LIB_DIR=${ENIQ_INST_DIR}/core_install/lib/

   # Common function directory
   COMMON_FUNCS_LIB=${ENIQ_LIB_DIR}/common_functions.lib

   # Installed server type path
   INSTALLED_SERVER_TYPE=${ENIQ_CONF_DIR}/installed_server_type

   # Ericsson config file path
   ERICSSON_USE_CONFIG=${ENIQ_CONF_DIR}/ericsson_use_config

    # Stats_checks config file
   STATS_CHECK_CONFIG=${ENIQ_INST_DIR}/core_install/eniq_checks/config/stats_config.cfg

   # Logfile path
   LOG_FILE=${ENIQ_PRECHECK_LOG_DIR}/precheck_crash_dump.log

   # Return code declaration
   RET_CODE=0

   # Imports the common library functions
   if [ ! -f "${COMMON_FUNCS_LIB}" ]; then
      _err_msg_="${COMMON_FUNCS_LIB} missing, this is required for this script, exiting!!!!"
      abort_script "${_err_msg_}"
   fi

   . ${COMMON_FUNCS_LIB}

   if [ $? -ne 0 ]; then
      _err_msg_="Importing functions of ${COMMON_FUNCS_LIB} failed, exiting!!!!"
      abort_script "${_err_msg_}"
   fi
}

#### Function: create_log_file ######
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       none
# Return Values:
#       none
#

create_log_file()
{
   $ECHO "" > ${LOG_FILE}  
}

### Function: check_user ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
#
check_user()
{
   local _check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

   if [ "$_check_id_" != "$1" ]; then
      _err_msg_="You must be $1 to execute this script."
      abort_script "$_err_msg_"
   fi
}

#### Function : check_crash_dump #####
#
# Arguments:
#           None
# Return values:
#  0   : SUCCESS
#  244 : WARNING : Crash Dump reported.
##

check_crash_dump()
{
   _dir_name_=""
   _file_exists_=0
   _ret_code_=${SUCCESS} 
   _is_file_valid_=0

   # Get the crash dump log dump directory
   _dir_name_=`$CAT /etc/kdump.conf | $GREP "path /" | $AWK '{print $2}'` 
   _pwd_old_dir_=`pwd`   
   $CD ${_dir_name_}   
   log_msg -t -s "INFO : Checking if any crash dump files are present in directory : ${_dir_name_}" -l ${LOG_FILE}
   for _coredump_file_ in `$LS ${_dir_name_}` ;do
		$LS -l ${_dir_name_}/${_coredump_file_} | $GREP -w 'vmcore$' | $TEE -a ${LOG_FILE} >> /dev/null
   done

   # Check if any crash dump file exist 
   _file_exists_=`$LS ${_dir_name_} | $XARGS $LS | $GREP -w '^vmcore$' | $WC -l `

   if [ "$_file_exists_" -eq 0 ]
   then
      log_msg -t -s "SUCCESS : No crash dump instance reported" -l ${LOG_FILE}
      _ret_code_=${SUCCESS}
   else
      $CD ${_dir_name_}
      # Check if the file existence is less then 24hrs
      _is_file_valid_=`$FIND */*  \( ! -name . -prune \) \( -type f -o -type l \) -mtime -1  | $GREP -w 'vmcore$' | $WC -l | $SED -e 's/ //g'`
      if [ ${_is_file_valid_} -ne 0 ]
      then
         log_msg -t -s "WARNING : Found ${_is_file_valid_} crash dump files" -l ${LOG_FILE}
         _ret_code_=${CRASH_DUMP_WARNING}
      else
         log_msg -t -s "SUCCESS : No crash dump instance reported" -l ${LOG_FILE}
         _ret_code_=${SUCCESS}
      fi
    fi
	$CD ${_pwd_old_dir_}
   log_msg -t -s "INFO : Log location : ${LOG_FILE}"
   return ${_ret_code_}
}

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************

# Check the current user as root
check_user "root"; _ret_code_=$?
if [ "$_ret_code_" -ne ${SUCCESS} ]
then
   log_msg -t -s "FAILED : You need to be a root user to execute this script" -l ${LOG_FILE}
   _ret_code_=${ROOT_USER_FAILED}
   exit ${_ret_code_}
fi

# Set up environment variables for script.
setup_env

# Create log file
create_log_file

# Check crash dump
log_msg -t -s "INFO : Check crash dump : BEGIN" -l ${LOG_FILE}
check_crash_dump; rCode=$?
log_msg -t -s "INFO : Check crash dump : END, RC:$rCode" -l ${LOG_FILE}
exit ${rCode}