#!/usr/bin/bash
#********************************************************************
# Ericsson Radio Systems AB SCRIPT
#********************************************************************
#
# (c) Ericsson Radio Systems AB 2019 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# in the agreement/contract under which the program(s) have been
# supplied.
#
#********************************************************************
# Name     : inode.bsh
# Date     : 01/05/2019
# Revision : \main\3
# Purpose  : This script is to check the free inodes available
# Usage    : inode.bsh
# Exit Values:
#    0   : Success
#    116 : Fail
#    216 : Warning
#
#********************************************************************
#
#       Command Section
#
#********************************************************************
AWK=/usr/bin/awk
DATE=/usr/bin/date
DF=/usr/bin/df
ECHO=/usr/bin/echo
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
RM=/usr/bin/rm
TAIL=/usr/bin/tail
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch


# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************

# Default user
DEFAULT_USER=root


# ********************************************************************
#
#   Functions
#
# ********************************************************************

### Function: abort_script ###
#
#   This function is called if the script is aborted with an error
#   signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
else
    $ECHO "\nERROR : ${_err_msg_}\n"
fi
cleanup
exit 1
}


### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "${_err_msg_}"
fi
}


### Function: cleanup ###
#
# Cleanup of temporary directory
#
# Arguments:
#   none
# Return Values:
#   none
cleanup()
{
if [ -f "$LOGFILE" ] ;then
    $ECHO "Cleaning up the temporary directory" >> $LOGFILE
fi
$RM -rf ${TEM_DIR}
}


### Function: inode_free ###
#
#   Insert a stage header/footer message
#
# Arguments:
#   $1 : Upper Threshold
#   $2 : Lower Threshold
# Return Values:
#   none
inode_free(){
_threshold_="$1"
_lower_threshold_="$2"

log_msg -t -s "Checking for Inodes usage percentage for root( / )." -l $LOGFILE

_iused_=`$DF -i / | $AWK {'print $5'} | tail -1 | $AWK -F"%" {'print $1'}`
if [ $? -ne 0 ]; then
    _err_msg_="Unable to obtain inode used percentage."
    abort_script "${_err_msg_}"
fi

log_msg -t -s "Inodes Used:${_iused_}%" -l $LOGFILE

if [ "${_iused_}" -ge "${_threshold_}" ] ;then
   log_msg -t -s "Inodes used are greater than ${_threshold_}%.\n" -l $LOGFILE
   log_msg -s "-------------------------------------------------------------" -l $LOGFILE
   log_msg -s "ERROR:INODES USED EXCEEDS ${_threshold_}%" -l $LOGFILE
   log_msg -s "-------------------------------------------------------------" -l $LOGFILE
   cleanup
   exit 116
elif [ "${_iused_}" -ge "${_lower_threshold_}" ] ; then
   log_msg -t -s "Inodes used are greater than ${_lower_threshold_}% and less than ${_threshold_}%.\n" -l $LOGFILE
   log_msg -s "-------------------------------------------------------------" -l $LOGFILE
   log_msg -s "WARN:INODES USED EXCEEDS ${_lower_threshold_}%" -l $LOGFILE
   log_msg -s "-------------------------------------------------------------" -l $LOGFILE
   cleanup
   exit 216
elif [ "${_iused_}" -lt "${_lower_threshold_}" ] ;then
   log_msg -t -s "Inodes used ${_iused_}% is less than Lower Threshold ${_lower_threshold_}%.\n" -l $LOGFILE
   log_msg -s "-------------------------------------------------------------" -l $LOGFILE
   log_msg -s "INFO:INODES USED IS WITHIN THRESHOLD." -l $LOGFILE
   log_msg -s "-------------------------------------------------------------" -l $LOGFILE
   cleanup
   exit 0
fi
}

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
# ENIQ Base Directory
ENIQ_BASE_DIR=/eniq

# ENIQ LIB Directory
LIB_DIR=/lib

# ENIQ Core Installation Directory
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# ENIQ Core Installation SW
ENIQ_CORE_INST_DIR=${ENIQ_INST_DIR}/core_install



# Source the common functions
if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib not found"
    abort_script "${_err_msg_}"
fi

if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib not found"
    abort_script "${_err_msg_}"
fi

if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib not found"
    abort_script "${_err_msg_}"
fi

}


# ********************************************************************
#
#   Main body of program
#
# ********************************************************************

# Timestamp
TIMESTAMP=`$DATE '+%d-%m-%y_%H.%M.%S'`


# Check that the effective id of the user is root
check_id $DEFAULT_USER


# Set up environment variables for script.
setup_env

# Log file
LOGFILE="/var/tmp/Precheck/logs/inodes/inodes_free.log"
if [ ! -d "/var/tmp/Precheck/logs/inodes" ]; then
   $MKDIR -p /var/tmp/Precheck/logs/inodes
   $TOUCH $LOGFILE
else
   if [ -e "${LOGFILE}" ]; then
        $RM -rf $LOGFILE
   fi
   $TOUCH $LOGFILE
fi


# Create a temporary Directory
TEM_DIR=/tmp/inodes.$$.$$
$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory $TEM_DIR"
    abort_script "${_err_msg_}"
fi

# Define Upper and lower Threshold values
_threshold_=95
_lower_threshold_=85

# Check INODES used
inode_free ${_threshold_} ${_lower_threshold_}
