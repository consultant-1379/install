#!/usr/bin/bash
#********************************************************************
# Ericsson Radio Systems AB SCRIPT
#********************************************************************
#
# (c) Ericsson Radio Systems AB 2019 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# in the agreement/contract under which the program(s) have been
# supplied.
#
#********************************************************************
# Name     : license.bsh
# Date     : 15/09/2022
# Revision : \main\7
# Purpose  : This script is to check if Starter License is valid.
#
# Usage    : license.bsh
# Exit Values:
#    0   : Success : Starter License is applied and valid.
#    119 : Failure : Starter License is not applied.
#    120 : Failure : Starter License is not valid.
#    79  : Failure : Unable to Switch to dcuser.
#    80  : Failure : Connection to the license manager failed.
#    81  : Failure : Unable to retrieve the License information.
#********************************************************************
#
#       Command Section
#
#********************************************************************
AWK=/usr/bin/awk
CAT=/usr/bin/cat
DATE=/usr/bin/date
ECHO='/usr/bin/echo -e'
GREP=/usr/bin/grep
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
RM=/usr/bin/rm
SU=/usr/bin/su
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch

# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************

# Default user
DEFAULT_USER=root

# ********************************************************************
#
#   Functions
#
# ********************************************************************

### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO "\nERROR : ${_err_msg_}" | $TEE -a ${LOGFILE}
else
    $ECHO "\nERROR : ${_err_msg_}"
fi
cleanup
exit 3
}


### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "${_err_msg_}"
fi
}


### Function: cleanup ###
#
# Cleanup of temporary directory
#
# Arguments:
#   none
# Return Values:
#   none
cleanup()
{
log_msg -q -t -s "Cleaning up the temporary directory" -l ${LOGFILE}
$RM -rf ${TEM_DIR}
log_msg  -q -t -s "Successfully completed the cleanup" -l ${LOGFILE}
}


### Function: is_valid ###
#
# Checks the validity of a License
#
# Arguments:
#   $1=License CXC Number
# Return Values:
#   none

is_valid(){
log_msg -t -s "Checking if License is applied for Starter License:$1."  -l $LOGFILE
$SU - dcuser -c "licmgr -getlicinfo" | $GREP $1 > ${TEM_DIR}/license_tmp.txt
_pipe_status0_=${PIPESTATUS[0]}
if [ "${_pipe_status0_}" != 0 ] ;then
    if [ "{_pipe_status0_}" == 1 ] ;then
        log_msg -t -s "ERROR:Unable to Switch to dcuser.Exiting from the script." -l $LOGFILE
        cleanup
        exit 79
    elif [ "${_pipe_status0_}" == 2 ] ;then
        log_msg -t -s "ERROR:Connection to the License manager failed..Exiting from the script." -l $LOGFILE
        cleanup
        exit 80
    else
        log_msg -t -s "ERROR:Could not retrieve the License information.Exiting from the script." -l $LOGFILE
        cleanup
        exit 81
    fi
fi

if [ -s ${TEM_DIR}/license_tmp.txt ] ;then
    log_msg -t -s "INFO:License $1 is applied \n" -l $LOGFILE
else
    log_msg -t -s "ERROR:License $1 is not applied \n" -l $LOGFILE
    cleanup
    exit 119
fi

log_msg -t -s "Checking License validity for Starter License:$1." -l $LOGFILE
$SU - dcuser -c "licmgr -isvalid $1" > /dev/null 2>&1
if [ "$?" == 0 ] ;then
    log_msg -t -s "INFO:License for $1 is valid" -l $LOGFILE
    cleanup
    exit 0
elif [ "$?" == 1 ] ;then
    log_msg -t -s "ERROR:License for $1 is not valid" -l $LOGFILE
    cleanup
    exit 120
fi
}

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
# ENIQ Base Directory
ENIQ_BASE_DIR=/eniq

# ENIQ LIB Directory
LIB_DIR=/lib

# ENIQ Core Installation Directory
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# ENIQ Core Installation SW
ENIQ_CORE_INST_DIR=${ENIQ_INST_DIR}/core_install

# ENIQ Log Directory
ENIQ_LOG_DIR=${ENIQ_BASE_DIR}/local_logs

# ENIQ Precheck Log Directory
ENIQ_PRECHK_LOG_DIR=${ENIQ_LOG_DIR}/precheck_logs

# ENIQ Config Directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config


# Source the common functions
if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib not found"
    abort_script "${_err_msg_}"
fi

if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib not found"
    abort_script "${_err_msg_}"
fi

if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib not found"
    abort_script "${_err_msg_}"
fi

# File containing the type of OSS installation. Eg.statistics
INST_TYPE_FILE=${ENIQ_CONF_DIR}/ericsson_use_config
if [ ! -s "${INST_TYPE_FILE}" ]; then
    _err_msg_="ENIQ install type not defined in ${INST_TYPE_FILE}"
    abort_script "${_err_msg_}"
fi

# Read the installation type - should be "stats"
INST_TYPE=`$CAT ${INST_TYPE_FILE} | $AWK -F\= '{print $2}'`

# Templates Directory
ENIQ_TEMPL_DIR=${ENIQ_CORE_INST_DIR}/templates/${INST_TYPE}
}

# ********************************************************************
#
#   Main body of program
#
# ********************************************************************

# Ctrl+C
trap "abort_script" INT

# Check that the effective id of the user is root
check_id $DEFAULT_USER

# Set up environment variables for script.
setup_env

# Log file
LOGFILE="${ENIQ_PRECHK_LOG_DIR}/lic_val.log"
if [ ! -d "${ENIQ_PRECHK_LOG_DIR}" ]; then
    $MKDIR -p ${ENIQ_PRECHK_LOG_DIR}
    $TOUCH $LOGFILE
else
    if [ -e "${LOGFILE}" ]; then
        $RM -rf $LOGFILE
    fi
    $TOUCH $LOGFILE
fi


# Create a temporary Directory
TEM_DIR=/tmp/license.$$.$$
$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory $TEM_DIR"
    abort_script "${_err_msg_}"
fi


if [ "$INST_TYPE" == "stats" ] ;then
    _starter_lic_="CXC4012419"
    log_msg -t -s "${_starter_lic_}: Stats 19.2 Starter License." -l $LOGFILE
    is_valid ${_starter_lic_}

else
    _err_msg_="ERROR:Installation Type is Not known"
    abort_script "${_err_msg_}"
fi

cleanup
