#!/usr/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2019 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : eniq_vg_check.bsh
# Date    : 27/02/2019
# Revision: E
# Purpose : Script will check vg status.
#
# Usage   : eniq_vg_check.bsh
#
# Exit Values:
#  0   : SUCCESS
#  3   : NO RUN  : Healthcheck Aborted
#  72  : FAILED  : VG's are unhealthy.
#
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************

AWK="/usr/bin/awk"
DATE="/usr/bin/date"
ECHO="/usr/bin/echo -e"
ID="/usr/bin/id"
TEE="/usr/bin/tee"
WC="/usr/bin/wc"
VGDISPLAY="/usr/sbin/vgdisplay"
VGS="/usr/sbin/vgs"

#### RETURN CODE ENUM's ####
SUCCESS=0
FAILED=1
WARNING=2
NORUN=3
ROOT_USER_FAILED=71
VG_UNHEALTHY_FAILED=72

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
   if [ ! "${ENIQ_BASE_DIR}" ]; then
       ENIQ_BASE_DIR=/eniq
   fi

   # Main Directory for the Core Installation SW
   ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

   # Installation config directory
   ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

   # Precheck logs directory
   ENIQ_PRECHECK_LOG_DIR=${ENIQ_BASE_DIR}/local_logs

   # Installation lib directory
   ENIQ_LIB_DIR=${ENIQ_INST_DIR}/core_install/lib/

   # Common function directory
   COMMON_FUNCS_LIB=${ENIQ_LIB_DIR}/common_functions.lib

   # Installed server type path
   INSTALLED_SERVER_TYPE=${ENIQ_CONF_DIR}/installed_server_type

   # Ericsson config file path
   ERICSSON_USE_CONFIG=${ENIQ_CONF_DIR}/ericsson_use_config

   # Stats_checks config file
   STATS_CHECK_CONFIG=${ENIQ_INST_DIR}/core_install/eniq_checks/config/stats_config.cfg

   # Logfile path
   LOG_FILE=${ENIQ_PRECHECK_LOG_DIR}/precheck_vg_status.log

   # Return code declaration
   RET_CODE=0

   # Imports the common library functions
   if [ ! -f "${COMMON_FUNCS_LIB}" ]; then
      _err_msg_="${COMMON_FUNCS_LIB} missing, this is required for this script, exiting!!!!"
      abort_script "${_err_msg_}"
   fi

   . ${COMMON_FUNCS_LIB}

   if [ $? -ne 0 ]; then
      _err_msg_="Importing functions of ${COMMON_FUNCS_LIB} failed, exiting!!!!"
      abort_script "${_err_msg_}"
   fi

}

### Function: abort_script
#
#   This will be called if the script is aborted through an error
#   encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program
# Return Values:
#       none
#

abort_script()
{
   _err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

   if [ "$1" ]; then
      _err_msg_="${_err_time_} - $1"
   else
      _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
   fi

   if [ "${LOG_FILE}" ]; then
      $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOG_FILE}
   else
      $ECHO "\nERROR : ${_err_msg_}\n"
   fi
   exit 3
}


#### Function: create_log_file ######
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       none
# Return Values:
#       none
#

create_log_file()
{
   $ECHO "" > ${LOG_FILE}
}

### Function: check_user ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
#
check_user()
{
   local _check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

   if [ "$_check_id_" != "$1" ]; then
      _err_msg_="You must be $1 to execute this script."
      abort_script "$_err_msg_"
   fi
}

#### Function : check_vg_status #####
#
# Arguments:
#           None
# Return values:
#  0   : SUCCESS
#  72  : FAILED : vg status unhealthy
##

check_vg_status()
{
   declare -a _vg_data_list_;
   _vg_count_=0;
   _vg_health_status_="r/w";
   _vg_index_=0;
   _is_faulty_=0;
   _ret_code_=${SUCCESS}

   _vg_count_=`${VGS} | ${WC} -l`

   log_msg -t -s  "INFO : Checking vg status." -l ${LOG_FILE}
   ${VGS} >> ${LOG_FILE}
   log_msg -q -t -s "INFO : Detailed Status :\n" -l ${LOG_FILE}
   ${VGDISPLAY} >> ${LOG_FILE}

   # Get the list of all available VG on the server
     _vg_list_=`${VGS} -o name --noheading`

   # Check the health status of all fetched VG's
   for _vg_ in $_vg_list_
   do
      _vg_health_status_=`${VGDISPLAY} ${_vg_} -c  | $AWK -F":" '{print $2}' `
      if [ "${_vg_health_status_}" != "r/w" ]
      then
        # We are here because any of the vg is unhealthy, set the faulty flag
        _is_faulty_=1;
        _vg_data_list_[$_vg_index_]="Pool '$_vg_'\t is not having premission r/w, Current Status : ${_vg_health_status_}"
        _vg_index_=`expr $_vg_index_ + 1`
      fi
   done

   # Check if the faulty flag is set or not
   if [ $_is_faulty_ -eq 0 ]
   then
      log_msg -t -s "SUCCESS : All VG's are healthy." -l ${LOG_FILE}
      _ret_code_=${SUCCESS}
   else
      _vg_index_=`expr $_vg_index_ - 1`
      log_msg -t -s "FAILED : Below VG's are not healthy : " -l ${LOG_FILE}
      while [ $_vg_index_ -ge 0 ]
      do
         log_msg -s "${_vg_data_list_[$_vg_index_]}" -l ${LOG_FILE}
         _vg_index_=`expr $_vg_index_ - 1`
      done
      _ret_code_=${VG_UNHEALTHY_FAILED}
   fi

   log_msg -t -s "INFO : Log location : ${LOG_FILE}"
   return ${_ret_code_}
}

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************

# Check the current user as root
check_user "root"; _ret_code_=$?
if [ "$_ret_code_" -ne ${SUCCESS} ]
then
   log_msg -t -s "FAILED : You need to be a root user to execute this script" -l ${LOG_FILE}
   _ret_code_=${ROOT_USER_FAILED}
   exit ${_ret_code_}
fi

# Set up environment variables for script.
setup_env

# Create log file
create_log_file

# Check vg status
log_msg -t -s "INFO : Check vg status : BEGIN" -l ${LOG_FILE}
check_vg_status; rCode=$?
log_msg -t -s "INFO : Check vg status : END, RC:$rCode" -l ${LOG_FILE}
exit ${rCode}

