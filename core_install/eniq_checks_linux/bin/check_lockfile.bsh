#!/bin/bash
# *********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# *********************************************************************
# (c) Ericsson Radio Systems AB 2018 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# *********************************************************************
# Name		: check_lockfile.bsh
# Date		: 15/09/2022
# Revision	: D
# Purpose	: Script to check if lockfile is present
# Usage		: ./check_lockfile.bsh    ( to check install lockfile(s) in ENIQ Stats )
#	          ./check_lockfile.bsh -i   ( to check presence of install lockfile(s) in ENIQ Stats )
# Exit Values:
#		0	: Success :
#		3	: FAILURE :Precheck Aborted
#		83	: FAILURE :Config file unavailable
#		106	: FAILURE :Lockfile check failed
#		112	: FAILURE :Directory path not found
#********************************************************************
#
#	Command Section
#
#********************************************************************
AWK=/usr/bin/awk
CAT=/usr/bin/cat
DATE=/usr/bin/date
ECHO="/usr/bin/echo -e"
GREP=/usr/bin/grep
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
RM=/usr/bin/rm
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
#********************************************************************
#                                                                   *
#       Functions                                                   *
#                                                                   *
#********************************************************************

### Function: abort_script
#
# This will be called if the script is aborted through an error
# encountered during runtime
#
# Arguments:
#		$1 - Error message from part of program (Not always used)
# Return Values:
#		none
#
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
	_err_msg_="${_err_time_} - $1"
else
	_err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi
if [ "${LOGFILE}" ]; then
	$ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
else
	$ECHO "\nERROR : ${_err_msg_}\n"
fi
exit 3
}

### Function: check_id ###
#
# Check that the effective id of the user is correct
# If not print error msg and exit.
#
# Arguments:
#		$1 : User ID name
# Return Values:
#		none
#
check_id()
{
local _check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

if [ "$_check_id_" != "$1" ]; then
	_err_msg_="You must be $1 to execute this script."
	abort_script "$_err_msg_"
fi
}

### Function: check_create_logfile ###
#
# Checks presence/creation of Logfile
#
# Arguments:
#		none
# Return Values:
#		none
#
check_create_logfile()
{

if [ -s $LOGFILE ]; then
	$RM -rf $LOGFILE
	if [ -f $LOGFILE ]; then
		_err_msg_="Warning : Could not remove older ${LOGFILE}"
		abort_script "$_err_msg_"
	fi
fi

if [ ! -d  ${ENIQ_PRECHECK_LOG_DIR} ]; then
	${MKDIR} -p ${ENIQ_PRECHECK_LOG_DIR}
fi

$TOUCH -a ${LOGFILE}
if [ $? -ne 0 ]; then
	_err_msg_="Could not write to file ${LOGFILE}"
	abort_script "$_err_msg_"
fi

$CHMOD 640 ${LOGFILE}
if [ $? -ne 0 ]; then
	_err_msg_="Could not change the permissions of the ${LOGFILE}"
	abort_script "$_err_msg_"
fi
}

### Function: check_lockfile ###
#
# Checks if lockfile file is present or not
#
# Arguments:
#		None
#Return values:
#		83: FAILURE : Config file unavailable  
# None
#
check_lockfile()
{
if [ -f ${SCRIPT_PATH} ]; then
$CAT $SCRIPT_PATH | $GREP -v "#"| $GREP CHECK_LOCKFILE >/tmp/config_check_lockfile
while read line
do
	LOCKFILE_DIR=`$ECHO ${line} | $AWK -F":" '{print $2}'`
	LOCKFILE_NAME=`$ECHO ${line} | $AWK -F":" '{print $3}'`

	if [ -d ${LOCKFILE_DIR} ]; then
		if [ -f ${LOCKFILE_DIR}/${LOCKFILE_NAME} ]; then
			log_msg -q -s "ERROR: Lock File ${LOCKFILE_NAME} is present at ${LOCKFILE_DIR}" -l ${LOGFILE}
			LOCK_ERROR=1 
		else
			log_msg -q -s "INFO: Lock File ${LOCKFILE_NAME} not found at ${LOCKFILE_DIR}" -l ${LOGFILE}
			LOCK_ERROR=0 
		fi
	else
		log_msg -q -s "ERROR: Directory path ${LOCKFILE_DIR} for lockfile is not present" -l ${LOGFILE}
		LOCK_DIRECTORY=1 
	fi
	continue
done < /tmp/config_check_lockfile
$RM -rf /tmp/config_check_lockfile
else
	log_msg -s "WARNING: ${SCRIPT_PATH} file missing, this is required for this script, exiting!!!!" -l ${LOGFILE}
	exit 83
fi
}

### Function: return_lockfile_result ###
#
# returns success or failure  for check_lockfile
#
# Arguments:
#	none
# Return Values:
#	0	: Lockfile check successful
#	106 : Lockfile Error
#	112 : Directory path not found
#
return_lockfile_result()
{
if [ ${LOCK_ERROR} -ne 0 ]; then
	RET_CODE=106
elif [ ${LOCK_DIRECTORY} -ne 0 ]; then
	RET_CODE=112
else
	RET_CODE=0
fi
}

### Function: setup_env ###
#
# Setup path environment
# Imports the common lib files which imports common functions
#
# Arguments:
#		none
# Return Values:
#
setup_env()
{
if [ ! "${ENIQ_BASE_DIR}" ]; then
	ENIQ_BASE_DIR=/eniq
fi

#Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

#Installation lib directory
ENIQ_LIB_DIR=${ENIQ_INST_DIR}/core_install/lib

#Common function directory
COMMON_FUNCS_LIB=${ENIQ_LIB_DIR}/common_functions.lib

#ENIQ config directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

#Installation config Directory
SERVER_TYPE=${ENIQ_CONF_DIR}/installed_server_type

#Ericsson config file path
ERICSSON_USE_CONFIG=${ENIQ_CONF_DIR}/ericsson_use_config

#Stats_checks config file
STATS_CHECK_CONFIG=${ENIQ_INST_DIR}/core_install/eniq_checks/config/precheck_stats.cfg

#Precheck logs directory
ENIQ_PRECHECK_LOG_DIR=${ENIQ_BASE_DIR}/local_logs/precheck_logs

#Logfile path
LOGFILE=${ENIQ_PRECHECK_LOG_DIR}/log_lockfile.log

#Flag to check error scenario for lockfile
LOCK_ERROR=0

#Flag to check if directory is present
LOCK_DIRECTORY=0

#Return code declaration
RET_CODE=0

#Imports the common library functions
if [ -f "${COMMON_FUNCS_LIB}" ]; then
	. ${COMMON_FUNCS_LIB}
	if [ $? -ne 0 ]; then
		_err_msg_="Importing functions of ${COMMON_FUNCS_LIB} failed, exiting!!!!"
		abort_script "${_err_msg_}"
	fi
else
	_err_msg_="${COMMON_FUNCS_LIB} missing, this is required for this script, exiting!!!!"
	abort_script "${_err_msg_}"
fi
}

######### Check for stats server ##
#
# Arguments:
#		None
# Return values:
#		83 : FAILURE : Config file unavailable
#
#determining the eniq checks config file to be used based on server type
#
check_server_type()
{
if [ ! -f "${ERICSSON_USE_CONFIG}" ]; then
	log_msg -s "WARNING: ${ERICSSON_USE_CONFIG} file missing, this is required for this script, exiting!!!!" -l ${LOGFILE}
	exit 83
fi

_server_=`$CAT $ERICSSON_USE_CONFIG | $AWK -F"=" '{print $2}'`
if [[ ${_server_} == "stats" ]]; then
	SCRIPT_PATH="${STATS_CHECK_CONFIG}"
fi
}

#********************************************************************
#
#		Main body of program
#
#********************************************************************

# Default user
DEFAULT_USER=root

# Check that the effective id of the user is root
check_id $DEFAULT_USER

# Set up environment variables for script.
setup_env

# Check/Create Logfile
check_create_logfile

# Check eniq server type
check_server_type

# Check for the lockfile
case $1 in 
-i)check_lockfile
;;
*)check_lockfile
;;
esac
return_lockfile_result

log_msg -t -s "ENIQ check_lockfile check completed" -l ${LOGFILE}
log_msg -t -s "Check log $LOGFILE\n"
exit $RET_CODE
