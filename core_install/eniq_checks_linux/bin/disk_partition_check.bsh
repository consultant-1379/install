#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2022 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : disk_partition_check.bsh
# Date    : 20/02/2023
# Revision: \main\2
# Purpose : This script is to verify disks_partitioned file and update the same if executed with -u option.
#
# Usage   : disk_partition_check.bsh
# ********************************************************************
#
#   Command Section
#
# ********************************************************************

AWK=/usr/bin/awk
BASH=/usr/bin/bash
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
DATE=/usr/bin/date
ECHO='/usr/bin/echo -e'
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
MYHOSTNAME=/usr/bin/hostname
RM=/usr/bin/rm
SED=/usr/bin/sed
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch


# Name of SunOS & ENIQ ini Files
SUNOS_INI=SunOS.ini

#### RETURN CODE ENUM's ####
RACK_NOT_APPLICABLE=16
ENGINE_NOT_APPLICABLE=54

### Function: abort_script 
#                                                                     
#   This will be called if the script is aborted through an error     
#   signal sent by the kernel such as CTRL-C or if a serious          
#   error is encountered during runtime                               
#                                                                     
# Arguments:                                                          
#       $1 - Error message from part of program (Not always used)     
# Return Values:                                                      
#       none                                                          

abort_script()
{
    _err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

    if [ "$1" ]; then
        _err_msg_="${_err_time_} - $1"
    else
        _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
    fi

    if [ "${LOGFILE}" ]; then
        $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
    else
        $ECHO "\nERROR : ${_err_msg_}\n"
    fi

    $RM -rf ${TEM_DIR}
    exit 3 
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error message and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none

check_id()
{
local _check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

if [ "${_check_id_}" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}

### Function: chk_logfile ###
#
# Check Logfile
#
# Arguments:
#   none
# Return Values:
#   none

chk_logfile()
{

if [ ! -d ${ENIQ_PRECHECK_LOG_DIR}  ]
    then
    $MKDIR -p ${ENIQ_PRECHECK_LOG_DIR}
    if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory : ${ENIQ_PRECHECK_LOG_DIR}"
    abort_script "${_err_msg_}" 
    fi
fi
 
if [ -s ${LOGFILE}  ]
    then
    $RM -rf ${LOGFILE} 
    if [ -s ${LOGFILE}  ]
    then
        _err_msg_="Warning : Could not remove older ${LOGFILE}"
        abort_script "$_err_msg_"
    fi
fi

 
$TOUCH ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not write to file ${LOGFILE}"
    abort_script "$_err_msg_"
fi

$ECHO "Changing permission of the ${LOGFILE} to 644" | $TEE -a ${LOGFILE}
$CHMOD 644 ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not change the permissions of the ${LOGFILE} file to 644"
    abort_script "$_err_msg_"
fi
}


### Function: setup_env ###
#
# Setup up path environment
# Imports the common lib files which imports common functions 
#
# Arguments:
#   none
# Return Values:
#   none

setup_env()
{
if [ ! "${ENIQ_BASE_DIR}" ]; then
    ENIQ_BASE_DIR=/eniq
fi

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# ENIQ LIB Directory
LIB_DIR=/lib

# Local logs directory
ENIQ_PRECHECK_LOG_DIR=${ENIQ_BASE_DIR}/local_logs/precheck_logs

# Eniq core install directory
ENIQ_CORE_INST_DIR=${ENIQ_INST_DIR}/core_install

# Eniq core install config directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config


# Install Serevr Type 
SERVER_TYPE=`${CAT} ${ENIQ_CONF_DIR}/installed_server_type`

# Source the common functions
if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_functions.lib not found"
    abort_script "${_err_msg_}"
fi

if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib not found"
    abort_script "${_err_msg_}"
fi

if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib not found"
    abort_script "${_err_msg_}"
fi

# Storage Type
STORAGE_TYPE=`iniget STOR_TYPE -f ${ENIQ_BASE_DIR}/installation/config/${SUNOS_INI} -v STORAGE_TYPE`
if [ ! "${STORAGE_TYPE}" ]; then
    _err_msg_="Could not read STORAGE_TYPE param "
    abort_script "${_err_msg_}"
fi

HNAME=`${MYHOSTNAME}`
}

### Function: verify_disk_partition ###
 #
 # Precheck to verify mpath values
 #
 # Arguments:
 #   none
 # Return Values:
 #   none
verify_disk_partition()
{
#Create a temporary file
_tmp_file_=/tmp/verify_disk_precheck.txt
$RM -rf ${_tmp_file_}
$TOUCH $_tmp_file_
_flag_=0

if [ $? -ne 0 ]; then
    _err_msg_="Could not create file ${_tmp_file_}"
    abort_script "${_err_msg_}"
fi

disk_file=$ENIQ_CONF_DIR/disks_partitioned
if [ ! -f ${disk_file} ]; then
    _err_msg_="Could not get ${disk_file}"
    abort_script "${_err_msg_}"
fi

# Read the storage type and store it in file
if [ ! -f ${ENIQ_CONF_DIR}/sym_links.ini ]; then
    _err_msg_="Could not find ${ENIQ_CONF_DIR}/sym_links.ini"
    abort_script "${_err_msg_}"
fi

if [ ! -f ${ENIQ_CONF_DIR}/SunOS.ini ]; then
    _err_msg_="Could not find ${ENIQ_CONF_DIR}/SunOS.ini"
    abort_script "${_err_msg_}"
fi
if [  "${SERVER_TYPE}" == "stats_engine" ]; then
    STATS_POOL=`iniget SunOS_FS_POOL_1 -f $ENIQ_CONF_DIR/SunOS.ini -v disk_layout `
    if [ ! "${STATS_POOL}" ]; then
        _err_msg_="Could not read EXT4 information"
        abort_script "${_err_msg_}"
    fi
    db_part_file="${STATS_POOL}"
    if [ ! "${db_part_file}" ]; then
        _err_msg_="Could not read required mpath values"
        abort_script "${_err_msg_}"
    fi
else
    MAIN_DB=`iniget DB_DISK_ALLOC -f $ENIQ_CONF_DIR/sym_links.ini -v MAINDB_DISKS `
    TEMP_DB=`iniget DB_DISK_ALLOC -f $ENIQ_CONF_DIR/sym_links.ini -v TEMPDB_DISKS `
    SYS_MAIN=`iniget DB_DISK_ALLOC -f $ENIQ_CONF_DIR/sym_links.ini -v IQ_SYS_MAIN_DISKS `
    STATS_POOL=`iniget SunOS_FS_POOL_1 -f $ENIQ_CONF_DIR/SunOS.ini -v disk_layout `
    if [ ! "${MAIN_DB}" -o ! "${TEMP_DB}" -o ! "${SYS_MAIN}" -o ! "${STATS_POOL}" ]; then
        _err_msg_="Could not read EXT4 and DB LUNS information"
        abort_script "${_err_msg_}"
    fi
    db_part_file="${MAIN_DB} ${TEMP_DB} ${SYS_MAIN} ${STATS_POOL}"
    if [ ! "${db_part_file}" ]; then
        _err_msg_="Could not read required mpath values"
        abort_script "${_err_msg_}"
    fi
fi


$ECHO ${db_part_file} | $SED 's/ /\n/g' >> ${_tmp_file_}

# compare disk_partition file

for m_value in `$CAT ${_tmp_file_}`; do
     $CAT ${disk_file} | $GREP -w ${m_value} > /dev/null
        if [ $? -ne 0 ]; then
            log_msg -s "Lun ID ${m_value} does not match" -l ${LOGFILE}
            _flag_=1
        else
            log_msg -s "Lun ID ${m_value} match complete" -l ${LOGFILE}
        fi
done

if [ ${_flag_} -ne 0 ]; then
     RET_CODE=140
     log_msg -s "Db disks in /eniq/installation/config/sym_links.ini file and EXT4 disk in /eniq/installation/config/SunOS.ini file are not present in /eniq/installation/config/disks_partitioned file" -l ${LOGFILE}
     log_msg -s "Update /eniq/installation/config/disks_partitioned file with correct Db and EXT4 disks" -l ${LOGFILE}
else
     RET_CODE=0
fi

 }

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************
#

# Default user
DEFAULT_USER=root

# Check that the effective id of the user is root
check_id ${DEFAULT_USER}

while getopts "u" arg;
do
        case $arg in
                u)      UPDATE="YES"
                        ;;
        esac
done
shift 1

# Set up environment variables for script.
setup_env

# Logfile path
LOGFILE=${ENIQ_PRECHECK_LOG_DIR}/disk_partition_check.log

# Check Logfile
chk_logfile

#Create a temporary Directory
TEM_DIR=/tmp/disk_partition_check.$$.$$

$MKDIR -p ${TEM_DIR}

if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory ${TEM_DIR}"
    abort_script "${_err_msg_}"
fi

# Check Storage type
if [ "${STORAGE_TYPE}" == "fs" ]; then
    log_msg -s "This check is not applicable for RACK servers." -l $LOGFILE
    exit $RACK_NOT_APPLICABLE
fi

#Update disk partition
if [ "${UPDATE}" == "YES" ]; then
    log_msg -t -s "Updating the disk_partitioned file with  Db and Ext4 disks on ${SERVER_TYPE} server. Check logfile ${LOGFILE} on ${HNAME}\n"
    correct_disk_partition
    disk_partition_update=$?
    if [ ${disk_partition_update} -ne 0 ];then
        _err_msg_="Could not update the disk_partitioned file"
        abort_script "$_err_msg_"
    else
        log_msg -t -s "Db and Ext4 disk update is completed on ${SERVER_TYPE} server. Check logfile ${LOGFILE} on ${HNAME}\n"
    fi

fi

#check disk partition
verify_disk_partition

log_msg -t -s "Db and Ext4 disk check is completed on ${SERVER_TYPE} server. Check logfile ${LOGFILE} on ${HNAME}\n"


$RM -rf ${TEM_DIR}
if [ -s ${TEM_DIR} ]; then
    _err_msg_="Could not remove ${TEM_DIR}"
    abort_script "$_err_msg_"
fi

exit ${RET_CODE}



