#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2019 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : chk_partition_size.bsh
# Date    : 18/08/2023
# Revision: \main\9
# Purpose : This script is to check the file partition size.
#
# Usage   : chk_partition_size.bsh
# Exit Values: 
#    0   : Success
#    100 : Fail
#    200 : Warning
# ********************************************************************
#
#   Command Section
#
# ********************************************************************

AWK=/usr/bin/awk
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CUT=/usr/bin/cut
DATE=/usr/bin/date
DF=/usr/bin/df
ECHO='/usr/bin/echo -e'
EGREP=/usr/bin/egrep
GREP=/usr/bin/grep
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
RM=/usr/bin/rm
SED=/usr/bin/sed
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch

# ********************************************************************
#                                                                    *
#   		         Functions                                   *
#                                                                    *
# ********************************************************************

### Function: abort_script 
#                                                                     
#   This will be called if the script is aborted through an error        
#   encountered during runtime                               
#                                                                     
# Arguments:                                                          
#       $1 - Error message from part of program (Not always used)     
# Return Values:                                                      
#       none                                                          

abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

	if [ "$1" ]; then
		_err_msg_="${_err_time_} - $1"
	else
		_err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
	fi
	if [ "${LOGFILE}" ]; then
		$ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
	else
		$ECHO "\nERROR : ${_err_msg_}\n"
	fi
	$RM -rf ${TEM_DIR}
	exit 3
}


### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
local _check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}


### Function: chk_partition_size ###
#
# Check partition size
#
# Arguments:
#       none
# Return Values:
#       0 success 100 FAIL 200 WARNING

chk_partition_size()
{
log_msg -q -l "$LOGFILE" -s "\nCurrent server type : $CURR_SERVER_TYPE\n" 

log_msg -q -t -l "$LOGFILE" -s "Checking the disk space..\n\n"

if [ $? -ne 0 ]; then
    _err_msg_="Could not get ${ENIQ_LOCATE} exiting!!!!"
    abort_script "${_err_msg_}"
fi


$TOUCH $TEM_DIR/fs_to_be_checked
if [ $? -ne 0 ]; then
    _err_msg_="Could not touch $TEM_DIR/fs_to_be_checked file"
    abort_script "${_err_msg_}"
fi

#Get filesystems list from /etc/fstab
$CAT $FSTAB | $EGREP -iv '^#|^$|swap|BIS|netanserver' | $AWK '{print $2}' > $TEM_DIR/fs_to_be_checked
if [ $? -ne 0 ]; then
    _err_msg_="Could not get filesystems from fstab file"
    abort_script "${_err_msg_}"
fi

#Get nas filesystems from nasd config file
$CAT $NASD_CONFIG | $AWK -F"::" '{print $3}' >> $TEM_DIR/fs_to_be_checked
if [ $? -ne 0 ]; then
    _err_msg_="Could not get filesystems from nasd config file"
    abort_script "${_err_msg_}"
fi

for _fs_ in `$CAT $TEM_DIR/fs_to_be_checked`; do


$DF -h ${_fs_} | $SED 1d | $AWK '{ print $5 " " $1 }'  | while read output;


do
    _capacity_=`$ECHO ${output} | $AWK '{ print $1}' | cut -d'%' -f1`
    _partition_=`$ECHO ${output} | $AWK '{ print $2 }'`

    log_msg -l "$LOGFILE" -s  "\n\nChecking the partition size of ${_partition_}\n"
    printf '%-40s \t %-40s\n' "Partition Name" "Capacity" | $TEE -a $LOGFILE
    printf '%-40s \t %-40s\n' "----------------------" "----------------------" | $TEE -a $LOGFILE
        if [ ${_storage_type_} == "fs" ]; then
            if [ ${_partition_} == "/dev/mapper/${CURR_SERVER_TYPE}_pool-dwh_main_dbspace"  -o  ${_partition_} == "/dev/mapper/${CURR_SERVER_TYPE}_pool-dwh_temp_dbspace" ] ; then         
                printf '%-40s \t %-40s\n' "${_partition_}" "${_capacity_}%"
                  continue
         #Partition size greater than 90%
            elif [[ ${_capacity_} -ge 90 ]]; then
                printf '%-40s \t %-40s\n' "${_partition_}" "${_capacity_}%"	>> $TEM_DIR/file_90 
                printf '%-40s \t %-40s\n' "${_partition_}" "${_capacity_}%" | $TEE -a $LOGFILE
                log_msg -l "$LOGFILE" -s  "FAIL : Partition size greater than 90%\n"
         #Partition size between 80 to 90%
            elif [[ ${_capacity_} -ge 80 ]]; then
                printf '%-40s \t %-40s\n' "${_partition_}" "${_capacity_}%"	>> $TEM_DIR/file_80
                printf '%-40s \t %-40s\n' "${_partition_}" "${_capacity_}%" | $TEE -a $LOGFILE
                log_msg -l "$LOGFILE" -s  "\nWARNING : Partition size between 80% to 90%\n"
            else
                printf '%-40s \t %-40s\n' "${_partition_}" "${_capacity_}%"	| $TEE -a $LOGFILE
                log_msg -l "$LOGFILE" -s  "\nSUCCESS : Partition size within limit.\n"
            fi
        else 
            if [[ ${_capacity_} -ge 90 ]]; then
                printf '%-40s \t %-40s\n' "${_partition_}" "${_capacity_}%"     >> $TEM_DIR/file_90
                printf '%-40s \t %-40s\n' "${_partition_}" "${_capacity_}%" | $TEE -a $LOGFILE
                log_msg -l "$LOGFILE" -s  "FAIL : Partition size greater than 90%\n"
             #Partition size between 80 to 90%
            elif [[ ${_capacity_} -ge 80 ]]; then
                printf '%-40s \t %-40s\n' "${_partition_}" "${_capacity_}%"     >> $TEM_DIR/file_80
                printf '%-40s \t %-40s\n' "${_partition_}" "${_capacity_}%" | $TEE -a $LOGFILE
                log_msg -l "$LOGFILE" -s  "\nWARNING : Partition size between 80% to 90%\n"
            else
                printf '%-40s \t %-40s\n' "${_partition_}" "${_capacity_}%"     | $TEE -a $LOGFILE
                log_msg -l "$LOGFILE" -s  "\nSUCCESS : Partition size within limit.\n"
            fi
        fi
  done
done

log_msg -l "$LOGFILE" -s "--------------------------------------------------------------------"
log_msg -l "$LOGFILE" -s "                            SUMMARY"
log_msg -l "$LOGFILE" -s "--------------------------------------------------------------------"

#Checking the partition size
if [ -s "$TEM_DIR/file_90" ]; then 
	log_msg -t -l "$LOGFILE" -s "ERROR : Partitions running out of space" 
	log_msg -l "$LOGFILE" -s "\nList of partitions and respective capacities\n\n`$CAT $TEM_DIR/file_90`\n"
	RET_CODE=100 

elif [ -s "$TEM_DIR/file_80" ]; then
	log_msg -t -l "$LOGFILE" -s "WARNING : Partitions within 80% - 90% capacity."  
	log_msg -l "$LOGFILE" -s "\nList of partitions and respective capacities:\n\n`$CAT $TEM_DIR/file_80`\n"
	RET_CODE=200 

else 
	log_msg -l "$LOGFILE" -s "\nSUCCESS : All partitions within size limit.\n"
fi
log_msg -l "$LOGFILE" -s "--------------------------------------------------------------------\n\n"
}

### Function: chk_logfile ###
#
# Check Logfile
#
# Arguments:
#   none
# Return Values:
#   none

chk_logfile()
{

if [ ! -d $ENIQ_PRECHECK_LOG_DIR  ]; then
	$MKDIR -p $ENIQ_PRECHECK_LOG_DIR
	if [ $? -ne 0 ]; then
		_err_msg_="Could not create directory `$ENIQ_PRECHECK_LOG_DIR`"
		abort_script "${_err_msg_}" 
	fi
fi
 
 if [ -s $LOGFILE  ]
    then
    $RM -rf $LOGFILE 
	if [ -s $LOGFILE  ]
	then
	    _err_msg_="Warning : Could not remove older ${LOGFILE}"
        abort_script "$_err_msg_"
	fi	
 fi
 
$TOUCH -a ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not write to file ${LOGFILE}"
    abort_script "${_err_msg_}" 
fi

$ECHO "Changing permission of the ${LOGFILE} to 644" | $TEE -a ${LOGFILE}
$CHMOD 644 ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not change the permissions of the ${LOGFILE} file to 644"
    abort_script "$_err_msg_"
fi
}

### Function: setup_env ###
#
# Setup up path environment
# Imports the common lib files which imports common functions 
#
# Arguments:
#   none
# Return Values:
#   none

setup_env()
{

if [ ! "${ENIQ_BASE_DIR}" ]; then
    ENIQ_BASE_DIR=/eniq
fi

#SAN File
SAN_DETAILS=/eniq/installation/config/san_details

#FSTAB file
FSTAB=/etc/fstab

#NASD_CONFIG file
NASD_CONFIG=/eniq/smf/nasd/nasd_config


#Storage type
_storage_type_=`$CAT ${SAN_DETAILS} | $GREP -w STORAGE_TYPE | $AWK -F"=" '{print $2}'`

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

ENIQ_CONF_DIR=/eniq/installation/config

# Installation config directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

ENIQ_LOCATE=/eniq/installation/config/eniq_sw_locate



#Installation lib directory
ENIQ_LIB_DIR=${ENIQ_INST_DIR}/core_install/lib/

# Local logs directory
ENIQ_PRECHECK_LOG_DIR=${ENIQ_BASE_DIR}/local_logs/precheck_logs

#Common function directory
COMMON_FUNCS_LIB=${ENIQ_LIB_DIR}/common_functions.lib

#Imports the common library functions
if [ -f "${COMMON_FUNCS_LIB}" ]; then
	. ${COMMON_FUNCS_LIB}
	if [ $? -ne 0 ]; then
		_err_msg_="Importing functions of ${COMMON_FUNCS_LIB} failed, exiting!!!!"
		abort_script "${_err_msg_}"
	fi
else
	_err_msg_="${COMMON_FUNCS_LIB} missing, this is required for this script, exiting!!!!"
	abort_script "${_err_msg_}"
fi

#Get the current server type	  
CURR_SERVER_TYPE=`$CAT /eniq/installation/config/installed_server_type`

if [ ! "${CURR_SERVER_TYPE}" ]; then
	_err_msg_="Could not read $ENIQ_CONF_DIR/installed_server_type"
	abort_script "${_err_msg_}" 
fi

}

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************
#

# Default user
DEFAULT_USER=root

# Check that the effective id of the user is root
check_id $DEFAULT_USER

# Set up environment variables for script.
setup_env

# Logfile path
LOGFILE=${ENIQ_PRECHECK_LOG_DIR}/log_partitionsize.log

#Return code declaration
RET_CODE=0 
 
# Check Logfile
chk_logfile

#Create a temporary Directory
TEM_DIR=/tmp/diskspace.$$.$$

$MKDIR -p ${TEM_DIR}

if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory ${TEM_DIR}"
    abort_script "${_err_msg_}"
fi
	
#Check for the partition size 
chk_partition_size
$ECHO "Partition size check completed. Check log $LOGFILE\n"
$RM -rf ${TEM_DIR}
if [ -s ${TEM_DIR} ]; then
    _err_msg_="Could not remove ${TEM_DIR}"
    abort_script "$_err_msg_"
fi
exit $RET_CODE



