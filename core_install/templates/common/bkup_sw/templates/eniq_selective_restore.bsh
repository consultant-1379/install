#!/usr/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2020 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : eniq_selective_restore.bsh
# Date    : 14/08/2020
# Revision: /main/7
# Purpose : Selective Restore of ENIQ files in case of Rack Migration
##
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
BASH=/usr/bin/bash
BC=/usr/bin/bc
CAT=/usr/bin/cat
CHOWN=/usr/bin/chown
CLEAR=/usr/bin/clear
CP=/usr/bin/cp
CUT=/usr/bin/cut
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO='/usr/bin/echo -e'
EGREP=/usr/bin/egrep
EXPECT=/usr/bin/expect
EXPR=/usr/bin/expr
GREP=/usr/bin/grep
GTAR=/usr/sfw/bin/gtar
GTAR_LINUX=/usr/bin/gtar
GZCAT=/usr/bin/gzcat
GZIP=/usr/bin/gzip
ID=/usr/bin/id
INIT=/usr/sbin/init
IOSTAT=/usr/bin/iostat
LS=/usr/bin/ls
MKDIR=/usr/bin/mkdir
MULTIPATH=/usr/sbin/multipath
MV=/usr/bin/mv
NSLOOKUP=/usr/bin/nslookup
PING=/usr/bin/ping
PRINTF=/usr/bin/printf
PS=/usr/bin/ps
PWD=/usr/bin/pwd
RM=/usr/bin/rm
SED=/usr/bin/sed
SORT=/usr/bin/sort
SLEEP=/usr/bin/sleep
SSH=/usr/bin/ssh
SVCADM=/usr/sbin/svcadm
SVCS=/usr/bin/svcs
SYSTEMCTL=/usr/bin/systemctl
TAIL=/usr/bin/tail
TAR=/usr/bin/tar
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
TR=/usr/bin/tr
UEMCLI=/usr/bin/uemcli
UNAME=/usr/bin/uname
WC=/usr/bin/wc
XARGS=/usr/bin/xargs

####################
#OMBS COMMANDS #####
NBU_ADMIN=/usr/openv/netbackup/bin/admincmd
NBU_BIN=/usr/openv/netbackup/bin
####################

# ********************************************************************
#
#   Functions
#
# ********************************************************************



### Function: iniget ###
#
# Read specified parts from a given ini file
#
# Arguments:
#       -f  : specified ini file
#       -p  : gives whole matching <line>
#       -v  : gives only value of matching <line>
#       raw : will print even commented (;) lines
# Return Values:
#       0 : Success
#       1 : Error
#       Text output
iniget()
{
if [ -n "$1" ]; then
    INIBLOCK="$1"
    shift 1
else
    $ECHO "Usage: iniget <block> -f <configfile> [-<p|v> <line>] [raw]"
    return 1
fi

unset INIWLINE INILINE INICONFIGFILE INIPRINTTYPE
while [ -n "$1" ]; do
    case $1 in
        -p)    INIWLINE=parameter
               INILINE=$2
               shift 2
               ;;
        -v)    INIWLINE=value
               INILINE=$2
               shift 2
               ;;
        -f)    INICONFIGFILE=$2
               shift 2
               ;;
        raw)   INIPRINTTYPE=raw
               shift 1
               ;;
        *)     return 1
               ;;
    esac
done

if [ -z "$INICONFIGFILE" ]; then
    $ECHO "Usage: iniget <block> -f <configfile> [-<p|v> <line>] [raw]"
    return 1
fi

$AWK -F= -v printtype=$INIPRINTTYPE -v line="$INILINE" -v way=$INIWLINE '
  { sub(/[       ]*$/,"");      #remove trailing whitespace and tabs
    if ($1=="['$INIBLOCK']") {
        while ((getline) > 0) {
            if ($0 ~ /^ *\[/) exit
            if (($0 ~ /^ *;/) && (printtype!="raw")) continue
            if ($1==line) {
                if (way=="parameter") {print $0; exit}
                if (way=="value")     {sub(/^[^=]*=/,""); print $0; exit}
            }
            else if (! line) print $0
        }
    }
  }' $INICONFIGFILE
}
### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd ${_dir_} 2>/dev/null && pwd || $ECHO ${_dir_}`
SCRIPTNAME=`$BASENAME $0`
}

### Function: abort_script ###
#
#   This will is called if the script is aborted through an error
#   signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO -e "\n$_err_msg_\n" | $TEE -a ${LOGFILE}
else
    $ECHO -e "\n$_err_msg_\n"
fi


# Remove TEM_DIR if this script created it
if [ -d ${TEM_DIR} ]; then
    $RM -rf ${TEM_DIR}
fi

if [ "$2" ]; then
    ${2}
else
   exit 1
fi
}

### Function: chk_create_logfile ###
#
# Check/Create Logfile
#
# Arguments:
#   none
# Return Values:
#   none
chk_create_logfiles()
{

if [ ! "${LOGFILE}" ]; then
   LOGFILE=/ericsson/ombsl/eniq_stats_blade/etc/${_hostname_}/selective_restore_`$DATE '+%Y-%b-%d_%H.%M.%S'`.log
fi

$MKDIR -p /ericsson/ombsl/eniq_stats_blade/etc/${_hostname_}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory `$DIRNAME ${LOGFILE}`"
     abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

$TOUCH -a ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create file ${LOGFILE}"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

}

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
# Default user
DEFAULT_USER=root

#SSH command with options
RUN_REM_CMD="$SSH -o StrictHostKeyChecking=no -o BatchMode=yes"

BLKCLI=/ericsson/storage/san/bin/blkcli

TEMP_RESTORE_LOCATION=/var/tmp/migration/

RESTORE_TO_ORIG_LOC="ENIQ_SW_CONF_FILE DATABASE_FILES"
RESTORE_TO_TEMP_LOC="ENIQ_FILE_SYSTEM"
RESTORE_TO_CONF_LOC="CONFIG_FILES"
RESTORE_TO_ETC_LOC="FILE_SYSTEM"
RESTORE_TO_CRON_LOC="CRON_FILES"
RESTORE_TO_MIGR_LOC="MIGRATION_FILE"

INI_FILE=/ericsson/ombsl/eniq_stats_blade/bin/ini_file

#SERVER_TYPE=${ENIQ_CLIENT_CONFIG_DIR}/server_type_file
ENIQ_BASE_DIR=/eniq
ENIQ_ADMIN_BIN_DIR=${ENIQ_BASE_DIR}/admin/bin

}


### Function: check_id ###
#
#   Check the effective id of the user is correct
#   If not print error message and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "${_check_id_}" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "${_err_msg_}"
fi
}

### Function: log_msg ###
#
# I will create the function log if one does not already exist
# This allows user to have his/her own log function and still
# work with the commmon functions
#
# Arguments:
#       -l) : File to be logged to
#               -h) : Print the message as a header
#       -q) : don't echo the text, just tee it
#       -s) : Text/message to be logged
#               -t) : Prints the current time as part of the message
# Return Values:
#       0 : Success
#       1 : Error
log_msg()
{
local logfile quiet outstr header msg_time

while [ -n "$1" ]; do
    case $1 in
        -l)     logfile=$2
                shift 2
                ;;
        -h)     header=-h
                shift 1
                ;;
        -q)     quiet=-q
                shift 1
                ;;
        -s)     outstr=$2
                shift 2
                ;;
        -t)     msg_time=-t
                shift 1
                ;;
        *)      return 1
                ;;
    esac
done

if [ ! "${outstr}" ]; then
    return 1
fi

local run_time=`$DATE '+%Y-%m-%d_%H.%M.%S'`
if [ "${msg_time}" ]; then
    outstr="${run_time} - ${outstr}"
fi

# Simply print the message
if [ "${logfile}" ]; then
    if [ ! "${quiet}" ]; then
        $ECHO "${outstr}" |$TEE -a ${logfile}
    else
        $ECHO "${outstr}" >> ${logfile}
    fi
else
    if [ ! "${quiet}" ]; then
        $ECHO "${outstr}"
    fi
fi
        
}

### function: validate_restore ###
#
# Validate the restore with Job id
#
# Arguments:
#       job_id, job_type, restore_file, dest_path, log, sleep_time
# Return Values:
#       none
validate_restore()
{
local cnt=0
local cnt1=0
job_id=$1
job_type=$2
restore_file=$3
dest_path=$4
log=$5
sleep_time=$6

for((i=0;;i++)); do
    jobid_status=$(${NBU_ADMIN}/bpdbjobs -report | $AWK '{ if($1 == '$job_id') print $3;}')
        for ((j=0;;j++)); do
            if [ "${job_status}" == "Queued" ]; then
                if [ ${cnt1} == 0 ]; then
                    log_msg -s "Restore is in queued state."
                fi
                cnt1=$($EXPR $cnt1 + 1)
                $SLEEP 30
            else
                break
            fi
        done
        if [ "${jobid_status}" !=  "Active" ]; then
        jobid_ecode=$(${NBU_ADMIN}/bpdbjobs -report | $AWK '{ if($1 == '$job_id') print $4;}')
            if [ "${jobid_status}" == "Done" -a ${jobid_ecode} == 0 ]; then
                $ECHO "##### Restore of ${restore_file} to ${dest_path} logs #####" >>${LOGFILE}
                log_msg -s "\nRestore of ${restore_file} to ${dest_path} is successful." -l ${LOGFILE} -w
                break
            else
                $ECHO "##### Restore of ${restore_file} to ${dest_path} logs #####" >>${LOGFILE}
                log_msg -s "\nRestore of ${restore_file} to ${dest_path} failed.\nExiting..." -l ${LOGFILE} -w
                local failreason="$($GREP -w Status ${log} | $CUT -f2 -d'=')"
                _err_msg_="Restore failed with ${failreason}"
                abort_script "${_err_msg_}"
            fi
        elif [ "${job_type}" == "Restore" ]; then
            for ((j=0;;j++)); do
                if [ "${job_status}" == "Queued" ]; then
                    if [ ${cnt1} == 0 ]; then
                        log_msg -s "Restore is in queued state."
                    fi
                    cnt1=$($EXPR $cnt1 + 1)
                    $SLEEP 30
                else
                    break
                fi
            done
            if [ ${cnt} == 0 ]; then
                log_msg -s "Restore is in progress"
            else
                $PRINTF ". "
            fi
            cnt=$($EXPR $cnt + 1)
            $SLEEP ${sleep_time} >> /dev/null 2>&1
        else
            _err_msg_="Mismatch in Job ID ${job_id} and Job Type ${job_type}"
            abort_script "${_err_msg_}"
        fi
done

}

### Function: ask_for_input ###
#
#   Common function to ask for user input
#   and stores user input in USER_VALUE
#
# Arguments:
#       $1 : User message
# Return Values:
#       none
ask_for_input()
{
_msg_=$*
unset USER_VALUE

while [ 1 ]; do
    $ECHO  "\nPlease enter ${_msg_}" 
    read USER_VALUE

    if [ ! "${USER_VALUE}" ];then
         $ECHO  "\nPlease enter a valid input" 
        continue
    else
        break
    fi
done
}
### Function: get_details ###
#
# Get detail for backup VLAN configuration
#
# Arguments:
#   none
# Return Values:
#   none
get_details()
{
# Ask for client backup hostname
while true
do
    ask_for_input "Client backup hostname of ${_server_type_} server: \n"
    if [ $? -eq 0 ]; then
        _hostname_=${USER_VALUE}
        break
    fi
done

# chk_create_logfile
chk_create_logfiles

 # Ask for backup start Date and time
while true
do
    log_msg -s  "\nPlease enter backup start Date and time in format: MM/DD/YYYY HH:MM:SS" -l ${LOGFILE} 
    read _start_date_ _start_time_
    if [[ $_start_date_ =~ ^[0-9]{2}/[0-9]{2}/[0-9]{4} && $_start_time_ =~ ^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$ ]] ; then
        _starttime_=`$ECHO "$_start_date_ $_start_time_ "`
        break
    else
        log_msg -s  "\nPlease enter a valid input, Date and time  $_start_date_ $_start_time_ is in an invalid format (MM/DD/YYYY HH:MM:SS )" -l ${LOGFILE} 
        continue
    fi
done

# Ask backup end date and time
while true; do
    log_msg -s  "\nPlease enter backup End  Date and time in format: MM/DD/YYYY HH:MM:SS" -l ${LOGFILE} 
    read _end_date_ _end_time_
    if [[ $_end_date_ =~ ^[0-9]{2}/[0-9]{2}/[0-9]{4} && $_end_time_ =~ ^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$ ]] ; then
        _endtime_=`$ECHO "$_end_date_ $_end_time_"`
        break
    else
        log_msg -s  "\nPlease enter a valid input, Date and time  $_end_date_ $_end_time_ is in an invalid format (MM/DD/YYYY HH:MM:SS )" -l ${LOGFILE} 
        continue
    fi
done

}
### Function: remove_dwhmain_dbspace ###
#
# Remove the dwhmain dbspaces
#
# Arguments:
#   none
# Return Values:
#   none
remove_dwhmain_dbspace()
{
_tty_value="-t -t"
_cmd_="$RM -rf /eniq/database/dwh_main_dbspace/*"
_cmd_ls_="$LS /eniq/database/dwh_main_dbspace/"
$SSH ${_tty_value} -o StrictHostKeyChecking=no -o BatchMode=yes -q ${DEFAULT_USER}@${_hostname_} ${_cmd_}
$SLEEP 10

_chk_for_file_=`$SSH ${_tty_value} -o StrictHostKeyChecking=no -o BatchMode=yes -q ${DEFAULT_USER}@${_hostname_} ${_cmd_ls_}`
if [ ! -z "${_chk_for_file_}" ]; then
    _err_msg_="could not able to remove dwhmain dbspaces"
    abort_script "${_err_msg_}"
fi

}

restore_files()
{
eval restore_file_type='$'$1
eval types=$2

for tag in ${restore_file_type}
do

    files_list=`iniget $tag -f ${INI_FILE}`
    for entry in $files_list
    do
        hostname=`hostname`
        unset eniq_backup root_backup
        if [ ${types} == "YES" ]; then
            eniq_backup=`${NBU_BIN}/bplist -C ${_hostname_} -S ${hostname} -s ${_starttime_} -e ${_endtime_} -R 1 /.ENIQ_BACKUP${entry} | head -n 1  2> /dev/null` 
        else
            root_backup=`${NBU_BIN}/bplist -C ${_hostname_} -S ${hostname} -s ${_starttime_} -e ${_endtime_} -R 1 ${entry} | head -n 1  2> /dev/null`
        fi
        

        if [ -n "${eniq_backup}" ]  || [ -n "${root_backup}" ]; then
        
            change_file="/tmp/change_file"
            restore_proglog="/usr/openv/netbackup/logs/file_restore_progress.log"
            base_name=`$ECHO ${entry} | $AWK -F/ '{print $NF}'`
                case $1 in
                RESTORE_TO_ORIG_LOC) $ECHO "change /.ENIQ_BACKUP${entry} to ${entry}" > ${change_file}
                                     $ECHO "${entry} restore progress log" > ${restore_proglog}
                                     ;;
                RESTORE_TO_TEMP_LOC) $ECHO "change /.ENIQ_BACKUP${entry} to ${TEMP_RESTORE_LOCATION}${base_name}" > ${change_file}
                                     $ECHO "${entry} restore progress log" > ${restore_proglog}
                                     ;;
                RESTORE_TO_CONF_LOC) $ECHO "change /.ENIQ_BACKUP${entry} to ${TEMP_RESTORE_LOCATION}config/${base_name}" > ${change_file}
                                     $ECHO "${entry} restore progress log" > ${restore_proglog}
                                     ;;
                RESTORE_TO_ETC_LOC) $ECHO "change ${entry} to ${TEMP_RESTORE_LOCATION}/${base_name}" > ${change_file}
                                     $ECHO "${entry} restore progress log" > ${restore_proglog}
                                     ;; 
                RESTORE_TO_CRON_LOC) $ECHO "change ${entry} to ${TEMP_RESTORE_LOCATION}crontab/${base_name}" > ${change_file}
                                     $ECHO "${entry} restore progress log" > ${restore_proglog}
                                     ;;
                RESTORE_TO_MIGR_LOC) $ECHO "change ${entry} to ${TEMP_RESTORE_LOCATION}${base_name}" > ${change_file}
                                     $ECHO "${entry} restore progress log" > ${restore_proglog}
                                     ;;
                                   *) exit
                                     ;;
                esac
            
                if [ "$1" == "RESTORE_TO_ETC_LOC"  -o "$1" == "RESTORE_TO_CRON_LOC" -o "$1" == "RESTORE_TO_MIGR_LOC" ];then
                    RESTORE_BMR_ROOT="${NBU_BIN}/bprestore -s "${_starttime_}" -e "${_endtime_}" -S `hostname` -C ${_hostname_} -D ${_hostname_} -L ${restore_proglog} -H -R ${change_file} ${entry}"
                else
                    RESTORE_BMR_ROOT="${NBU_BIN}/bprestore -s "${_starttime_}" -e "${_endtime_}" -S `hostname` -C ${_hostname_} -D ${_hostname_} -L ${restore_proglog} -H -R ${change_file} /.ENIQ_BACKUP${entry}"
                fi

                ${RESTORE_BMR_ROOT} >>${LOGFILE} 2>&1
                if [ $? -ne 0 ]; then
                    _err_msg_="\nRestore of root [/] failed. Exiting....\n Check Below log and Netbackup GUI for more details.\n ${restore_proglog}"
                    abort_script "${_err_msg_}"
                fi

                $ECHO "Restoring ${entry}. This would take some time...\n"
                $SLEEP 10

                count_1=1
                jobid=$($GREP 'Restore Job Id=' ${restore_proglog} 2>> ${LOGFILE} | $AWK -F'=' '{print $2}')
                if [ ! "${jobid}" ]; then
                    err_msg_="Could not get the value for jobid"
                    abort_script "${_err_msg_}"
                fi
                $SLEEP 5

                while [ ! "${jobtype}" -a "${count_1}" -le 6 ]; do
                    jobtype=$(${NBU_ADMIN}/bpdbjobs -report | $GREP -w ${jobid} | $AWK '{print $2}')
                    if [ "${jobtype}" ]; then
                        break;
                    else
                        $SLEEP 10
                        count_1=$($EXPR ${count_1} + 1)
                        continue
                    fi
                done
                if [ ! "${jobtype}" ]; then
                    err_msg_="Could not get the value for jobtype"
                    abort_script "${_err_msg_}"
                fi
            
                case $1 in
                RESTORE_TO_ORIG_LOC) validate_restore ${jobid} $jobtype /.ENIQ_BACKUP${entry} ${entry} ${restore_proglog} 60
                                     ;;
                RESTORE_TO_TEMP_LOC) validate_restore ${jobid} $jobtype /.ENIQ_BACKUP${entry} ${TEMP_RESTORE_LOCATION}${base_name} ${restore_proglog} 60
                                     ;;
                RESTORE_TO_CONF_LOC) validate_restore ${jobid} $jobtype /.ENIQ_BACKUP${entry} ${TEMP_RESTORE_LOCATION}${TEMP_RESTORE_LOCATION}config/${base_name} ${restore_proglog} 60
                                     ;;
                RESTORE_TO_ETC_LOC)  validate_restore ${jobid} $jobtype ${entry} ${TEMP_RESTORE_LOCATION}/${base_name} ${restore_proglog} 60
                                     ;;
                RESTORE_TO_CRON_LOC) validate_restore ${jobid} $jobtype ${entry} ${TEMP_RESTORE_LOCATION}crontab/${base_name} ${restore_proglog} 60
                                     ;;
                RESTORE_TO_MIGR_LOC) validate_restore ${jobid} $jobtype ${entry} ${TEMP_RESTORE_LOCATION}${base_name} ${restore_proglog} 60
                                     ;;
                                   *) exit
                                     ;;
                esac
        else
            $ECHO ${entry} not found in the backup.
        fi
    done
done
}   
        
# ********************************************************************
#
#   Main body of program
#
# ********************************************************************
#

#Get the absolute path of the script
get_absolute_path

# Set up environment variables for script.
setup_env

# Check that the effective id of the user is root
check_id ${DEFAULT_USER}

# Get backup details
get_details

#Remove Database file
remove_dwhmain_dbspace

log_msg -s "Starting restore" -l ${LOGFILE}

for string in RESTORE_TO_TEMP_LOC RESTORE_TO_CONF_LOC RESTORE_TO_MIGR_LOC RESTORE_TO_ETC_LOC RESTORE_TO_CRON_LOC RESTORE_TO_ORIG_LOC
do
    if [ ${string} == "RESTORE_TO_TEMP_LOC" -o ${string} == "RESTORE_TO_CONF_LOC" -o ${string} == "RESTORE_TO_ORIG_LOC" ]; then
        FLAG="YES"
    else
        FLAG="NO"
    fi
    restore_files $string $FLAG
done 

log_msg -h -l ${LOGFILE} -t -s "Successfully completed ENIQ selective restore . Logfile: ${LOGFILE}" 

exit 0