#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2021 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : repdb_restore.bsh
# Date    : 08/06/2022
# Revision: main\15
# Purpose : Create the dwhdb databse
#
# Usage   : restore_repdb.bsh -c <path_to_cli_conf> [-l <logfile>]
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************
BASENAME=/usr/bin/basename
CP=/usr/bin/cp
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO='/usr/bin/echo -e'
EXPR=/usr/bin/expr
MKDIR=/usr/bin/mkdir
PWD=/usr/bin/pwd
RM=/usr/bin/rm
TEE=/usr/bin/tee

# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************
# Flag to determine whether to compress log or not (Must be y/n)
COMPRESS_LOG=n

# Name of SunOS & ENIQ ini Files
ENIQ_ENV=niq.rc
ENIQ_INI=niq.ini
SUNOS_INI=SunOS.ini

# ********************************************************************
#
#   Functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
if [ "$1" ]; then
    _err_msg_=$1
else
    _err_msg_="`$DATE +%d.%m.%y_%H:%M:%S` - ERROR : Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO "\n`$DATE +%d.%m.%y_%H:%M:%S` - ERROR : $_err_msg_\n" | $TEE -a ${LOGFILE}
else
    $ECHO "\n`$DATE +%d.%m.%y_%H:%M:%S` - ERROR : $_err_msg_\n"
fi
$RM -rf ${CONN_STR_USER_DBA_enc}

exit 55
}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}

### Function: setup_variables ###
#
# Set up some script variables
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
if [ -z "$CONF_DIR" ] ; then
    $ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - ERROR: CONF_DIR is not set" 
    abort_script "$_err_msg_"
fi

# Check required files and scripts exist
if [ ! -s ${CONF_DIR}/niq.rc ]; then
    _err_msg_="File ${CONF_DIR}/niq.rc not found, or is empty"
    abort_script "$_err_msg_"
else
    $ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - Sourcing ${CONF_DIR}/niq.rc" 
    . ${CONF_DIR}/niq.rc
fi

if [ ! -f ${CONF_DIR}/${ENIQ_INI} ]; then
    _err_msg_="${CONF_DIR}/${ENIQ_INI} does not exists"
    abort_script "$_err_msg_"
fi

if [ ! "${ENIQ_BASE_DIR}" ]; then
    # Directory on the root filesystem
    ENIQ_BASE_DIR=/eniq
fi

# Admin Directory
ENIQ_ADMIN_DIR=${ENIQ_BASE_DIR}/admin

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# Main Directory for the Core Installation SW
ENIQ_CORE_INST_DIR=${ENIQ_INST_DIR}/core_install

# Config dir
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

ASA_BKUP_DIR=${ENIQ_BASE_DIR}/backup/repdb_bkup

ASA_RCA_DIR=${ENIQ_BASE_DIR}/backup/repdb_rca

# Source the common functions
if [ -s $ENIQ_CORE_INST_DIR/lib/common_functions.lib ]; then
    . $ENIQ_CORE_INST_DIR/lib/common_functions.lib
else
    _err_msg_="File $ENIQ_CORE_INST_DIR/lib/common_functions.lib not found"
    abort_script "$_err_msg_"
fi

# Need to start the Util Server
UTIL_PORT=`iniget DB -v UtilServerPort -f ${CONF_DIR}/${ENIQ_INI}`
REP_ENG=`iniget REP -v ServerName -f ${CONF_DIR}/${ENIQ_INI}`
REP_PORT=`iniget REP -f ${CONF_DIR}/${ENIQ_INI} -v PortNumber`
if [ ! "${UTIL_PORT}" -o ! "${REP_ENG}" -o ! "${REP_PORT}"  ]; then
    _err_msg_="Could not read repdb values from ${CONF_DIR}/${ENIQ_INI}"
    abort_script "$_err_msg_"
fi

# Get the System User/Group. All directories are owned by this
SYSUSER=`iniget ENIQ_INSTALL_CONFIG -f ${ENIQ_CONF_DIR}/${SUNOS_INI} -v ENIQ_SYSUSER`
if [ ! "${SYSUSER}" ]; then
    _err_msg_="Could not read parameter ENIQ_SYSUSER from file ${ENIQ_CONF_DIR}/SunOS.ini"
    abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi

if [ -s ${ASA_DIR}/bin64/sa_config.sh ]; then
	. ${ASA_DIR}/bin64/sa_config.sh >> /dev/null 2>&1
else
	_err_msg_="File ${ASA_DIR}/bin64/sa_config.sh not found or empty"
	abort_script "$_err_msg_"
fi

}

### Function: usage_msg ###
#
# Usage message
#
# Arguments:
#   none
# Return Values:
#   none
usage_msg()
{
$ECHO "
Usage: `$BASENAME $0` -c <conf dir> -d <dwh.ini file> [-l <logfile>]

Options:

-l : Optional parameter specifying what logfile to use

-c : Path to Conf Dir 
"
}

# ********************************************************************
#
#   Main body of program
#
# ********************************************************************

TIMESTAMP=`$DATE +%d.%m.%y_%H:%M:%S`

# Determine absolute path to software
get_absolute_path

while getopts ":l:c:a:" arg; do
    case $arg in
        a) ACTION="${OPTARG}"
            ;;
        l) LOGFILE="$OPTARG"
            ;;
        c) CONF_DIR="$OPTARG"
            ;;
        \?) usage_msg
            exit 1
            ;;
    esac
done
shift `expr $OPTIND - 1`

# Set up variables
setup_env

# Setup logfile
if [ ! "$LOGFILE" ] ; then
    LOGFILE=${LOG_DIR}/asa/restore_repdb_${TIMESTAMP}.log
fi

# Verify that we have a backup of the database
$ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - Checking Backup of repdb." | $TEE -a ${LOGFILE}
if [ ! -s ${ASA_BKUP_DIR}/repdb.db ]; then
    _err_msg_="`$DATE +%d.%m.%y_%H:%M:%S` - ${ASA_BKUP_DIR}/repdb.db not found"
    abort_script "$_err_msg_"
fi

$ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - Starting DB Restore" | $TEE -a ${LOGFILE}

# Verify that DB is offline
# Should prob make calling script force repdb offline as root can do so through smf
$ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - Verifying DB is offline before Restoring Backup." | $TEE -a ${LOGFILE}
${ENIQ_BASE_DIR}/sw/bin/repdb stop
if [ $? -ne 0 ] ; then
    _err_msg_="`$DATE +%d.%m.%y_%H:%M:%S` - Failed to stop repdb"
    abort_script "$_err_msg_"
 else
    $ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - Database is offline" | $TEE -a ${LOGFILE}
fi

# Copy over the files that where backed up
$ECHO  "`$DATE +%d.%m.%y_%H:%M:%S` - Restoring Backed up Database files." | $TEE -a ${LOGFILE}
if [ -d ${ASA_RCA_DIR} ]; then
	$RM -rf ${ASA_RCA_DIR}
fi
$ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - creating a directory to copy repdb files." | $TEE -a ${LOGFILE}
$MKDIR -p ${ASA_RCA_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="`$DATE +%d.%m.%y_%H:%M:%S` - Could not create the directory ${ASA_RCA_DIR}."
    abort_script "$_err_msg_"
fi
log_msg -l "${LOGFILE}" -s "Backing up repdb files to ${ASA_RCA_DIR} directory."
if [ -f "${REP_DIR}/repdb.cfg" ]; then
	$CP "${REP_DIR}/repdb.cfg" "${ASA_RCA_DIR}"
	if [ $? -ne 0 ]; then
		log_msg -l "${LOGFILE}" -s "Could not copy ${REP_DIR}/repdb.cfg to ${ASA_RCA_DIR}"
	else
		log_msg -l "${LOGFILE}" -s "successfully backed up repdb.cfg to ${ASA_RCA_DIR} directory."
	fi
fi
if [ -f "${REP_DIR}/repdb.db" ]; then
	$CP "${REP_DIR}/repdb.db" "${ASA_RCA_DIR}"
	if [ $? -ne 0 ]; then
		log_msg -l "${LOGFILE}" -s "Could not copy ${REP_DIR}/repdb.db to ${ASA_RCA_DIR}"
	else
		log_msg -l "${LOGFILE}" -s "successfully backed up repdb.db to ${ASA_RCA_DIR} directory."
	fi
fi
if [ -f "${REP_DIR}/repdb.log" ]; then
	$CP "${REP_DIR}/repdb.log" "${ASA_RCA_DIR}"
	if [ $? -ne 0 ]; then
		log_msg -l "${LOGFILE}" -s "Could not copy ${REP_DIR}/repdb.log to ${ASA_RCA_DIR}"
	else
		log_msg -l "${LOGFILE}" -s "successfully backed up repdb.log to ${ASA_RCA_DIR} directory."
	fi
fi
if [ -f "${REP_DIR}/repdb.tran" ]; then
	$CP "${REP_DIR}/repdb.tran" "${ASA_RCA_DIR}"
	if [ $? -ne 0 ]; then
		log_msg -l "${LOGFILE}" -s "Could not copy ${REP_DIR}/repdb.tran to ${ASA_RCA_DIR}"
	else
		log_msg -l "${LOGFILE}" -s "successfully backed up repdb.tran to ${ASA_RCA_DIR} directory."
	fi
fi
$RM -rf ${REP_DIR}/repdb* >> /dev/null 2>&1
$CP ${ASA_BKUP_DIR}/repdb* ${REP_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="`$DATE +%d.%m.%y_%H:%M:%S` - Could not restore ${ASA_BKUP_DIR}/repdb* to $REP_DIR/repdb.cfg"
    abort_script "$_err_msg_"
fi

# Bring the database online to validate
$ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - Need to bring the database online to validate" | $TEE -a ${LOGFILE}
${ADMIN_BIN}/repdb start
if [ $? -ne 0 ] ; then
    _err_msg_="`$DATE +%d.%m.%y_%H:%M:%S` - Failed to start repdb"
    abort_script "$_err_msg_"
else
    $ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - Database is now online" | $TEE -a ${LOGFILE}
fi

DBA_PASSWORD=`inigetpassword DB -v DBAPassword -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${DBA_PASSWORD} ]; then
    if [ -f ${ENIQ_BASE_DIR}/sw/installer/dbusers ]; then
        DBA_PASSWORD=`${ENIQ_BASE_DIR}/sw/installer/dbusers dba etlrep`
        if [ ! "${DBA_PASSWORD}" ] ; then
            _err_msg_="Could not get repdb DBA Password"
            abort_script "$_err_msg_"
        fi
    else
        _err_msg_="Could not get repdb DBA Password"
        abort_script "$_err_msg_"
    fi
fi

CONN_STR_USER_DBA="-c \"uid=dba;pwd=${DBA_PASSWORD};eng=${REP_ENG};dbn=${REP_ENG};links=tcpip(host=localhost;port=$REP_PORT)\""
CONN_STR_USER_DBA_enc=/tmp/con_strn.`uuidgen`
# encrypt the connection string.
get_encrypt_file "${CONN_STR_USER_DBA}" "${CONN_STR_USER_DBA_enc}"
# Validate the database
$ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - Validating the the Database." | $TEE -a ${LOGFILE}
${SQLANY}/bin64/dbvalid -q @${CONN_STR_USER_DBA_enc}
if [ $? -ne 0 ] ; then
    _err_msg_="Could not validate repdb database"
    abort_script "$_err_msg_"
else
    $ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - Database Validated.... Shutting Down." | $TEE -a ${LOGFILE}
    ${ADMIN_BIN}/repdb stop
    if [ $? -ne 0 ] ; then
        _err_msg_="`$DATE +%d.%m.%y_%H:%M:%S` -  Failed to stop repdb"
	abort_script "$_err_msg_"
    else
        $ECHO  "`$DATE +%d.%m.%y_%H:%M:%S` - Database is now offline" | $TEE -a ${LOGFILE}
    fi
fi

$ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - Database successfully Restored and Validated." | $TEE -a ${LOGFILE}

#Bringing database online for tp_installer
if [ "${ACTION}" == "active" ]; then
    $ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - Bringing the database online for tp_installer" | $TEE -a ${LOGFILE}
    ${ENIQ_BASE_DIR}/sw/bin/repdb start
    if [ $? -ne 0 ] ; then
       _err_msg_="`$DATE +%d.%m.%y_%H:%M:%S` - Failed to start repdb"
       abort_script "$_err_msg_"
    else
       $ECHO "`$DATE +%d.%m.%y_%H:%M:%S` - Database is now online" | $TEE -a ${LOGFILE}
    fi
fi
$RM -rf ${CONN_STR_USER_DBA_enc}
exit 0
