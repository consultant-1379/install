#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2022 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used 
# and/or copied only with the written permission from Ericsson Radio 
# Systems AB or in accordance with the terms and conditions stipulated 
# in the agreement/contract under which the program(s) have been 
# supplied.
#
# ********************************************************************
# Name    : manage_eniq_status.bsh
# Date    : 06/10/2023
# Revision: \main\9
# Purpose : Main script that will manage the version of ENIQ on the system
#
# Usage   : manage_eniq_status.bsh
#										
#
# ********************************************************************
#
# 	Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CHOWN=/usr/bin/chown
CLEAR=/usr/bin/clear
CP=/usr/bin/cp
CUT=/usr/bin/cut
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
DOMAINNAME=/usr/bin/domainname
DTCONFIG=/usr/dt/bin/dtconfig
ECHO='/usr/bin/echo -e'
EGREP=/usr/bin/egrep
EJECT=/usr/bin/eject
ENV=/usr/bin/env
EXPR=/usr/bin/expr
FIND=/usr/bin/find
FORMAT=/usr/sbin/format
FUSER=/usr/sbin/fuser
GETENT=/usr/bin/getent
GETTEXT=/usr/bin/gettext
GREP=/usr/bin/grep
GROUPADD=/usr/sbin/groupadd
GTAR=/usr/sfw/bin/gtar
GAWK=/usr/bin/gawk
GZCAT=/usr/bin/gzcat
HEAD=/usr/bin/head
HOSTNAME=/usr/bin/hostname
ID=/usr/bin/id
INIT=/usr/sbin/init
LS=/usr/bin/ls
MKDIR=/usr/bin/mkdir
MORE=/usr/bin/more
MV=/usr/bin/mv
PERL=/usr/bin/perl
PGREP=/usr/bin/pgrep
PING=/usr/sbin/ping
PKGADD=/usr/sbin/pkgadd
PKGINFO=/usr/bin/pkginfo
PRTCONF=/usr/sbin/prtconf
PWD=/usr/bin/pwd
RM=/usr/bin/rm
RCP=/usr/bin/rcp
ROLES=/usr/bin/roles
RSH=/usr/bin/rsh
SCP=/usr/bin/scp
SED=/usr/bin/sed
SLEEP=/usr/bin/sleep
SORT=/usr/bin/sort
SU=/usr/bin/su
#SUDO=/usr/bin/sudo
SVCADM=/usr/sbin/svcadm
SVCCFG=/usr/sbin/svccfg
SVCS=/usr/bin/svcs
SYNC=/usr/sbin/sync
TAIL=/usr/bin/tail
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
TPUT=/usr/bin/tput
UADMIN=/usr/sbin/uadmin
UNAME=/usr/bin/uname
USERADD=/usr/sbin/useradd
VOLD=/usr/sbin/vold
WC=/usr/bin/wc
ZFS=/usr/sbin/zfs
ZPOOL=/usr/sbin/zpool

# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************

# Status file label
ENIQ_VERSION_DIR="version"
ENIQ_STATUS="eniq_status"
ENIQ_HISTORY="eniq_history"
HNAME=`${HOSTNAME} -s`
HOST_IP=`${HOSTNAME} -i | $AWK '{print $1}'`


# ********************************************************************
#
#       Pre-execution Operations
#
# ********************************************************************


# ********************************************************************
#
# 	functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This will be called if the script is aborted thru an error
#   error signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
if [ "$1" ]; then
    _err_msg_=$1
else
    _err_msg_="Script aborted.......\n"    
fi

if [ "${LOGFILE}" ]; then
    $ECHO "\nERROR : $_err_msg_\n" | $TEE -a ${LOGFILE}
else
    $ECHO "\nERROR : $_err_msg_\n"
fi

cd $SCRIPTHOME
$RM -rf ${TEM_DIR}

if [ "$2" ]; then
    ${2}
else
   exit 1
fi
}

### Function: chk_create_logfile ###
#
# Check/Create Logfile
#
# Arguments:
#	none
# Return Values:
#	none
chk_create_logfile()
{
$MKDIR -p `$DIRNAME ${LOGFILE}`
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory `$DIRNAME ${LOGFILE}`"
     abort_script "$_err_msg_"
fi	

$TOUCH -a ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not write to file ${LOGFILE}"
    abort_script "$_err_msg_"
fi	
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{

_get_id_=`$ENV |$GREP -w SUDO_USER | $EGREP "^[[:blank:]]*SUDO_USER="|$AWK -F\= '{print $2}'|$SED -e 's|"||g'`

_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

_check_group_=`$ID $_get_id_ | $AWK -F\( '{print $3}' | $AWK -F\) '{print $1}'`


    if [ "${_get_id_}" == "" ]; then

        if [ "${_check_id_}" == "root" ]; then
           # Set 1 for true
           _user_root=1

        else
           _err_msg_="You must be root or admin to execute this script."
           abort_script "${_err_msg_}"
        fi
          else
            if [ "${_check_group_}" == "ENIQ_ADMIN_ROLE" ]; then
               # Set 0 for false
               _user_root=0

            else
               _err_msg_="You must be root or admin to execute this script." 
               abort_script "${_err_msg_}"
            fi
    fi
}

### Function: check_params ###
#
# Check Input Params
#
# Arguments:
#	none
# Return Values:
#	none
check_params()
{
if [ ! "${ENIQ_BASE_SW}" ]; then
    usage_msg
    exit 1
fi
}

### Function: create_update_status ###
#
# Create/Update a version file in /eniq/admin
# and creates/updates eniq_history file
#
# Arguments:
#	none
# Return Values:
#	none
create_update_status()
{
if [ ! -s ${ENIQ_BASE_SW}/${ENIQ_VERSION_DIR}/${ENIQ_STATUS} ]; then
    _err_msg_="Could not find ${ENIQ_BASE_SW}/${ENIQ_VERSION_DIR}/${ENIQ_STATUS} file"
    abort_script "$_err_msg_"
fi

$MKDIR -p ${VERSION_FILE_LOC}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create ${VERSION_FILE_LOC} directory"
    abort_script "$_err_msg_"
fi

$CP ${ENIQ_BASE_SW}/${ENIQ_VERSION_DIR}/${ENIQ_STATUS} ${ENIQ_STATUS_FILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not copy ${ENIQ_BASE_SW}/${ENIQ_STATUS} to ${ENIQ_STATUS_FILE}"
    abort_script "$_err_msg_"
fi

RUN_TIME=`$DATE '+%Y-%b-%d_%H.%M.%S'`
$ECHO "INST_DATE ${RUN_TIME}" >> ${ENIQ_STATUS_FILE}
if [ $? -ne 0 ]; then
    _err_msg_="Error adding installation date/time to ${ENIQ_STATUS_FILE}"
    abort_script "$_err_msg_"
fi

if [ -s ${ENIQ_STATUS_FILE} ]; then
    $ECHO "====================================" >> ${ENIQ_HISTORY_FILE}
    $CAT ${ENIQ_STATUS_FILE} >> ${ENIQ_HISTORY_FILE}
    if [ $? -ne 0 ]; then
		_err_msg_="Could not copy eniq_status to ${ENIQ_HISTORY_FILE} file"
		abort_script "$_err_msg_"
    fi
    $ECHO "====================================\n" >> ${ENIQ_HISTORY_FILE}
    
    $ECHO "\n${ENIQ_HISTORY_FILE} file updated correctly" | $TEE -a ${LOGFILE}
fi

$ECHO "\n${ENIQ_STATUS_FILE} file updated correctly" | $TEE -a ${LOGFILE}
}


### Function: update SW path ###
#
# Update eniq_sw and om_sw location with upgarded path
#
# Arguments:
#	none
# Return Values:
#	none
update_sw_path() 
{
if [ "${INSTALL_TYPE}" == "stats" ]; then
	# Update eniq_sw_locate with new ENIQ SW location information
	if [ -f "${ENIQ_CONF_DIR}/eniq_sw_locate" ]; then
    	    if [ ! -s ${VAR_TMP_DIR}/upgrade_param_file ]; then
		$ECHO "Could not find ${VAR_TMP_DIR}/upgrade_param_file to update new ENIQ SW location information" | $TEE -a ${LOGFILE}
		return 1
    	    fi

    	    _file_base_sw_location_=`$CAT ${ENIQ_CONF_DIR}/eniq_sw_locate`
            _sw_location_=`$GREP BASE_SW_DIR ${VAR_TMP_DIR}/upgrade_param_file | $AWK -F":" '{print $2}' | $CUT -d/ -f3- | $SED 's/\//@\//1'`
    	    _base_sw_location_=`$DIRNAME $_sw_location_`
    	    if [ ! "${_base_sw_location_}" ];then
                $ECHO "Unable to find ENIQ SW location information." | $TEE -a ${LOGFILE}
                return 1
    	    fi

    	    if [ "${_file_base_sw_location_}" != "${_base_sw_location_}" ]; then
        	$RM -rf ${TEM_DIR}/eniq_sw_locate
        	$ECHO "Updating ENIQ SW path with ${_base_sw_location_}." | $TEE -a ${LOGFILE} 
        	$CAT ${ENIQ_CONF_DIR}/eniq_sw_locate | $SED -e "s|${_file_base_sw_location_}|${_base_sw_location_}|" > ${TEM_DIR}/eniq_sw_locate
        	$MV ${TEM_DIR}/eniq_sw_locate ${ENIQ_CONF_DIR}/eniq_sw_locate
        	$ECHO "Successfully updated ${ENIQ_CONF_DIR}/eniq_sw_locate with ENIQ SW location.\n" | $TEE -a ${LOGFILE}
    	    else
        	$ECHO "ENIQ SW location is already updated.\n" | $TEE -a ${LOGFILE}
    	    fi
	fi

	# Update om_sw_locate with new OM SW location information
	if [ -f "${ENIQ_CONF_DIR}/om_sw_locate" ]; then
       	    if [ ! -s ${VAR_TMP_DIR}/upgrade_param_file ]; then
        	$ECHO "Could not find ${VAR_TMP_DIR}/upgrade_param_file to update new OM SW location information" | $TEE -a ${LOGFILE}
        	return 1
    	    fi

    	    _file_om_location_=`$CAT ${ENIQ_CONF_DIR}/om_sw_locate`
    	    _om_location_=`$GREP OM_SW_DIR ${VAR_TMP_DIR}/upgrade_param_file | $AWK -F":" '{print $2}' | $CUT -d/ -f3- | $SED 's/\//@\//1'`

    	    if [ ! "${_om_location_}" ];then
        	$ECHO "Unable to find OM SW location information." | $TEE -a ${LOGFILE}
        	return 1
    	    fi

    	    if [ "${_file_om_location_}" != "${_om_location_}" ]; then
        	$RM -rf ${TEM_DIR}/om_sw_locate
        	$ECHO "Updating OM SW path with ${_om_location_}." | $TEE -a ${LOGFILE}
        	$CAT ${ENIQ_CONF_DIR}/om_sw_locate | $SED -e "s|${_file_om_location_}|${_om_location_}|" > ${TEM_DIR}/om_sw_locate
        	$MV ${TEM_DIR}/om_sw_locate ${ENIQ_CONF_DIR}/om_sw_locate
        	$ECHO "Successfully updated ${ENIQ_CONF_DIR}/om_sw_locate with OM SW location.\n" | $TEE -a ${LOGFILE}
    	    else
        	$ECHO "OM SW location is already updated.\n" | $TEE -a ${LOGFILE}
    	    fi
	fi
	
	# Incase of multi blade Copy the Updated SW path from co-ordinator to all the connected blades
	if [ "${CURR_SERVER_TYPE}" == "stats_coordinator" ]; then
		$ECHO "Copying  Updated SW path from co-ordinator to all the connected blades" | $TEE -a ${LOGFILE}	
		$PERL ${GET_IP_ORDER} -f ${VAR_TMP_DIR}/server_order_list
	for _entry_ in `$CAT ${VAR_TMP_DIR}/server_order_list`
    do
        local _count_=`$CAT ${VAR_TMP_DIR}/server_order_list| $HEAD -1 |$GREP -o "::" | $WC -l`
        if [ "${_ip_type_}" == "IPv6" -a "${_count_}" == 3 ]; then
            _server_=`$ECHO $_entry_ | $AWK -F:: '{print $3}'`
            _coordinator_ip_=`$CAT ${VAR_TMP_DIR}/server_order_list| $HEAD -1|$GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}'`
        else
            _coordinator_ip_=`$CAT ${VAR_TMP_DIR}/server_order_list |$HEAD -1 |$AWK -F:: '{print $1}'`
            _server_=`$ECHO $_entry_ | $AWK -F:: '{print $2}'`
        fi
        if [ "${_server_}" != "${HOST_IP}" ]; then

            if [ "${_ip_type_}" == "IPv6" ]; then
                $SCP -6 -rp ${ENIQ_CONF_DIR}/eniq_sw_locate [${_server_}]:${ENIQ_CONF_DIR}/eniq_sw_locate  >/dev/null
                if [ $? -ne 0 ]; then
                    _err_msg_="Failed to copy ${ENIQ_CONF_DIR}/eniq_sw_locate from ${_coordinator_ip_} to ${_server_}"
                    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
                fi
            else
                $SCP -rp ${ENIQ_CONF_DIR}/eniq_sw_locate ${_server_}:${ENIQ_CONF_DIR}/eniq_sw_locate  >/dev/null
                if [ $? -ne 0 ]; then
                    _err_msg_="Failed to copy ${ENIQ_CONF_DIR}/eniq_sw_locate from ${_coordinator_ip_} to ${_server_}"
                    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
                fi
            fi

            if [ "${_ip _type_}" == "IPv6" ]; then
                $SCP -6 -rp ${ENIQ_CONF_DIR}/om_sw_locate [${_server_}]:${ENIQ_CONF_DIR}/om_sw_locate >/dev/null
                if [ $? -ne 0 ]; then
                   _err_msg_="Failed to copy ${ENIQ_CONF_DIR}/om_sw_locate from ${_coordinator_ip_} to ${_server_}"
                   abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
                fi
            else
                $SCP -rp ${ENIQ_CONF_DIR}/om_sw_locate ${_server_}:${ENIQ_CONF_DIR}/om_sw_locate >/dev/null
                if [ $? -ne 0 ]; then
                    _err_msg_="Failed to copy ${ENIQ_CONF_DIR}/om_sw_locate from ${_coordinator_ip_} to ${_server_}"
                    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
                fi
            fi
        fi 
    done
    $ECHO "Successfully copied the Updated SW path from co-ordinator to all the connected blades" | $TEE -a ${LOGFILE}
    fi
     
     fi
}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#	none
# Return Values:
#	none
get_absolute_path() 
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}

### Function: setup_env ###
#
# Set up environment variables for script. 
#
# Arguments:
#	none
# Return Values:
#	none
setup_env()
{	
if [ ! "${ENIQ_BASE_DIR}" ]; then
    # Directory on the root filesystem
    ENIQ_BASE_DIR=/eniq
fi

# ENIQ Admin Directory
ENIQ_ADMIN_DIR=${ENIQ_BASE_DIR}/admin

VERSION_FILE_LOC=${ENIQ_ADMIN_DIR}/${ENIQ_VERSION_DIR}

ENIQ_HISTORY_FILE=${VERSION_FILE_LOC}/${ENIQ_HISTORY}
ENIQ_STATUS_FILE=${VERSION_FILE_LOC}/${ENIQ_STATUS}
ENIQ_CONF_DIR=${ENIQ_BASE_DIR}/installation/config
ENIQ_CORE_INST_DIR=${ENIQ_BASE_DIR}/installation/core_install
GET_IP_ORDER=${ENIQ_CORE_INST_DIR}/lib/get_ip_order.pl
VAR_TMP_DIR=/var/tmp

# File containing the type of OSS installation. Eg. events or statistics
INST_TYPE_FILE=${ENIQ_CONF_DIR}/ericsson_use_config

# Read the installation type - should be "events" or "stats"
INSTALL_TYPE=`$CAT ${INST_TYPE_FILE} | $AWK -F\= '{print $2}'`

# Get current server type
CURR_SERVER_TYPE=`$CAT ${ENIQ_CONF_DIR}/installed_server_type | $GREP -v  '^[[:blank:]]*#' | $SED -e 's/ //g'`
if [ ! "${CURR_SERVER_TYPE}" ]; then
    _err_msg_="Could not determine which server type this is"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

# Source the common functions
if [ -s ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib
else
    _err_msg_="File /eniq/installation/core_install/lib/common_functions.lib not found"
    abort_script "$_err_msg_"
fi
}


### Function: usage_msg ###
#
#   Print out the usage message
#
# Arguments:
#       none
# Return Values:
#       none
usage_msg()
{
$CLEAR
$ECHO "
Usage: `$BASENAME $0` -d <eniq_base_sw>  [ -l <logfile> ]

options:
	
-d	: Path to eniq_base_sw
	
-l	: Optional parameter specifying logfile where the script output will be appended to.
	
"
}

# ********************************************************************
#
# 	Main body of program
#
# ********************************************************************
#
# Determine absolute path to software
get_absolute_path

# Check that the effective id of the user is root
check_id 

while getopts ":b:d:l:" arg; do
  case $arg in
    b) ENIQ_BASE_DIR="$OPTARG" 
       ;;
    d) ENIQ_BASE_SW="$OPTARG"
       ;;
    l) LOGFILE="$OPTARG"
       ;;
   \?) usage_msg 
       exit 1
       ;;
  esac
done
shift `expr $OPTIND - 1`

# Check Input Params
check_params 

# Set up environment variables
setup_env

#get ip type from common_functions
check_ip_type
if [ ! "${_ip_type_}" ]; then
    _err_msg_="Could not read parameter _ip_type_ from file ${ENIQ_CONF_DIR}/${IPMP_INI}"
    abort_script "$_err_msg_"
fi

if [ "${LOGFILE}" ]; then
    # Check/Create Logfile
    chk_create_logfile
fi

# Create a temporary Directory
TEM_DIR=/tmp/$0.$$.$$
$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory ${TEM_DIR}"
    abort_script "$_err_msg_"
fi	

if [ ! -s ${ENIQ_STATUS_FILE} ]; then

     # Create/Update a version file in /eniq/admin
     # and creates/updates eniq_history file
     create_update_status
else
     # Create/Update a version file in /eniq/admin
     # and creates/updates eniq_history file
     create_update_status
     # Update eniq_sw and om_sw location with upgraded path
     update_sw_path
fi
$RM -rf ${TEM_DIR}

exit 0
