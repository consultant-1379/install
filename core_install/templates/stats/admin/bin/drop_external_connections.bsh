#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2021 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    :  drop_external_connections.bsh
# Date    :  09/10/2023
# Revision:  Statistics_22.4.8.EU2_Linux/2
# Purpose :  To drop external connections which may cause version buildup
# Usage   :  bash drop_external_connections.bsh
#
# ********************************************************************
#
# Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
SED=/usr/bin/sed
CAT=/usr/bin/cat
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO=/usr/bin/echo
ID=/usr/bin/id
RM=/usr/bin/rm
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
MYHOSTNAME=/usr/bin/hostname
HEAD=/usr/bin/head
GREP=/usr/bin/grep
PERL=/usr/bin/perl

#Temp directory.
TEM=/tmp

#CORE_INSTALL_LIB=/eniq/admin/lib/
CONFIG_DIR=/eniq/sw/conf
ENIQ_INI=$CONFIG_DIR/niq.ini
ENIQ_CORE_INST_DIR=/eniq/installation/core_install
ENIQ_CORE_CONFIG_DIR=/eniq/installation/config
ENIQ_TEMPLATE_STATE_DIR=${ENIQ_CORE_INST_DIR}/templates/stats

# ********************************************************************
#
#   Functions
#
# ********************************************************************

## Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
  _err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`
  
  if [ "$1" ]; then
      _err_msg_="${_err_time_} - $1"
  else
      _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
  fi
  
  if [ "${LOGFILE}" ]; then
      $ECHO -e "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
  else
      $ECHO -e "\nERROR : ${_err_msg_}\n"
  fi
 
  $RM -rf $TEM/external_connections.txt
  $RM -rf ${conn_str_enc}
  $RM -rf ${conn_str_reader_enc}
  $RM -rf $TEM/temp_server_name.txt
  $RM -rf $TEM/temp_nodeaddr.txt 
  
  exit 1
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}

## Function: get_connection_string ###
#
#   This will be called to create connection string for
#   sybase connection
#
#
# Arguments:
#       $1 - Server to which connection is required
# 
# Return Values: none
get_connection_string()
{
  if [ $1 == "dwhdb" ]; then
    conn_str="-c \"eng=$1;links=tcpip{host=$1;port=$DWH_PORT_CO};uid=dba;pwd=$DBA_PASSWORD\""
    conn_str_enc=${TEM}/conn_str_sixty_encrypt.`uuidgen`
    
    # encrypt the connection string.
    get_encrypt_file "${conn_str}" "${conn_str_enc}"
    ConnString="dbisql -nogui -onerror exit @${conn_str_enc}"
  else
    conn_str_reader="-c \"eng=$1;links=tcpip{host=$1;port=$DWH_PORT_READER};uid=dba;pwd=$DBA_PASSWORD\""
    conn_str_reader_enc=${TEM}/conn_str_external_connection_encrypt.txt.`uuidgen`
    
    # encrypt the connection string.
    get_encrypt_file "${conn_str_reader}" "${conn_str_reader_enc}"
    ConnString="dbisql -nogui -onerror exit @${conn_str_reader_enc}"
  fi
}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#	none
# Return Values:
#	none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}

# ********************************************************************
#
#   Main body of program
#
# ********************************************************************
#

# Determine absolute path to software
get_absolute_path

# Validate the effective id is dcuser
check_id "dcuser"

# Source the common functions
if [ -s ${SCRIPTHOME}/../lib/common_functions.lib ]; then
    . ${SCRIPTHOME}/../lib/common_functions.lib
else
    _err_msg_="File ${SCRIPTHOME}/../lib/common_functions.lib not found"
    abort_script "${_err_msg_}" 
fi

#Fetching IP Type from ipmp.ini file.
check_ip_type

if [ ! "${_ip_type_}" ]; then
    _err_msg_="Could not read parameter _IP_TYPE_ from file ${ENIQ_CONF_DIR}/${IPMP_INI}"
    abort_script "$_err_msg_"
fi


#Config to fetch connection,user_id parameter
if [ ! -s ${ENIQ_TEMPLATE_STATE_DIR}/drop_connection.conf ]; then
    _err_msg_="Cannot locate ${ENIQ_TEMPLATE_STATE_DIR}/drop_connection.conf"
    abort_script "$_err_msg_"
else
   . ${ENIQ_TEMPLATE_STATE_DIR}/drop_connection.conf
fi

CURR_SERVER_TYPE=`$CAT ${ENIQ_CORE_CONFIG_DIR}/installed_server_type`
DWH_PORT_CO=`iniget DWH -v PortNumber -f ${ENIQ_INI}`
DWH_PORT_READER=`iniget DWH_READER_SETTINGS -v PortNumber -f ${ENIQ_INI}`
DBA_PASSWORD=`inigetpassword DB -f ${ENIQ_INI} -v DBAPassword`

#Get HOST_IP from HOSTNAME
#HNAME=`${MYHOSTNAME}`
HOST_IP=`$MYHOSTNAME -i | $AWK '{print $1}' | $HEAD -1`



$PERL ${ENIQ_CORE_INST_DIR}/lib/get_ip_order.pl -f ${TEM}/server_order_list>> /dev/null 2>&1
_count_=`$GREP -w "${HOST_IP}" ${TEM}/server_order_list | grep -o "::" | wc -l`
if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
	SERVER=`$GREP -w "${HOST_IP}" ${TEM}/server_order_list | $AWK -F"::" '{print $4}'`
else
	SERVER=`$GREP -w "${HOST_IP}" ${TEM}/server_order_list | $AWK -F"::" '{print $3}'`
fi

_count_=`$GREP -w "dwh_reader_1" ${TEM}/server_order_list | grep -o "::" | wc -l`
if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
	READER1=`$GREP -w "dwh_reader_1" ${TEM}/server_order_list | grep -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | head -n 1 | awk -F "::" '{ print $1 "::" $2}'`
else
	READER1=`$GREP -w "dwh_reader_1" ${TEM}/server_order_list | $AWK -F"::" '{print $1}'`
fi

_count_=`$GREP -w "dwh_reader_2" ${TEM}/server_order_list | grep -o "::" | wc -l`
if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
	READER2=`$GREP -w "dwh_reader_2" ${TEM}/server_order_list | grep -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | head -n 1 | awk -F "::" '{ print $1 "::" $2}'`
else
	READER2=`$GREP -w "dwh_reader_2" ${TEM}/server_order_list | $AWK -F"::" '{print $1}'`
fi

_count_=`$GREP -w "stats_coordinator" ${TEM}/server_order_list | grep -o "::" | wc -l`
if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
	CO=`$GREP -w "stats_coordinator" ${TEM}/server_order_list | grep -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | head -n 1 | awk -F "::" '{ print $1 "::" $2}'`
else
	CO=`$GREP -w "stats_coordinator" ${TEM}/server_order_list | $AWK -F"::" '{print $1}'`
fi



# Change connection string and NodeAddr based on server type.
if [[ "${server_name}" == *dwhdb* ]]; then
    if [ "${CURR_SERVER_TYPE}" == "eniq_stats" ] || [ "${CURR_SERVER_TYPE}" == "stats_coordinator" ]; then
            $ECHO "${server_name}" | $SED -e 's/dwhdb/local/g' >$TEM/temp_server_name.txt
                server_name=$($CAT $TEM/temp_server_name.txt)
            SERVER="dwhdb"
            get_connection_string $SERVER
    fi
        node_addr="$CO"
fi
# Change connection string based on server type.
if [[ "${server_name}" == *dwh_reader_1* ]] && [ "${SERVER}" == "dwh_reader_1" ]; then 
        $ECHO "${server_name}" | $SED -e 's/dwh_reader_1/local/g' > $TEM/temp_server_name.txt
            server_name=$($CAT $TEM/temp_server_name.txt)
        get_connection_string $SERVER
fi
# Set NodeAddr based on server names in config file.
if [[ "${server_name}" == *dwh_reader_1* ]]; then
    if [ ! -z "${node_addr}" ]; then
        node_addr="$CO,$READER1"
    else
        node_addr="$READER1" 
    fi
fi
# Change connection string based on server type.
if [[ "${server_name}" == *dwh_reader_2* ]] && [ "${SERVER}" == "dwh_reader_2" ]; then
                $ECHO "${server_name}" | $SED -e 's/dwh_reader_2/local/g' >$TEM/temp_server_name.txt
                server_name=$($CAT $TEM/temp_server_name.txt)
        get_connection_string $SERVER
fi
# Set NodeAddr based on server names in config file.
if [[ "${server_name}" == *dwh_reader_2* ]]; then
        if [ ! -z "${node_addr}" ]; then
            if [ ${node_addr} == "$CO,$READER1" ]; then
                            node_addr="$CO,$READER1,$READER2"
            elif [ ${node_addr} == "$CO" ]; then
                node_addr="$CO,$READER2"
            else
                node_addr="READER1,READER2"
            fi
                else
                        node_addr="READER2"

                fi
fi

## Formatting config file values as per expected in query
$ECHO $node_addr| $SED -e "s/,/','/g" | $SED -e "s/\$/'/g" | $SED -e "s/^/'/g" > $TEM/temp_nodeaddr.txt
node_addr=$($CAT $TEM/temp_nodeaddr.txt)

$ECHO "${server_name}" | $SED -e "s/,/','/g" |$SED -e "s/\$/'/g" | $SED -e "s/^/'/g"  >$TEM/temp_server_name.txt
server_name=$($CAT $TEM/temp_server_name.txt)

$ECHO "${user_id}" | $SED -e "s/,/','/g" | $SED -e "s/\$/'/g" | $SED -e "s/^/'/g"  > $TEM/temp_user_id.txt
user_id=$($CAT $TEM/temp_user_id.txt)

LOGFILE=/eniq/log/sw_log/iq/${SERVER}_drop_external_connections.log

$TOUCH ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not write to file ${LOGFILE}"
    abort_script "$_err_msg_"
fi

query="select conn.ConnHandle,conn.LastReqTime,conn.CommLink,conn.NodeAddr,conn.Userid from sp_iqconnection() conn where DATEDIFF(mi,conn.LastReqTime,now()) >= $max_conn_time and (CommLink in ($server_name) or NodeAddr in ($node_addr)) and Userid not in ($user_id) ; output to $TEM/external_connections.txt"
$ConnString "${query}" 2>>${LOGFILE}



if [ $? -ne 0 ]; then
     _err_msg_="Could not get list of external connections"
     abort_script "$_err_msg_"
fi

if [ -s $TEM/external_connections.txt ]; then
    for _conn_ in `$CAT $TEM/external_connections.txt | $AWK -F',' '{print $1}'`
    do
      message="Dropping load connection with connection with Connection Handler:`$CAT $TEM/external_connections.txt |$GREP -w ${_conn_} | $AWK -F',' '{print $1}'`,connection from :`$CAT $TEM/external_connections.txt|$GREP -w ${_conn_} | $AWK -F',' '{print $3}'` | `$CAT $TEM/external_connections.txt|$GREP -w ${_conn_} | $AWK -F',' '{print $4}'` and User: `$CAT $TEM/external_connections.txt|$GREP -w ${_conn_} | $AWK -F',' '{print $5}'` "
     
      log_msg -t -q -s "$message" -l ${LOGFILE}
     ##Dropping connections
     $ConnString "drop connection ${_conn_}" 2>>${LOGFILE}  
    done
else
    log_msg -t -q -s "No connection with ConnHandle exists" -l ${LOGFILE}
fi


$RM -rf $TEM/external_connections.txt
$RM -rf ${conn_str_enc}
$RM -rf ${conn_str_reader_enc}
$RM -rf $TEM/temp_server_name.txt
$RM -rf $TEM/temp_nodeaddr.txt

exit 0

