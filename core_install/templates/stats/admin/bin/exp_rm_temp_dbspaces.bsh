#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2021 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : exp_rm_temp_dbspaces.bsh
# Date    : 7/10/2022
# Revision: main\21
# Purpose : This Script is to only ran as part of the Expansion of Stats single blade
# a multi-blade environment it reduces the number of tempDB to one
#
# Usage   : exp_rm_temp_dbspaces.bsh -c <path_to_cli_conf> -d <niq.ini_file_location>
#                               [-l <logfile>]
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************

AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
BASH=/usr/bin/bash
CAT=/usr/bin/cat
CP=/usr/bin/cp
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO='/usr/bin/echo -e'
EGREP=/usr/bin/egrep
ENV=/usr/bin/env
GREP=/usr/bin/grep
HEAD=/usr/bin/head
ID=/usr/bin/id
LS=/usr/bin/ls
MKDIR=/usr/bin/mkdir
MV=/usr/bin/mv
RAW=/usr/bin/raw
RM=/usr/bin/rm
SED=/usr/bin/sed
SORT=/usr/bin/sort
SU=/usr/bin/su
SUDO=/usr/bin/sudo
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
UDEVADM=/usr/sbin/udevadm

DEFAULT_USER=root
# Name of SunOS ini File
SUNOS_INI=SunOS.ini
BLK_STOR_INI=block_storage.ini
SYM_INI_FILE=sym_links.ini
SYM_CO_INI_FILE=coordinator_sym_links.ini
LUN_MAP_FILE=lun_map.ini

# ********************************************************************
#
#   Functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This is called if the script is aborted through an error
#   signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
if [ "$1" ]; then
    _err_msg_=$1
else
    _err_msg_="$TIMESTAMP - ERROR : Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO "\n$TIMESTAMP - ERROR : $_err_msg_\n" | $TEE -a ${LOGFILE}
else
    $ECHO "\n$TIMESTAMP - ERROR : $_err_msg_\n"
fi
if [ -z ${dwh_stop_flag} ]; then
    dwhdb_stop
fi
$RM -rf ${CONN_STR_USER_DBA_ENC}
exit 55
}

### Function: chk_create_logfile ###
#
# Check/Create Logfile
#
# Arguments:
#   none
# Return Values:
#   none
chk_create_logfile()
{
if [[ ! -d "$(${DIRNAME} ${LOGFILE})" ]]; then
    ${MKDIR} -p $(${DIRNAME} ${LOGFILE}) > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        _err_msg_="Could not create directory [$($DIRNAME ${LOGFILE})]"
        abort_script "$_err_msg_"
    fi
fi
${TOUCH} -a ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not write to file [${LOGFILE}]"
    abort_script "$_err_msg_"
fi
}

### Function: check_db_removed ###
#
# create a list of luns on the host
#
# Arguments:
#       none
# Return Values:
#       none
check_db_removed()
{

if  [ "${1}" = "" ]; then
    _err_msg_="Must provide an dbfile"
    abort_script "$_err_msg_"
fi

$SU - ${SYSUSER} -c "${IQDIR}/bin64/dbisql @${CONN_STR_USER_DBA_ENC} \"select DBFileName, Path from sp_iqfile();OUTPUT TO ${TEM}/paths_of_temp_dbs_database_check.txt\"" > /dev/null 2>&1
$GREP ${1} ${TEM}/paths_of_temp_dbs_database_check.txt
if [ $? -ne 0 ]; then
    log_msg -s "${1} is dropped from sybase" -l ${LOGFILE}
else
    _err_msg_="${1} not found in dwhdb"
    abort_script "$_err_msg_"
fi

}
### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_get_id_=`$ENV |$GREP -w SUDO_USER | $EGREP "^[[:blank:]]*SUDO_USER="|$AWK -F\= '{print $2}'|$SED -e 's|"||g'`

_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

_check_group_=`$ID $_get_id_ | $AWK -F\( '{print $3}' | $AWK -F\) '{print $1}'`


    if [ "${_get_id_}" == "" ]; then

        if [ "${_check_id_}" == "root" ]; then
           # Set 1 for true
           _user_root=1

        else
           _err_msg_="You must be root or admin to execute this script."
           abort_script "${_err_msg_}"
        fi
    else
        if [ "${_check_group_}" == "ENIQ_ADMIN_ROLE" ]; then
           # Set 0 for false
           _user_root=0

        else
            _err_msg_="You must be root or admin to execute this script." 
            abort_script "${_err_msg_}"
        fi
    fi

}

### Function: dwhdb_notmp_start ###
#
# Starts the dwhdb with the -iqnotemp 100 option, this will 
# start with the tempDB empty
#
# Arguments:
#       None
# Return Values:
#       none
dwhdb_notmp_start()
{
# start dwhdb
_dwhdb_nottmp_opts_="${IQDIR}/bin64/start_iq -STARTDIR /eniq/database/dwh_main @/eniq/database/dwh_main/dwhdb.cfg -c 5000m -n ${DWH_ENG} -iqmc ${MAINCACHE} -iqtc ${TEMPCACHE} -x 'tcpip{port=${DWH_PORT}}' -dt /eniq/database/dwh_temp_dbspace /eniq/database/dwh_main/dwhdb.db -iqnotemp 100"

$SU - ${SYSUSER} -c "${IQDIR}/bin64/dbping -q @${CONN_STR_USER_DBA_ENC}" >> ${LOGFILE} 2>&1
if [ $? -ne 0 ]; then
    $SU - ${SYSUSER} -c "${_dwhdb_nottmp_opts_}" >> ${LOGFILE} 2>&1
    if [ $? -ne 0 ]; then
        _err_msg_="Failure to start IQ server ${DWH_ENG}"
        abort_script "$_err_msg_"
    fi
else
    dwhdb_stop
    if [ $? -ne 0 ]; then
    dwh_stop_flag=1
        abort_script
    fi
    $SU - ${SYSUSER} -c "${_dwhdb_nottmp_opts_}" >> ${LOGFILE} 2>&1
    if [ $? -ne 0 ]; then
        _err_msg_="Failure to start IQ server ${DWH_ENG}"
        abort_script "$_err_msg_"
    fi
fi

dwhdb_ping
}

### Function: dwhdb_ping ###
#
# Pings the dwhdb 
# Arguments:
#       None
# Return Values:
#       none
dwhdb_ping()
{
local cnt=0
local ping_cnt=40
local sleep_time=5
log_msg -s "NOTE : pinging dwhdb service." -l ${LOGFILE}
until [ ${cnt} -eq ${ping_cnt} ]; do
    $SU - ${SYSUSER} -c "${IQDIR}/bin64/dbping -q @${CONN_STR_USER_DBA_ENC}" 
    if [ $? -eq 0 ]; then
        break
    fi
    sleep ${sleep_time}
    let cnt=cnt+1
    log_msg -s "NOTE : pinging dwhdb service again attempt $cnt" -l ${LOGFILE}
done
if [ ${cnt} -eq ${ping_cnt} ]; then
   _err_msg_="dwhdb not responding"
    abort_script "$_err_msg_"
fi
}

### Function: dwhdb_stop ###
#
# stops the dwhdb 
# Arguments:
#       None
# Return Values:
#       none
dwhdb_stop()
{
if [ ! "${SYSUSER}" ]; then
    $ECHO "Could not get system user value. Failure to stop IQ server." | $TEE -a ${LOGFILE}
    exit 1
fi

if [ ! "${DWH_ENG}" ]; then
    $ECHO "Could not get IQ server name. Failure to stop IQ server." | $TEE -a ${LOGFILE}
    exit 1
fi

$SU - ${SYSUSER} -c "${ENIQ_ADMIN_DIR}/bin/${DWH_ENG} stop"
if [ $? -ne 0 ]; then
    $ECHO "Failure to stop IQ server ${DWH_ENG}" | $TEE -a ${LOGFILE}
    exit 1
else
    $ECHO "NOTE :$SU - ${SYSUSER} -c \"${ENIQ_ADMIN_DIR}/bin/${DWH_ENG} stop\"" | $TEE -a ${LOGFILE}
fi
}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}


### Function: get_login_info ###
#
# Read the USER and PASSWORD from configuration file
#
# Arguments:
#   none
# Return Values:
#   none
get_login_info()
{
_device_name_=`iniget $1 -f ${ENIQ_CONF_DIR}/${BLK_STOR_INI} -v BLK_STORAGE_NAME`
if [ ! "${_device_name_}" ]; then
    _err_msg_="Unable to obtain device Name for Block Storage Device."
    abort_script "$_err_msg_";
fi

log_msg -s "Obtaining Login Information for ${_device_name_} ..." -l ${LOGFILE}

# Now get the username and password from the INI file ...
USER=`iniget $1 -f ${ENIQ_CONF_DIR}/${BLK_STOR_INI} -v BLK_STORAGE_USERNAME`
if [ ! "${USER}" ]; then
    _err_msg_="Unable to obtain username for BLK_STORAGE_USERNAME. Exiting."
    abort_script "$_err_msg_";
fi

# Eniq Storage Group
ENIQ_SG=`iniget $1 -f ${ENIQ_CONF_DIR}/${BLK_STOR_INI} -v BLK_STORAGE_GROUP_NAME`
if [ ! "${ENIQ_SG}" ]; then
    _err_msg_="Unable to obtain Storage Group. Exiting."
    abort_script "$_err_msg_";
fi
SPA_IP=`iniget $1 -f ${ENIQ_CONF_DIR}/${BLK_STOR_INI} -v BLK_STORAGE_IP_SPA`
if [ ! "${SPA_IP}" ]; then
    _err_msg_="Unable to obtain SPA IP. Exiting."
    abort_script "$_err_msg_";
fi
SPB_IP=`iniget $1 -f ${ENIQ_CONF_DIR}/${BLK_STOR_INI} -v BLK_STORAGE_IP_SPB`
if [ ! "${SPB_IP}" ]; then
    _err_msg_="Unable to obtain SPB IP. Exiting."
    abort_script "$_err_msg_";
fi
EMC_IPS="${SPA_IP} ${SPB_IP}"
for ip in ${EMC_IPS}; do
    ${PORT_PING} ${ip} >> /dev/null 2>&1
    if [ $? -ne 0 ]; then
        _err_msg_="Unable to communicate with the Array at IP Address [${ip}]. Exiting."
        abort_script "$_err_msg_"
    fi
done
}

### Function: ini_remove_updates ###
#
# Update the ini files to remove tempDB
#
# Arguments:
#       _rm_tempdb_det_  details of the temDB to delete
# Return Values:
#       none
ini_remove_updates()
{
_rm_tempdb_det_="$1"
    #sym_links.ini remove
    $RM -rf ${TEM_SYM_LINKS}_new
    _rm_lun_symlink_=$($ECHO ${_rm_tempdb_det_} | $AWK -F"::" '{print $6}' | $SED -e 's/[[:blank:]]//g')
    if [ ! "${_rm_lun_symlink_}" ]; then
        _err_msg_="${_rm_lun_symlink_} not defined"
        abort_script "$_err_msg_"
    fi
    log_msg -s "Removing ${_rm_lun_symlink_} from sym_links.ini" -l ${LOGFILE}
    /usr/bin/perl ${INIDEL} -g DWH_DBSPACES_TEMP -p ${_rm_lun_symlink_} -i ${TEM_SYM_LINKS} -o ${TEM_SYM_LINKS}_new
    if [ $? -ne 0 ]; then
        _err_msg_="Error removing ${_rm_lun_symlink_} from ${TEM_SYM_LINKS}"
        abort_script "$_err_msg_"
    fi
    $MV ${TEM_SYM_LINKS}_new ${TEM_SYM_LINKS}
    if [ $? -ne 0 ]; then
    _err_msg_="Error moving ${TEM_SYM_LINKS}_new to ${TEM_SYM_LINKS}"
    abort_script "$_err_msg_"
    fi
	_raw_disk_=`iniget ${_rm_lun_symlink_} -f ${SYM_INI} -v Link`
	$CP ${UDEV_FILE}  ${TEM_DIR}/99-iq-raw-devs.rules 
	if [ $? -ne 0 ]; then
		_err_msg_="Could not update ${UDEV_FILE} file"
		abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
	fi

	_line_no=`$GREP -n "${_raw_disk_}" ${TEM_DIR}/99-iq-raw-devs.rules | $AWK -F":" '{print $1}'`
	$SED -i "${_line_no}d" ${TEM_DIR}/99-iq-raw-devs.rules
	
	$CP ${TEM_DIR}/99-iq-raw-devs.rules ${UDEV_FILE} 
	if [ $? -ne 0 ]; then
		_err_msg_="Could not update ${UDEV_FILE} file"
		abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
	fi
	#removed raw devices to be updated
$UDEVADM control --reload-rules
if [ $? -ne 0 ];then
    _err_msg_="Could not reload udev rules for raw device"
    abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi

$UDEVADM trigger --type=devices --action=change
if [ $? -ne 0 ];then
    _err_msg_="Could not trigger udev rules for raw devices"
    abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi

$RAW ${_raw_disk_} 0 0

}

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
# Directory on the root filesystem
ENIQ_BASE_DIR=/eniq

#Temp directory.
TEM=/tmp

# Admin Directory
ENIQ_ADMIN_DIR=${ENIQ_BASE_DIR}/admin
ENIQ_ADMIN_BIN_DIR=${ENIQ_BASE_DIR}/admin/bin

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# Main Directory for the Core Installation SW
ENIQ_CORE_INST_DIR=${ENIQ_INST_DIR}/core_install

# Config dir
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config
SYM_INI=${ENIQ_CONF_DIR}/${SYM_INI_FILE}
SYM_CO_INI=${ENIQ_CONF_DIR}/${SYM_CO_INI_FILE}
SYM_CO_INI_SW=${ENIQ_BASE_DIR}/sw/conf/${SYM_CO_INI_FILE}
LUNMAP_INI=${ENIQ_CONF_DIR}/${LUN_MAP_FILE}

# Set up Variable to hold network path to SW
if [ ! -s ${ENIQ_CORE_INST_DIR}/lib/iniadd.pl ]; then
    _err_msg_="Cannot locate ${ENIQ_CORE_INST_DIR}/lib/iniadd.pl"
    abort_script "$_err_msg_"
else
    INIADD=${ENIQ_CORE_INST_DIR}/lib/iniadd.pl
fi

if [ ! -s ${ENIQ_CORE_INST_DIR}/lib/inidel.pl ]; then
    _err_msg_="Cannot locate ${ENIQ_CORE_INST_DIR}/lib/inidel.pl"
    abort_script "$_err_msg_"
else
    INIDEL=${ENIQ_CORE_INST_DIR}/lib/inidel.pl
fi
# Source the common functions
if [ -s ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib
else
    _err_msg_="File /eniq/installation/core_install/lib/common_functions.lib not found"
    abort_script "$_err_msg_"
fi


if [ ! -f ${ENIQ_CONF_DIR}/${SUNOS_INI} ]; then
    _err_msg_="Unable to access ${SUNOS_INI} file. Exiting Script."
    abort_script "$_err_msg_";
fi

if [ ! -f ${ENIQ_INI} ]; then
    _err_msg_="Unable to access ${ENIQ_INI} file. Exiting Script."
    abort_script "$_err_msg_";
fi


# SAN plugin (e.g. clariion, vnx)
if [ -s ${ENIQ_CONF_DIR}/${SUNOS_INI} ]; then
    SAN_PLUGIN=`iniget SAN_DEV -f ${ENIQ_CONF_DIR}/${SUNOS_INI} -v SAN_DEVICE`
else
    if [ -s ${ENIQ_CONF_DIR}/san_details ]; then
        SAN_PLUGIN=`$CAT ${ENIQ_CONF_DIR}/san_details|$GREP "^SAN_DEVICE="|$AWK -F\= '{print $2}'`
    fi
fi

if [ ! "${SAN_PLUGIN}" ]; then
    _err_msg_="Could not get SAN_PLUGIN: could not read SAN_DEVICE param from ${ENIQ_CONF_DIR}/${SUNOS_INI} or ${ENIQ_CONF_DIR}/san_details"
    abort_script "$_err_msg_"
fi

# Set the Connect DB parameters

DWH_PORT=`iniget DWH -v PortNumber -f ${ENIQ_INI}`
DWH_ENG=`iniget DWH -v ServerName -f ${ENIQ_INI}`
MAINCACHE=`iniget DWH -v MainCache -f ${ENIQ_INI}`
TEMPCACHE=`iniget DWH -v TempCache -f ${ENIQ_INI}`
if [ ! "${DWH_PORT}" -o ! "${DWH_ENG}" -o ! "${MAINCACHE}" -o ! "${TEMPCACHE}"  ]; then
    _err_msg_="Could not read IQ values from ${ENIQ_INI}"
    abort_script "$_err_msg_"
fi

DBA_PASSWORD=`inigetpassword DB -f ${ENIQ_INI} -v DBAPassword`
if [ ! "${DBA_PASSWORD}" ]; then
    if [ -f ${ENIQ_BASE_DIR}/sw/installer/dbusers ]; then
        DBA_PASSWORD=`${ENIQ_BASE_DIR}/sw/installer/dbusers dba dwhrep`
        if [ ! "${DBA_PASSWORD}" ] ; then
            _err_msg_="Could not get dwhdb DBA Password"
            abort_script "$_err_msg_"
        fi
    else
        err_msg_="Could not get dwhdb DBA Password"
        abort_script "$_err_msg_"
    fi
fi


CONN_STR_USER_DBA="-c \"uid=dba;pwd=${DBA_PASSWORD};eng=${DWH_ENG};links=tcpip{host=${DWH_ENG};port=${DWH_PORT};dobroadcast=no;verify=no}\""
CONN_STR_USER_DBA_ENC=${TEM}/con_str_rm_encrypt.`uuidgen`

# encrypt the connection string.
get_encrypt_file "${CONN_STR_USER_DBA}" "${CONN_STR_USER_DBA_ENC}"


if [ ! -s ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh ]; then
    _err_msg_="Failed to locate ENIQ service manager script - ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh"
    abort_script "$_err_msg_"
fi
    
SYSUSER=`iniget ENIQ_INSTALL_CONFIG -f ${ENIQ_CONF_DIR}/${SUNOS_INI} -v ENIQ_SYSUSER`
if [ ! "${SYSUSER}" ]; then
    _err_msg_="Could not read System User from  ${ENIQ_CONF_DIR}/${SUNOS_INI}"
    abort_script "$_err_msg_"
fi

# Check required files and scripts exist
if [ ! -s ${CONF_DIR}/niq.rc ]; then
    _err_msg_="File ${CONF_DIR}/niq.rc not found, or is empty"
    abort_script "$_err_msg_"
else
    #$ECHO "Sourcing ${CONF_DIR}/niq.rc" 
    . ${CONF_DIR}/niq.rc
fi

LOG_DIR=${ENIQ_BASE_DIR}/local_logs/expansion
if [ ! "$LOGFILE" ] ; then
    LOGFILE=${LOG_DIR}/remove_temp_dbspaces_${TIMESTAMP}.log
fi

if [ ! -f "${ENIQ_CONF_DIR}/${BLK_STOR_INI}" ]; then
    _err_msg_="Unable to access ${ENIQ_CONF_DIR}/${BLK_STOR_INI}. Exiting Script."
    abort_script "$_err_msg_";
fi

if [ -z "${CONF_DIR}" ] ; then
    _err_msg_="Unable to access ${CONF_DIR}. Exiting Script."
    abort_script "$_err_msg_";
fi

if [ ! -f ${SYM_INI} ]; then
    _err_msg_="Unable to access ${SYM_INI}. Exiting Script."
    abort_script "$_err_msg_";
fi

if [ ! -f ${SYM_CO_INI} ]; then
    _err_msg_="Unable to access ${SYM_CO_INI}. Exiting Script."
    abort_script "$_err_msg_";
fi

if [ ! -f ${SYM_CO_INI_SW} ]; then
    _err_msg_="Unable to access ${SYM_CO_INI_SW}. Exiting Script."
    abort_script "$_err_msg_";
fi

if [ ! -f ${LUNMAP_INI} ]; then
    _err_msg_="${LUNMAP_INI} does not exists"
    abort_script "$_err_msg_"
fi

UDEV_FILE=/etc/udev/rules.d/99-iq-raw-devs.rules
if [ ! -f ${UDEV_FILE} ]; then
    _err_msg_="${UDEV_FILE} does not exists"
    abort_script "$_err_msg_"
fi

# Create a temporary Directory
TEM_DIR=/tmp/expansion.$$.$$
$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory $TEM_DIR"
    abort_script "$_err_msg_"
fi

#get dcuser env variables
$SU - ${SYSUSER} -c "$ENV |$EGREP '^(SYBASE|ASDIR|IQDIR|ASALOGDIR|SQLANY)'" > $TEM_DIR/sybase_det.$$
$CAT $TEM_DIR/sybase_det.$$ |$EGREP '^(SYBASE|ASDIR|IQDIR|ASALOGDIR|SQLANY)' > $TEM_DIR/sybase_det_var.$$
. $TEM_DIR/sybase_det_var.$$ >> /dev/null 2>&1


if [ -z "$IQDIR" ] ; then
    _err_msg_="ERROR: IQDIR is not set"
    abort_script "$_err_msg_" 
fi

PORT_PING=${ENIQ_CORE_INST_DIR}/lib/port_ping.pl
if [ ! -x $PORT_PING ]; then
    _err_msg_="$PORT_PING not found or not executable"
    abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi

}

### Function: usage_msg ###
#
# Usage
#
# Arguments:
#   none
# Return Values:
#   none
usage_msg()
{
$ECHO "
Usage: `$BASENAME $0` -c <conf dir> -d <niq.ini file> [-l <logfile>]

options:

-l : Optional parameter specifying what logfile to us

-c : Conf dir where niq.rc resides

-d : Path to the niq.ini file.
"
}

# ********************************************************************
#
#   Main body of program
#
# ********************************************************************
#
TIMESTAMP=`$DATE +%d.%m.%y_%H:%M:%S`

# Determine absolute path to software
get_absolute_path

while getopts ":c:d:l:" arg; do
    case $arg in
    c)  CONF_DIR="$OPTARG"
        ;;
    d)  ENIQ_INI="$OPTARG"
        ;;
    l)  LOGFILE="$OPTARG"
        ;;
    \?) usage_msg
    exit 1
    ;;
    esac
done
shift `expr $OPTIND - 1`

# Check that the effective id of the user is root
check_id

if [ ! "${CONF_DIR}" ]; then
    usage_msg
    exit 1
fi

if [ ! "${ENIQ_INI}" ]; then
    usage_msg
    exit 1
fi

# set up env
setup_env

chk_create_logfile

#make copies of ini files
$ECHO "TEMP dir used id ${TEM_DIR}" >> ${LOGFILE}
TEM_LUN_MAP=${TEM_DIR}/lun_map_tmp.ini
TEM_SYM_LINKS=${TEM_DIR}/sym_links_tmp.ini
REMOVE_TMP=${TEM_DIR}/removed_tempDB.txt

$CP ${LUNMAP_INI} ${TEM_LUN_MAP}
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to $CP ${LUNMAP_INI} ${TEM_LUN_MAP}"
fi
$CP ${SYM_INI} ${TEM_SYM_LINKS}
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to $CP ${SYM_INI} ${TEM_SYM_LINKS}"
fi

#Only working on the IQ_SYSTEM_TEMP in this script
DBSPACE=IQ_SYSTEM_TEMP

#get the disk allocated to tempDb files, this will need to be update when the tempDB are dropped
_tempdbdisks_=`iniget DB_DISK_ALLOC -f ${SYM_INI} -v TEMPDB_DISKS`
if [ ! "${_tempdbdisks_}" ]; then
    _err_msg_="Could not get DB_DISK_ALLOC value from ${SYM_INI}"
    abort_script "$_err_msg_"
fi
#get the LUN details for the server
_lun_map_list=`iniget LUN_MAP_DETAILS -f ${LUNMAP_INI}`
if [ ! "${_lun_map_list}" ]; then
    _err_msg_="Could not get LUN_MAP_DETAILS value from ${LUNMAP_INI}"
    abort_script "$_err_msg_"
fi
#get the tempDB's file sym_links
_dbfile_list_=`iniget DWH_DBSPACES_TEMP -f ${SYM_INI} | $SORT`
if [ ! "${_dbfile_list_}" ]; then
    _err_msg_="Could not find any temp dbspaces in ${SYM_INI}"
    abort_script "$_err_msg_"
fi
#Keep one tempDB on the coordinator
_tmpspace_keep_=`iniget DWH_DBSPACES_TEMP -f ${SYM_INI} | $SORT | $HEAD -1 | $SED -e 's/[[:blank:]]//g'`
if [ ! "${_tmpspace_keep_}" ]; then
    _err_msg_="Could not find any temp dbspaces in ${SYM_INI}"
    abort_script "$_err_msg_"
fi
#keep:lunid

for _tmpspace_ in ${_dbfile_list_}; do
    _dbfile_=`iniget ${_tmpspace_} -f ${SYM_INI} -v Path`
    if [ ! "${_dbfile_}" ]; then
        _err_msg_="Could not find get iniget ${_tmpspace_} -f ${SYM_INI} -v Path "
        abort_script "$_err_msg_"
    fi
    _lunid_=`iniget ${_tmpspace_} -f ${SYM_INI} -v Lun_ID`
    if [ ! "${_lunid_}" ]; then
        _err_msg_="Could not find get iniget ${_tmpspace_} -f ${SYM_INI} -v Lun_ID "
    abort_script "$_err_msg_"
    fi
    _dblink_=`iniget ${_tmpspace_} -f ${SYM_INI} -v Link`
    if [ ! "${_dblink_}" ]; then
        _err_msg_="Could not find get iniget ${_tmpspace_} -f ${SYM_INI} -v Link "
        abort_script "$_err_msg_"
    fi

    for _lun_map_detail_ in ${_lun_map_list}; do
        _lun_map_id_=`iniget ${_lun_map_detail_} -f  ${LUNMAP_INI} -v LUN_ID`
        if [ ! "${_lun_map_id_}" ]; then
            _err_msg_="Could not find get iniget ${_lun_map_detail_} -f  ${LUNMAP_INI} -v LUN_ID "
            abort_script "$_err_msg_"
        fi
        if [ "${_lun_map_id_}" == "${_lunid_}" ]; then
            _lun_map_disk_=`iniget ${_lun_map_detail_} -f  ${LUNMAP_INI} -v DISK_ID`
            if [ ! "${_lun_map_disk_}" ]; then
                _err_msg_="Could not find get iniget ${_lun_map_detail_} -f  ${LUNMAP_INI} -v DISK_ID "
                abort_script "$_err_msg_"
            fi
            _lun_map_desc_=`iniget ${_lun_map_detail_} -f  ${LUNMAP_INI} -v LUN_DESC`
            if [ ! "${_lun_map_desc_}" ]; then
                _err_msg_="Could not find get iniget ${_lun_map_detail_} -f  ${LUNMAP_INI} -v LUN_DESC "
                abort_script "$_err_msg_"
            fi
            _details_for_ref_="${_lunid_}::${_lun_map_desc_}::${_dbfile_}::${_lun_map_disk_}::${_dblink_}::${_tmpspace_}::${_lun_map_detail_}"
            if [ "${_tmpspace_}" != "${_tmpspace_keep_}" ]; then
                $ECHO "${_details_for_ref_}" >> ${REMOVE_TMP}
            elif [ "${_tmpspace_}" == "${_tmpspace_keep_}" ]; then
                _dbfilekeep_details=${_details_for_ref_}
                _dbfilekeep_=${_dbfile_}
            fi
        fi
    done


done

# Check values
if [ ! -s ${REMOVE_TMP} ]; then
    log_msg -s "No tmpDB's to delete, system currently only has one tmpDB in dwhdb" -l ${LOGFILE}
    $RM -rf ${TEM_DIR}
    exit 0
fi

if [ ! "${_dbfilekeep_}" ]; then
    _err_msg_="Could not get the tempDB to keep"
    abort_script "$_err_msg_"
fi
$ECHO "Remaining dbfile will be ${_dbfilekeep_} which is ${_tmpspace_keep_} in sym_links.ini"
# Ensure that the services are off line

log_msg -s "NOTE : Stopping ENIQ services." -l ${LOGFILE}
${BASH} ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh -a stop -s ALL -N -l ${LOGFILE}
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to start some ENIQ services, exiting...."
fi
#start dwhdb with tempDB empty 
dwhdb_notmp_start
#check that the remaining tempDB exists in sybase
$SU - ${SYSUSER} -c "${IQDIR}/bin64/dbisql @${CONN_STR_USER_DBA_ENC} \"select DBSpaceName, DBFileName, Path from sp_iqfile();OUTPUT TO ${TEM}/paths_of_temp_dbs_database.txt\"" > /dev/null 2>&1
$GREP ${DBSPACE} ${TEM}/paths_of_temp_dbs_database.txt | $GREP -wo ${_dbfilekeep_} > /dev/null 2>&1
if [ $? -ne 0 ]; then
    _err_msg_="${_dbfilekeep_} found in dwhdb should be removed"
    abort_script "$_err_msg_"
fi



#get the other dbfiles from sybase that have to be dropped
_tempdbfiles_=$( $GREP ${DBSPACE} ${TEM}/paths_of_temp_dbs_database.txt | $GREP -v ${_dbfilekeep_} | $CUT -f2,3 -d',' | $SORT)
if [ ! "${_tempdbfiles_}" ]; then
    _err_msg_="Could not get sp_iqfile sybase"
    abort_script "$_err_msg_"
fi
#loop through the tempdb to removed and remove them
for _tmpdb_ in ${_tempdbfiles_}; do
    _dwhdbtmp_=$($ECHO ${_tmpdb_} | $AWK -F"," '{print $2}' | $TR -d "''")
    if [ ! "${_dwhdbtmp_}" ]; then
        _err_msg_="Could not get _dwhdbtmp_"
        abort_script "$_err_msg_"
    fi
    _dbfilename_=$($ECHO ${_tmpdb_} | $AWK -F"," '{print $1}' | $TR -d "''")
    if [ ! "${_dbfilename_}" ]; then
        _err_msg_="Could not get _dbfilename_"
        abort_script "$_err_msg_"
    fi
    _rm_tempdb_det_=$($CAT ${REMOVE_TMP} | $GREP ${_dwhdbtmp_})
    if [ ! "${_rm_tempdb_det_}" ]; then
        _err_msg_="${_rm_tempdb_det_} not found in lun map or sym links"
        abort_script "$_err_msg_"
    fi
    #Sybase remove tempDB
    log_msg -s "Removing  dbfile ${_dbfilename_} ${_dwhdbtmp_} from ${DBSPACE}" -l ${LOGFILE}
    $ECHO "ALTER DBSPACE ${DBSPACE}" > ${ENIQ_ADMIN_DIR}/sql/remove_dbspace_file_${_dbfilename_}.sql
    $ECHO "DROP FILE ${_dbfilename_}" >> ${ENIQ_ADMIN_DIR}/sql/remove_dbspace_file_${_dbfilename_}.sql
    $SU - ${SYSUSER} -c "${IQDIR}/bin64/dbisql @${CONN_STR_USER_DBA_ENC} -q ${ENIQ_ADMIN_DIR}/sql/remove_dbspace_file_${_dbfilename_}.sql"
    if [ $? -ne 0 ]; then
        _err_msg_="Removing dbfile ${_dbfilename_} from  ${DBSPACE} failed"
        abort_script "$_err_msg_"
    fi
    log_msg -s "dbfile ${_dbfilename_} ${_dwhdbtmp_} from ${DBSPACE} with the following SQL" -l ${LOGFILE}
    $CAT ${ENIQ_ADMIN_DIR}/sql/remove_dbspace_file_${_dbfilename_}.sql | $TEE -a ${LOGFILE}
    check_db_removed ${_dwhdbtmp_}

    #layout of _rm_tempdb_det_ see variable _details_for_ref_
    _rm_tempdb_=$($ECHO ${_rm_tempdb_det_} | $AWK -F"::" '{print $3}' | $SED -e 's/[[:blank:]]//g')
    if [ ! "${_rm_tempdb_}" ]; then
        _err_msg_="${_rm_tempdb_} not defined"
        abort_script "$_err_msg_"
    fi
    #remove sym_link
    log_msg -s "Removing  sym_link '${_rm_tempdb_}'" -l ${LOGFILE}
    $LS ${_rm_tempdb_} >> /dev/null 2>&1 
    if [ $? -ne 0 ]; then
        _err_msg_="ERROR: Failed on $LS {_rm_tempdb_}"
        abort_script "$_err_msg_"
    fi
    $RM -rf ${_rm_tempdb_}
    if [ $? -ne 0 ]; then
        _err_msg_="ERROR: Failed on $RM ${_rm_tempdb_}"
        abort_script "$_err_msg_"
    fi
    #remove reference in sym_links.ini 
    ini_remove_updates "${_rm_tempdb_det_}"

done

#update the sym_link with disk
_rm_disk_symlink_=$($ECHO ${_dbfilekeep_details} | $AWK -F"::" '{print $4}' | $SED -e 's/[[:blank:]]//g')
if [ ! "${_rm_disk_symlink_}" ]; then
    _err_msg_="${_rm_disk_symlink_} not defined"
    abort_script "$_err_msg_"
fi
iniset DB_DISK_ALLOC -f ${TEM_SYM_LINKS}  TEMPDB_DISKS=${_rm_disk_symlink_}
if [ $? -ne 0 ]; then
    _err_msg_="ERROR: Failed on iniset DB_DISK_ALLOC -f ${TEM_SYM_LINKS}  TEMPDB_DISKS=${_rm_disk_symlink_} "
    abort_script "$_err_msg_"
fi

$CP ${LUNMAP_INI} ${LUNMAP_INI}_bkup.$$.${TIMESTAMP}
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to ${LUNMAP_INI} ${LUNMAP_INI}_bkup.$$.${TIMESTAMP}}"
fi
$CP ${SYM_INI} ${SYM_INI}_bkup.$$.${TIMESTAMP}
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to $CP ${SYM_INI} ${SYM_INI}_bkup.$$.${TIMESTAMP}"
fi
$CP ${SYM_CO_INI} ${SYM_CO_INI}_bkup.$$.${TIMESTAMP}
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to $CP ${SYM_CO_INI} ${SYM_CO_INI}_bkup.$$.${TIMESTAMP}"
fi
$CP ${SYM_CO_INI_SW} ${SYM_CO_INI_SW}_bkup.$$.${TIMESTAMP}
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to ${SYM_CO_INI_SW} ${SYM_CO_INI_SW}_bkup.$$.${TIMESTAMP}"
fi
$CP ${TEM_SYM_LINKS} ${SYM_INI}
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to $CP ${TEM_SYM_LINKS} ${SYM_INI}"
fi
$CP ${TEM_SYM_LINKS} ${SYM_CO_INI}
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to $CP ${TEM_SYM_LINKS} ${SYM_CO_INI}"
fi
$CP ${TEM_SYM_LINKS} ${SYM_CO_INI_SW}
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to $CP ${TEM_SYM_LINKS} ${SYM_CO_INI_SW}"
fi
$CP ${TEM_LUN_MAP} ${LUNMAP_INI}
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to $CP ${TEM_LUN_MAP} ${LUNMAP_INI}"
fi
$CAT ${REMOVE_TMP} >> ${LOGFILE}
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to $CAT ${REMOVE_TMP} to ${LOGFILE}"
fi
log_msg -s "Following Luns are no longer used as tempdb's" -l ${LOGFILE}
$CAT ${REMOVE_TMP} | $AWK -F"::" '{print $1,"     ",$2}' | $TEE -a ${LOGFILE}
$CP ${REMOVE_TMP} ${LOG_DIR}/tempdb_removed_${TIMESTAMP}.txt
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to $CAT ${REMOVE_TMP} to ${LOGFILE}"
fi

_removed_Tempdb_=`$CAT ${LOG_DIR}/tempdb_removed_${TIMESTAMP}.txt | $AWK -F "::" '{print $1}' | $TR '\n' '|' | $SED 's/|$/\n/'`
if [[ $? -ne 0 ]]; then
    abort_script "ERROR : Failed to get removed luns from ${LOG_DIR}/tempdb_removed_${TIMESTAMP}.txt"
fi

#To update block_storage.ini after removal of Tempdb

update_block_storage_ini "remove" "${_removed_Tempdb_}"

##################################################
# Have to move the ini files still on tmp's
##################################################

dwhdb_stop
if [ $? -ne 0 ]; then
    dwh_stop_flag=1
    abort_script
fi


log_msg -s "Successfully reduced the number of tmpDb to one for dwhdb" -l ${LOGFILE}
$RM -rf ${TEM_DIR}
$RM -rf ${CONN_STR_USER_DBA_ENC}
exit 0