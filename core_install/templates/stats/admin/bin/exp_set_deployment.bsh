#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2012 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : exp_set_deployment.bsh
# Date    : 23/09/2022
# Revision: F
# Purpose : Changes the deployment 
#
# Usage   : exp_set_deployment.bsh
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************

AWK=/usr/bin/awk
CAT=/usr/bin/cat
CP=/usr/bin/cp
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO='/usr/bin/echo -e'
ENV=/usr/bin/env
EGREP=/usr/bin/egrep
GREP=/usr/bin/grep
ID=/usr/bin/id
LS=/usr/bin/ls
MKDIR=/usr/bin/mkdir
PWD=/usr/bin/pwd
RM=/usr/bin/rm
SED=/usr/bin/sed
SUDO=/usr/bin/sudo
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch


# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************

# Default user
DEFAULT_USER=root

# ********************************************************************
#
#   Functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
    _err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

    if [ "$1" ]; then
        _err_msg_="${_err_time_} - $1"
    else
        _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
    fi

    if [ "${LOGFILE}" ]; then
        $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
    else
        $ECHO "\nERROR : ${_err_msg_}\n"
    fi

    if [ -s ${TEM_DIR} ]; then        
        $RM -rf ${TEM_DIR}
    fi
      exit 1
}

### Function: chk_create_logfile ###
#
# Check/Create Logfile
#
# Arguments:
#   none
# Return Values:
#   none
chk_create_logfile()
{
    if [ "${LOGFILE}" ] ;then
        $MKDIR -p `$DIRNAME ${LOGFILE}`
        if [ $? -ne 0 ]; then
            _err_msg_="Could not create directory `$DIRNAME ${LOGFILE}`"
            abort_script "${_err_msg_}"
        fi

        $TOUCH -a ${LOGFILE}
        if [ $? -ne 0 ]; then
            _err_msg_="Could not write to file ${LOGFILE}"
            abort_script "${_err_msg_}"
        fi
    fi
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
 _get_id_=`$ENV |$GREP -w SUDO_USER | $EGREP "^[[:blank:]]*SUDO_USER="|$AWK -F\= '{print $2}'|$SED -e 's|"||g'`

_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

_check_group_=`$ID $_get_id_ | $AWK -F\( '{print $3}' | $AWK -F\) '{print $1}'`


    if [ "${_get_id_}" == "" ]; then

        if [ "${_check_id_}" == "root" ]; then
           # Set 1 for true
           _user_root=1

        else
           _err_msg_="You must be root or admin to execute this script."
           abort_script "${_err_msg_}"
        fi
          else
            if [ "${_check_group_}" == "ENIQ_ADMIN_ROLE" ]; then
               # Set 0 for false
               _user_root=0

            else
               _err_msg_="You must be root or admin to execute this script." 
               abort_script "${_err_msg_}"
            fi
    fi
 
}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
get_absolute_path()
{
    _dir_=`$DIRNAME $0`
    SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}
### Function: setup_env ###
#
# Set up some setup_env
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
if [ ! "${LOGFILE}" ] ;then
    LOGFILE=/eniq/local_logs/expansion/set_deployment.log
fi
ENIQ_BASE_DIR=/eniq
# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation
ENIQ_CONF_DIR=${ENIQ_BASE_DIR}/installation/config


TEM_DIR=/tmp/expansion.$$.$$
$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory $TEM_DIR"
    abort_script "${_err_msg_}"
fi
# File containing the type of OSS installation. Eg. oss or single
INST_TYPE_FILE=${ENIQ_CONF_DIR}/ericsson_use_config
# Read the installation type
INSTALL_TYPE=`$CAT ${INST_TYPE_FILE} | $AWK -F\= '{print $2}'`
if [ ! "${INSTALL_TYPE}" ]; then
    _err_msg_="Could not find get INSTALL_TYPE "
    abort_script "${_err_msg_}"
fi
if [ "${INSTALL_TYPE}" != "stats" ]; then
    _err_msg_="This script can be only ran for eniq stats"
    abort_script "${_err_msg_}"
fi

}
### Function: select_storage_ini ###
#
# Selects the correct storage_ini file depending on
# deployment type
# GLO
# Arguments:
#   none
# Return Values:
#   none
set_deployment()
{
    # Has the user specified deployment=
if [ -s ${ENIQ_CONF_DIR}/extra_params/deployment ]; then
    $CP ${ENIQ_CONF_DIR}/extra_params/deployment ${ENIQ_CONF_DIR}/backup/deployment.$RUN_TIME
    if [ $? -ne 0 ]; then
        _err_msg_="failed to copy ${ENIQ_CONF_DIR}/extra_params/deployment ${ENIQ_CONF_DIR}/backup/deployment.$RUN_TIME"
        abort_script "${_err_msg_}"
    fi
    if [ ! -s ${ENIQ_CONF_DIR}/deployment.bkp ]; then
        $CP ${ENIQ_CONF_DIR}/extra_params/deployment ${ENIQ_CONF_DIR}/deployment.bkp
        if [ $? -ne 0 ]; then
            _err_msg_="failed to copy ${ENIQ_CONF_DIR}/extra_params/deployment ${ENIQ_CONF_DIR}/deployment.bkp"
            abort_script "${_err_msg_}"
        fi
    fi
fi
while :; do
    $ECHO "\nSelect the number for the deployment type to be configured:" | $TEE -a ${LOGFILE}
    $ECHO "\n1. large" | $TEE -a ${LOGFILE}
    $ECHO "\n2. extralarge" | $TEE -a ${LOGFILE}
    $ECHO "\nchoice:"
    read _ans_
    if [ ! "${_ans_}" ]; then
        continue
    fi
    
    if [ "${_ans_}" != "1" -a "${_ans_}" != "2" ]; then
    $ECHO "\nInvalid choice, Please select correct option:"
    continue
    fi
    
    if [ "${_ans_}" == "1" ]; then
        DEPLOYMENT="large"
        $ECHO "\n-------------------------------------------------------" | $TEE -a ${LOGFILE}
        $ECHO "Setting deployment type to $DEPLOYMENT" | $TEE -a ${LOGFILE}
        $ECHO "-------------------------------------------------------\n\n" | $TEE -a ${LOGFILE}
        $ECHO "${DEPLOYMENT}" >${ENIQ_CONF_DIR}/extra_params/deployment
        if [ $? -eq 0 ]; then
            $ECHO "Script successfully executed" | $TEE -a ${LOGFILE}
        else
            err_msg_="Failed to update ${DEPLOYMENT} in ${ENIQ_CONF_DIR}/extra_params/deployment"
            abort_script "${_err_msg_}"
        fi
        break
        
    elif [ "${_ans_}" == "2" ]; then
        DEPLOYMENT="extralarge"
        $ECHO "\n-------------------------------------------------------" | $TEE -a ${LOGFILE}
        $ECHO "Setting deployment type to $DEPLOYMENT" | $TEE -a ${LOGFILE}
        $ECHO "-------------------------------------------------------\n\n" | $TEE -a ${LOGFILE}
        $ECHO "${DEPLOYMENT}" >${ENIQ_CONF_DIR}/extra_params/deployment
        if [ $? -eq 0 ]; then
            $ECHO "Script successfully executed" | $TEE -a ${LOGFILE}
        else
            err_msg_="Failed to update ${DEPLOYMENT} in ${ENIQ_CONF_DIR}/extra_params/deployment"
            abort_script "${_err_msg_}"
        fi
        break
    fi
done
}

# ********************************************************************
#
#   Main body of program
#
# ********************************************************************

RUN_TIME=`$DATE '+%Y-%b-%d_%H.%M.%S'`

# Determine absolute path to software
get_absolute_path

# Check that the effective id of the user is root
check_id

while getopts "l" arg; do
  case ${arg} in
    l) LOGFILE="$OPTARG"
           ;;
  esac
done
shift `expr $OPTIND - 1`

setup_env

chk_create_logfile

set_deployment

