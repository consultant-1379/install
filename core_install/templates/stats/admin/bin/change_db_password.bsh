#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2022 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : change_db_password.bsh
# Date    : 01/09/2022
# Revision: main\26
# Purpose : This script will change the Database password for the
#             supplied user.
#
# Usage   : change_db_password.bsh -u <UserName> [ -l <path_to_logfile> ]
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
BASH=/usr/bin/bash
CAT=/usr/bin/cat
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO='/usr/bin/echo -e'
EGREP=/usr/bin/egrep
GREP=/usr/bin/grep
GETENT=/usr/bin/getent
HEAD=/usr/bin/head
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
MYHOSTNAME=/usr/bin/hostname
OPENSSL=/usr/bin/openssl
PERL=/usr/bin/perl
PRINTF=/usr/bin/printf
RM=/usr/bin/rm
SED=/usr/bin/sed
STTY=/usr/bin/stty
SU=/usr/bin/su
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch

# ********************************************************************
#
#       Global Variables
#
# ********************************************************************

ERROR_MESSAGE="ERROR: PASSWORD CHANGE FAILED...!!!"
SUCCESS_MESSAGE="PASSWORD CHANGE SUCCESSFUL..."
CHANGE_PASSWORD_ATTEMPT_COUNT=0

# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************
# Name of SunOS & ENIQ ini Files
ENIQ_ENV=niq.rc
ENIQ_INI=niq.ini
SUNOS_INI=SunOS.ini

# ********************************************************************
#
#       Functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This will is called if the script is aborted through an error
#   signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
remove_lock_file
if [ "$1" ]; then
    _err_msg_=$1
else
    _err_msg_="Script aborted.......\n"
fi
if [ "${LOGFILE}" ]; then
    $ECHO "\n$_err_msg_\n"|$TEE -a ${LOGFILE}
else
    $ECHO "\n$_err_msg_\n"
fi

cd $SCRIPTHOME
$RM -rf ${TEM_DIR}
$RM -rf ${REP_CONN_STR_USER_DBA_ENC}
$RM -rf ${DWH_CONN_STR_USER_DBA_ENC}
$RM -rf ${DWH_CONN_STR_USER_PIN_ENC}
exit 1
}

### Function: check_file_presence ###
#
# Checks if lock file is present
#
# Arguments:
#        $1 - File Name
# Return Values: none
check_file_presence()
{
        IS_FILE_PRESENT=0
        fileName=$1
        if [ -r $fileName ]
        then
                IS_FILE_PRESENT=1
        fi

        if [ $IS_FILE_PRESENT -eq 1 ]
        then
                $ECHO "\n$($DATE '+%Y-%b-%d_%H.%M.%S'): One instance of this process is already running. Hence aborting."
                exit 3
        else
                $TOUCH $LOCK_FILE
                if [ $? -ne 0 ]; then
                    _err_msg_="Could not write to file $LOCK_FILE"
                    abort_script "$_err_msg_"
                fi
        fi
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "$_check_id_" != "$1" ]; then
    _err_msg_="$($DATE '+%Y-%b-%d_%H.%M.%S'):  You must be $1 to execute the script $0."
    abort_script "$_err_msg_"
fi
}

### Function: check_server_running ###
#
# Checks to see if the required server is running (dwhdb, repdb)
#
# Arguments:
#
# Return Values:
#       none
check_server_running()
{
SERVER_STATUS=1
if [ "${1}" == "repdb" ]
then
    port=${REP_PORT}
else
    port=${DWH_PORT}
fi

#Initialising the connection string
DWH_CONN_STR_USER_PIN="-q -c \"con=${1};eng=${1};links=tcpip{host=${1};port=${port};dobroadcast=none;verify=no};uid=dba;pwd=${DBA_PASSWORD}\""
DWH_CONN_STR_USER_PIN_ENC=${TEM_DIR}/dwh_conn_str_encrypt_dbping.txt.$$

# encrypt the connection string.
get_encrypt_file "${DWH_CONN_STR_USER_PIN}" "${DWH_CONN_STR_USER_PIN_ENC}"

# Check if server is up
${IQDIR}/bin64/dbping @${DWH_CONN_STR_USER_PIN_ENC} 2>>${LOGFILE} 1>/dev/null
if [ $? -ne 0 ] ; then
    SERVER_STATUS=0
    log_msg -t -s "$1 is not running, aborting." -l ${LOGFILE}
    password_rollback
fi
}

### Function: check_password_history ###
#
# check if the password entered for a user is identical to previous five password
#
# Arguments: none
#
# Return Values: none
check_password_history()
{

pwd_hist_chk=`$DBISQL -nogui @${REP_CONN_STR_USER_DBA_ENC} "select count() from dba.IQ_UserPwd_History where password='${new_user_pwd_enc}' and user_name='${user}'" | $AWK 'NR==3{print$1}'`
if [ $pwd_hist_chk -ne 0 ]; then
    let CHANGE_PASSWORD_ATTEMPT_COUNT=CHANGE_PASSWORD_ATTEMPT_COUNT+1
    while [ $CHANGE_PASSWORD_ATTEMPT_COUNT -lt 5 ]
    do
        $ECHO "-e \n$($DATE '+%Y-%b-%d_%H.%M.%S'): Your password cannot be same as the previous five password."
        user_pwd_change
        pwd_hist_chk=`$DBISQL -nogui @${REP_CONN_STR_USER_DBA_ENC} "select count() from dba.IQ_UserPwd_History where password='${new_user_pwd_enc}' and user_name='${user}'" | $AWK 'NR==3{print$1}'`
        if [ $pwd_hist_chk -eq 0 ]; then
             break
        fi
    done
fi

if [ $CHANGE_PASSWORD_ATTEMPT_COUNT -eq 5 ]; then
     _err_msg_="$($DATE '+%Y-%b-%d_%H.%M.%S'): You have exhausted maximum number of attempts to change the password for '${user}' user "
     abort_script "$_err_msg_"
fi
}

### Function: check_user_password ###
#
# Validates the current password of the user
# during password change
#
# Arguments: none
#
# Return Values: none
check_user_password()
{
    unset _curr_user_pwd_

    log_msg -s "\nEnter the current password for ${user} user : \c " -l ${LOGFILE}
    read -s _curr_user_pwd_

    if [ "${_curr_user_pwd_}" != "${CURR_PASS}" ]; then
        _err_msg_="$($DATE '+%Y-%b-%d_%H.%M.%S'): Aborting as the ${user} password entered does not match the recorded ${user} password."
        abort_script "$_err_msg_"
    fi
    $ECHO ''
}

### Function: chk_create_logfile ###
#
# Check/Create Logfile
#
# Arguments:
#   none
# Return Values:
#   none
chk_create_logfile()
{

if [ ! "${LOGFILE}" ]; then
    LOGFILE=${ENIQ_BASE_DIR}/log/sw_log/iq/change_db_password_$($DATE '+%Y-%b-%d_%H.%M.%S').log
fi

$MKDIR -p `$DIRNAME ${LOGFILE}`
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory `$DIRNAME ${LOGFILE}`"
     abort_script "$_err_msg_"
fi

$TOUCH -a ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not write to file ${LOGFILE}"
    abort_script "$_err_msg_"
fi
}

### Function: clear ###
#
# To clear the screen
#
# Arguments:
#   none
# Return Values:
#   none
clear()
{

# Clearing the screen without removing scrollback buffer
$PRINTF '\33[H\33[2J'

}

### Function: control_c_invoked ###
#
# Run if user hits control-c
#
#
# Arguments: none
#
# Return Values: none
control_c_invoked()
{
    if [ "$PASSWORD_STAGE" == "updating" ]; then
        if [ -z "$PASSWORD_ROLLBACK_CALL" ]; then
            if [[ -n "${FILES_TO_REVERT}" && ${FILES_TO_REVERT} -ne 0 ]]; then
                password_rollback
            else
                log_msg -t -s "Failed to update the password." -l ${LOGFILE}
                abort_script "$ERROR_MESSAGE"
            fi
        else
            log_msg -t -s "Failed to rollback the password correctly. Contact Ericsson Support." -l ${LOGFILE}
        fi
    fi

    remove_lock_file

    $RM -rf ${TEM_DIR}
    # reset the terminal settings to default configuration
    $STTY "sane"
    exit 13
}

### Function: get_deployment_order ###
#
# Get the order of the deployment
# for performing required functionality based on action type
#
# Arguments: none
#
# Return Values: none
get_deployment_order()
{
$RM -rf ${TEM_DIR}/server_order_list ${TEM_DIR}/encryption_order

# Get an ordered list of servers based on the server_list file
$PERL ${ENIQ_CORE_INST_DIR}/lib/get_ip_order.pl -f ${TEM_DIR}/encryption_order
if [ $? -ne 0 ]; then
    _err_msg_="Could not get an ordered list of servers"
    abort_script "${_err_msg_}"
fi
}

### Function: password_rollback ###
#
#   Reverts the password to its previous consistent state in case of any failure
#
# Arguments:
#   none
# Return Values:
#   none
password_rollback()
{

if [ "${user}" == "DBA" ]; then
    if [[ -n "${IQ_STATUS}" && ${IQ_STATUS} -eq 1 ]] || [[ -n "${ASA_STATUS}" && ${ASA_STATUS} -eq 1 ]]; then
   
    # removing the old connection strings
    $RM -rf ${TEM_DIR}/dwh_conn_str_encrypt.txt.*
    
    #Initialising the connection string
    DWH_CONN_STR_USER_DBA="eng=${DWH_NAME};links=tcpip{host=${DWH_NAME};port=${DWH_PORT}};uid=dba;pwd=${new_user_pwd}"
    DWH_CONN_STR_USER_DBA_ENC=${TEM_DIR}/dwh_conn_str_encrypt.txt.$$

    # encrypt the connection string.
    get_encrypt_file "${DWH_CONN_STR_USER_DBA}" "${DWH_CONN_STR_USER_DBA_ENC}"
    fi
fi

if [[ -z "$PASSWORD_ROLLBACK_CALL" ]]; then
        PASSWORD_ROLLBACK_CALL=1
else
        log_msg -t -s "Failed to rollback the password correctly. Contact Ericsson Support." -l ${LOGFILE}
        _err_msg_="PASSWORD ROLLBACK FAILED...!!!"
        abort_script "$_err_msg_"
fi

log_msg -s "\n$ERROR_MESSAGE\n" -l ${LOGFILE}
log_msg -t -s "Failed to update the password. Reverting password for ${user} user." -l ${LOGFILE}

new_user_pwd=${CURR_PASS}
ENCRYPT=${CURR_ENCRYPTION}

if [[ -n "${FILES_TO_REVERT}" && ${FILES_TO_REVERT} -ne 0 ]]; then
        update_password_niq
fi

if [[ -n "${DWHDB_RUNNING}" && ${DWHDB_RUNNING} -eq 1 && -n "${IQ_STATUS}" && ${IQ_STATUS} -eq 1 ]]; then
        update_password_iq
fi

if [[ -n "${REPDB_RUNNING}" && ${REPDB_RUNNING} -eq 1 && -n "${ASA_STATUS}" && ${ASA_STATUS} -ne 0 ]]; then
        update_password_asa
fi

log_msg -s "\nFailed to change the password for ${user} user." -l ${LOGFILE}
remove_lock_file
exit 0
}


### Function: password_rollback_repdb ###
#
#   Reverts the password to its previous consistent state in case of any failure for RepDB
#
# Arguments:
#   none
# Return Values:
#   none
password_rollback_repdb()
{
local CLI_CONF_DIR=/eniq/sw/conf
local ENIQ_INI=niq.ini
local ENIQ_CONF_DIR=/eniq/installation/config
local ENIQ_SW_PF_DIR=/eniq/sw/platform
local ENIQ_SW=/eniq/sw
local _sysuser_

_revert_user_=${1}
if [ ! "${1}" ]; then
    _err_msg_="Failed to get the ${1}"
    abort_script "$_err_msg_"
fi

_sysuser_=`iniget ENIQ_INSTALL_CONFIG -f ${ENIQ_CONF_DIR}/SunOS.ini -v ENIQ_SYSUSER`
R_STATE=`${CAT} ${ENIQ_SW}/installer/versiondb.properties | ${GREP} -w repository | ${AWK} -F "=" '{print $2}'`


if [ "${_revert_user_}" == "DWHREP" ];then
    #Only dwhrep password fail to set for login, hence updating old passwd in repdb meta_databases for dwhrep
    $SU - ${_sysuser_} -c "$BASH ${ENIQ_SW_PF_DIR}/repository-${R_STATE}/bin/ChangeUserPasswordsInRepdb -u ${_revert_user_} -o ${new_user_pwd} -p ${CURR_PASS} -r ${CURR_PASS}"
    if [ $? -ne 0 ]; then
        _err_msg_="Failed to set password of ${_revert_user_} in REPDB meta.database"
        ${RM} -rf ${CLI_CONF_DIR}/ETLCServer.properties_bkp
        abort_script "$_err_msg_"
    fi
    log_msg -t -s "Successfully reverted ${_revert_user_} password in Repdb" -l ${LOGFILE}
elif [ "${_revert_user_}" == "ETLREP" ];then

    #reverting ETLCServer file backup for reexecution process
    $SU - ${_sysuser_} -c "$CP ${CLI_CONF_DIR}/ETLCServer.properties_bkp ${CLI_CONF_DIR}/ETLCServer.properties"

    #reverting old in repdb meta_databases for etlrep
    $SU - ${_sysuser_} -c "$BASH ${ENIQ_SW_PF_DIR}/repository-${R_STATE}/bin/ChangeUserPasswordsInRepdb -u ${_revert_user_} -o ${new_user_pwd} -p ${CURR_PASS} -r ${CURR_PASS}"
    if [ $? -ne 0 ]; then
        _err_msg_="Failed to set password of ${_revert_user_} in REPDB meta.database"
        ${RM} -rf ${CLI_CONF_DIR}/ETLCServer.properties_bkp
        abort_script "$_err_msg_"
    fi
    log_msg -t -s "Successfully reverted ${_revert_user_} password in Repdb" -l ${LOGFILE}
fi

log_msg -t -s "Updating new password for ${_revert_user_} failed. Old password is reverted successfully. " -l ${LOGFILE}
${RM} -rf ${LOCK_FILE}
${RM} -rf ${CLI_CONF_DIR}/ETLCServer.properties_bkp
exit 1
}

### Function: remove_lock_file ###
#
# Removes/Deletes lock file once the script terminates
#
# Arguments: none
#
# Return Values: none
remove_lock_file()
{
        if [ -f $LOCK_FILE ]; then
            $RM -rf $LOCK_FILE 2>&1 > /dev/null
            if [ -f "$LOCK_FILE" ]; then
                log_msg -t -s "\nFailed to delete lock file $LOCK_FILE." -l ${LOGFILE}
            fi
        fi
}

### Function: rules ###
#
# Rules defined to change the password
#
# Arguments: none
#
# Return Values: none
rules()
{

if [ "${user}" == "ETLREP" ] || [ "${user}" == "DWHREP" ];then
    $ECHO "Password Policies:
    
    ** Minimum password length 5 characters.
    ** Maximum password length 30 characters.
    ** All alphanumeric characters allowed.
    ** The following special characters are allowed # % ~ _ + @ : * = { } , .
    ** Must contain an uppercase letter, a lowercase letter, a number and a special character.
    ** No spaces allowed.
    "
else
    $ECHO "Password Policies:
    
    ** Minimum password length 5 characters.
    ** Maximum password length 30 characters.
    ** All alphanumeric characters allowed.
    ** The following special characters are allowed # % ~ _ + @ : ! * = { } , . /
    ** Must contain an uppercase letter, a lowercase letter, a number and a special character.
    ** No spaces allowed.
    "
fi
}

### Function: setup_env ###
#
# Setup up path environment etc
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
if [ ! "${ENIQ_BASE_DIR}" ]; then
    ENIQ_BASE_DIR=/eniq
fi

ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation
ENIQ_CORE_INST_DIR=${ENIQ_INST_DIR}/core_install

# CLI Conf dir
CLI_CONF_DIR=${ENIQ_BASE_DIR}/sw/conf
if [ ! -s ${CLI_CONF_DIR}/${ENIQ_ENV} ]; then
    _err_msg_="Could not locate file ${CLI_CONF_DIR}/${ENIQ_ENV}"
    abort_script "$_err_msg_"
fi
if [ ! -s ${CLI_CONF_DIR}/${ENIQ_ENV} ]; then
    _err_msg_="Could not locate file ${CLI_CONF_DIR}/${ENIQ_ENV}"
    abort_script "$_err_msg_"
else
    . ${CLI_CONF_DIR}/niq.rc
fi

# Hostname Information
HNAME=`${MYHOSTNAME}`
HOST_IP=`$GETENT hosts ${HNAME} | $AWK '{print $1}' | $HEAD -1`

ENIQ_CONF_DIR=${ENIQ_BASE_DIR}/installation/config
if [ ! -s ${ENIQ_CONF_DIR}/ericsson_use_config ]; then
    _err_msg_="Could not locate file ${ENIQ_CONF_DIR}/ericsson_use_config"
    abort_script "$_err_msg_"
fi

ENIQ_SW_DIR=${ENIQ_BASE_DIR}/sw
LOCK_FILE=${ENIQ_SW_DIR}/installer/.dbpasslock.tmp

# Temporary Directory
TMP=/tmp
TEM_DIR=$TMP/change_db_password.$$.$$
if [ ! -d "$TMP" ]; then
    $MKDIR -p ${TMP}
    if [ $? -ne 0 ]; then
        _err_msg_="Could not create directory $TMP"
        abort_script "${_err_msg_}"
    fi
fi

$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory $TEM_DIR"
    abort_script "${_err_msg_}"
fi

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation/core_install

CURR_SERVER_TYPE=`$CAT $ENIQ_CONF_DIR/installed_server_type | $EGREP -v '^[[:blank:]]*#' | $SED -e 's/ //g'`
if [ ! "${CURR_SERVER_TYPE}" ]; then
    _err_msg_="Could not determine which server type this is"
    abort_script "$_err_msg_"
fi

if [ ! -s $ENIQ_INST_DIR/lib/common_functions.lib ]; then
    _err_msg_="Cannot locate $ENIQ_INST_DIR/lib/common_functions.lib"
    abort_script "$_err_msg_"
else
   . $ENIQ_INST_DIR/lib/common_functions.lib
fi

# Source the environment
if [ ! -s $ENIQ_BASE_DIR/sybase_iq/IQ-*/IQ-*.sh ]; then
    _err_msg_="Cannot source IQ libaries and binaries."
    abort_script "$_err_msg_"
else
   . $ENIQ_BASE_DIR/sybase_iq/IQ-*/IQ-*.sh >> /dev/null 2>&1
fi

# Software bin directory
ENIQ_SW_BIN=${ENIQ_BASE_DIR}/sw/bin
if [ ! -s ${ENIQ_SW_BIN}/ChangeUserPasswordsInRepdb ]; then
    _err_msg_="Cannot locate ${ENIQ_SW_BIN}/ChangeUserPasswordsInRepdb"
    abort_script "$_err_msg_"
fi

if [ ! "${SYBASE}" ]; then
    _err_msg_="Could not determine Sybase environment variable \${SYBASE}"
    abort_script "$_err_msg_"
fi

DBISQL="$(ls /eniq/sybase_iq/IQ-*/bin64/dbisql)"
if [ ! -x "$DBISQL" ]; then
    _err_msg_="$DBISQL commands not found or not executable."
    abort_script "$_err_msg_"
fi

DWH_PORT=`iniget DWH -v PortNumber -f ${CLI_CONF_DIR}/${ENIQ_INI}`
DWH_NAME=`iniget DWH -v ServerName -f ${CLI_CONF_DIR}/${ENIQ_INI}`
if [ ! "${DWH_PORT}" -o ! "${DWH_NAME}" ]; then
    _err_msg_="Could not read DB values from ${ENIQ_INI}"
    abort_script "$_err_msg_"
fi

DBA_PASSWORD=`inigetpassword DB -f ${CLI_CONF_DIR}/${ENIQ_INI} -v DBAPassword`
if [ ! ${DBA_PASSWORD} ]; then
    if [ -f ${ENIQ_BASE_DIR}/sw/installer/dbusers ]; then
        DBA_PASSWORD=`${ENIQ_BASE_DIR}/sw/installer/dbusers dba dwh`
        if [ ! "${DBA_PASSWORD}" ] ; then
            _err_msg_="`$DATE +%d.%m.%y_%H:%M:%S` - Could not get dwhdb DBA Password"
            abort_script "$_err_msg_"
        fi
    else
        err_msg_="`$DATE +%d.%m.%y_%H:%M:%S` - Could not get dwhdb DBA Password"
        abort_script "$_err_msg_"
    fi
fi



DWH_CONN_STR_USER_DBA="-c \"eng=${DWH_NAME};links=tcpip{host=${DWH_NAME};port=${DWH_PORT}};uid=dba;pwd=${DBA_PASSWORD}\""
DWH_CONN_STR_USER_DBA_ENC=${TEM_DIR}/dwh_change_db_conn_str_encrypt.txt.`uuidgen`
		
# encrypt the connection string.
get_encrypt_file "${DWH_CONN_STR_USER_DBA}" "${DWH_CONN_STR_USER_DBA_ENC}"

REP_PORT=`iniget REP -v PortNumber -f ${CLI_CONF_DIR}/${ENIQ_INI}`
REP_NAME=`iniget REP -v ServerName -f ${CLI_CONF_DIR}/${ENIQ_INI}`
if [ ! "${REP_PORT}" -o ! "${REP_NAME}" ]; then
    _err_msg_="Could not read REP values from ${ENIQ_INI}"
    abort_script "$_err_msg_"
fi



REP_CONN_STR_USER_DBA="-c \"uid=dba;pwd=${DBA_PASSWORD};eng=${REP_NAME};links=tcpip{host=${REP_NAME};port=${REP_PORT};dobroadcast=no;verify=no}\""
REP_CONN_STR_USER_DBA_ENC=${TEM_DIR}/rep_change_db_conn_str_encrypt.txt.`uuidgen`

# encrypt the connection string.
get_encrypt_file "${REP_CONN_STR_USER_DBA}" "${REP_CONN_STR_USER_DBA_ENC}"


# Get current server type
CURR_SERVER_TYPE=`$CAT ${ENIQ_CONF_DIR}/installed_server_type | $EGREP -v  '^[[:blank:]]*#' | $SED -e 's/ //g'`
if [ ! "${CURR_SERVER_TYPE}" ]; then
    _err_msg_="Could not determine which server type this is"
    abort_script "${_err_msg_}"
fi

# Check if server is Coordinator or Standalone
CO_SERVER=""
if [ "${CURR_SERVER_TYPE}" == "stats_coordinator" -o "${CURR_SERVER_TYPE}" == "eniq_stats" ]; then
    CO_SERVER="YES"
fi

# Get the System User/Group. All directories are owned by this
SYSUSER=`iniget ENIQ_INSTALL_CONFIG -f ${ENIQ_CONF_DIR}/${SUNOS_INI} -v ENIQ_SYSUSER`
if [ ! "${SYSUSER}" ]; then
    _err_msg_="Could not read SYSUSER param from ${ENIQ_CONF_DIR}/${SUNOS_INI}"
    abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi

}

### Function: store_current_password ###
#
# Stores the current password in plain text format
#
# Arguments: none
#
# Return Values: none
store_current_password()
{
        local _block_ini_=$1
        local _property_=$2

        #Getting current encryption information from the core installation files
        CURR_ENCRYPTION=`iniget DB -f ${CLI_CONF_DIR}/${ENIQ_INI} -v ${user}Password_Encrypted`
        if [ $? -ne 0 ]; then
                _err_msg_="$($DATE '+%Y-%b-%d_%H.%M.%S'): Failed to store the current password information."
                abort_script "$_err_msg_"
        fi

        #Getting current password information in plain text formats
        CURR_PASS=`inigetpassword ${_block_ini_} -f ${CLI_CONF_DIR}/${ENIQ_INI} -v ${_property_}`
        if [ $? -ne 0 ]; then
                _err_msg_="$($DATE '+%Y-%b-%d_%H.%M.%S'): Failed to store the current password information."
                abort_script "$_err_msg_"
        fi

}

### Function: update_IQ_UserPwd_History_table ###
#
# if more then five entries are present for database user delete the oldest password for a database user
# update the IQ_UserPwd_History_table with new password entry for the database user
#
# Arguments: none
#
# Return Values: none
update_IQ_UserPwd_History_table()
{
        if [ ${user} == 'DBA' ]; then

        # removing the old connection strings
        $RM -rf /var/tmp/rep_conn_str_encrypt.txt.*

        REP_CONN_STR_USER_DBA="-c \"uid=dba;pwd=${new_user_pwd};eng=${REP_NAME};links=tcpip{host=${REP_NAME};port=${REP_PORT};dobroadcast=no;verify=no}\""
        REP_CONN_STR_USER_DBA_ENC=${TEM_DIR}/rep_conn_str_encrypt.txt.$$

        # encrypt the connection string.
        get_encrypt_file "${REP_CONN_STR_USER_DBA}" "${REP_CONN_STR_USER_DBA_ENC}"
        fi

        SqlFile=`mktemp ${TEM_DIR}/delete_pwd_entry.XXXXXXXXXX`
        $ECHO "if (select count() from dba.IQ_UserPwd_History where user_name='${user}') = 5  then
        delete from dba.IQ_UserPwd_History where password_creation_time = (select min(password_creation_time) from dba.IQ_UserPwd_History where user_name='${user}') and user_name='${user}';
        end if;" >$SqlFile

        no_pwd_entry=`$DBISQL -nogui @${REP_CONN_STR_USER_DBA_ENC} "select count() from dba.IQ_UserPwd_History where user_name='${user}'" | $AWK 'NR==3{print$1}'`

        $DBISQL -nogui -q @${REP_CONN_STR_USER_DBA_ENC} $SqlFile
        if [ $? -ne 0 ];        then
                _err_msg_="$($DATE '+%Y-%b-%d_%H.%M.%S'): Failed to delete oldest password entry from IQ_UserPwd_History_table "
                abort_script "$_err_msg_"
                elif [ $no_pwd_entry -eq 5 ];    then
                log_msg -s "$($DATE '+%Y-%b-%d_%H.%M.%S'): Successfully deleted oldest password entry from IQ_UserPwd_History_table" -l ${LOGFILE}

        fi



        $DBISQL -q @${REP_CONN_STR_USER_DBA_ENC} "insert into dba.IQ_UserPwd_History (user_name,password,password_creation_time,password_encrypted) values ('${user}','${new_user_pwd_enc}',getdate(),'Y');" >/dev/null 2>&1
        if [ $? -ne 0 ];        then
                _err_msg_="$($DATE '+%Y-%b-%d_%H.%M.%S'): Failed to update IQ_UserPwd_History_table "
                abort_script "$_err_msg_"
        else
                log_msg -s "$($DATE '+%Y-%b-%d_%H.%M.%S'): Successfully updated IQ_UserPwd_History_table" -l ${LOGFILE}
        fi

}

### Function: update_password_asa ###
#
# updating the password in iq
#
# Arguments: none
#
# Return Values: none
update_password_asa()
{
local CLI_CONF_DIR=/eniq/sw/conf
local ENIQ_SW=/eniq/sw
if [[ -z "$ASA_STATUS" ]]; then
        ASA_STATUS=0

        REPDB_RUNNING=0
fi

check_server_running repdb

if [ ${SERVER_STATUS} -eq 1 ]; then
        REPDB_RUNNING=1
fi

#changing passwords in meta_database table
log_msg -t -q -s "Changing the password for ${user} user for SAP ASA in META_DATABASES." -l ${LOGFILE}
local ENIQ_SW_PF_DIR=${ENIQ_BASE_DIR}/sw/platform
R_STATE=`${CAT} ${ENIQ_SW}/installer/versiondb.properties | ${GREP} -w repository | ${AWK} -F "=" '{print $2}'`
if [ "${user}" == "ETLREP" ] || [ "${user}" == "DWHREP" ];then
    #taking backup of the ETLCServer file in case of rollback failure
    $SU - ${SYSUSER} -c "$CP ${CLI_CONF_DIR}/ETLCServer.properties ${CLI_CONF_DIR}/ETLCServer.properties_bkp"

    $SU - $SYSUSER -c "$BASH ${ENIQ_SW_PF_DIR}/repository-${R_STATE}/bin/ChangeUserPasswordsInRepdb -u ${user} -o ${CURR_PASS} -p ${new_user_pwd} -r ${new_user_pwd}" >> ${LOGFILE}
    if [ $? -ne 0 ]; then
        _err_msg_="Changing password for ${user} failed for SAP ASA"
        ${RM} -rf ${CLI_CONF_DIR}/ETLCServer.properties_bkp
        abort_script "$_err_msg_"
    fi
    log_msg -t -s "Successfully updated the password for ${user} user in SAP ASA." -l ${LOGFILE}
else
    $SU - $SYSUSER -c "$BASH ${ENIQ_SW_BIN}/ChangeUserPasswordsInRepdb -u ${user} -p '${new_user_pwd}' -f" >> ${LOGFILE}
 
    if [ $? -ne 0 ]; then
        log_msg -t -s "Changing password for ${user} failed for SAP ASA." -l ${LOGFILE}
        password_rollback
    fi
    if [ $ASA_STATUS -eq 1 ]; then
            log_msg -t -s "Password rollback successful for ${user} user in SAP ASA." -l ${LOGFILE}
            return 0
    fi
    ((ASA_STATUS++))
    
    if [ "${user}" == "DBA" ]
    then
        if [ $ASA_STATUS -ge 1 ]; then
            change_pwd_text="ALTER USER ${user} IDENTIFIED BY '${new_user_pwd}';"
            $DBISQL @${REP_CONN_STR_USER_DBA_ENC} "${change_pwd_text}"  2>>${LOGFILE} 1>/dev/null
            if [ $? -ne 0 ]; then
                log_msg -t -s "Changing the password for ${user} for SAP ASA." -l ${LOGFILE}
                password_rollback
            fi
        fi
        ((ASA_STATUS++))
    fi
    
    if [[ -z "$PASSWORD_ROLLBACK_CALL" ]]; then
            log_msg -t -s "Successfully updated the password for ${user} user in SAP ASA." -l ${LOGFILE}
    else
            log_msg -t -s "Password rollback successful for ${user} user in SAP ASA." -l ${LOGFILE}
    fi
fi
}


### Function: update_password_iq ###
#
# updating the password in iq
#
# Arguments: none
#
# Return Values: none
update_password_iq()
{
IQ_STATUS=1
DWHDB_RUNNING=0

check_server_running dwhdb

if [ ${SERVER_STATUS} -eq 1 ]; then
        DWHDB_RUNNING=1
fi

log_msg -t -q -s "Changing the password for ${user} user for SAP IQ." -l ${LOGFILE}
change_pwd_text="ALTER USER ${user} IDENTIFIED BY '${new_user_pwd}';"
if [ "${user}" == "ETLREP" ] || [ "${user}" == "DWHREP" ];then
    #Initialising the connection string for dwhdb
    REPDB_DWH_CONN_STR_FOR_USER_DBA="-c \"eng=repdb;links=tcpip{host=dwhdb;port=${DWH_PORT}};uid=dba;pwd=${DBA_PASSWORD}\""
    REPDB_DWH_CONN_STR_FOR_USER_DBA_ENC=${TEM_DIR}/rep_change_db_conn_str_encrypt.txt.`uuidgen`
    
    # encrypt the connection string.
    get_encrypt_file "${REPDB_DWH_CONN_STR_FOR_USER_DBA}" "${REPDB_DWH_CONN_STR_FOR_USER_DBA_ENC}"
    $SU - $SYSUSER -c "$DBISQL -nogui -onerror exit @${REPDB_DWH_CONN_STR_FOR_USER_DBA_ENC} \"ALTER USER ${user} IDENTIFIED BY '${new_user_pwd}';\"" 2>>${LOGFILE} 1>/dev/null
    if [ $? -ne 0 ]; then
        log_msg -t -s "Changing password for ${user} failed for SAP IQ." -l ${LOGFILE}
        log_msg -t -s "Reverting password for ${user}." -l ${LOGFILE}
        password_rollback_repdb "${user}"
    fi
    log_msg -t -s "Successfully updated the password for ${user} user in SAP IQ. " -l ${LOGFILE}
else
    $DBISQL -nogui @${DWH_CONN_STR_USER_DBA_ENC} "${change_pwd_text}"  2>>${LOGFILE} 1>/dev/null
 
    if [ $? -ne 0 ]; then
    
        log_msg -t -s "Changing password for ${user} failed for SAP IQ." -l ${LOGFILE}
        IQ_STATUS=0
        password_rollback
    fi
    
    if [[ -z "$PASSWORD_ROLLBACK_CALL" ]]; then
            log_msg -t -s "Successfully updated the password for ${user} user in SAP IQ. " -l ${LOGFILE}
    else
            log_msg -t -s "Password rollback successful for ${user} user in SAP IQ." -l ${LOGFILE}
    fi
fi
}

### Function: update_password_niq ###
#
# updating the password in niq.ini
#
# Arguments: none
#
# Return Values: none
update_password_niq()
{
PASSWORD_STAGE="updating"
BLOCK_COUNT=0
if [ -z "$FILES_TO_REVERT" ]; then
        FILES_TO_REVERT=0
fi

if [ -z "$BLOCKS_TO_BE_PROCESSED_ARRAY" ]; then
      BLOCKS_TO_BE_PROCESSED_ARRAY=(${block_ini})
fi

if [ "${ENCRYPT}" == "Y" ]
then
    _update_pwd_=$(${ECHO} ${new_user_pwd} | $OPENSSL enc -base64 )
else
    _update_pwd_=${new_user_pwd}
fi

iniset DB -f ${CLI_CONF_DIR}/${ENIQ_INI} ${user}Password_Encrypted=${ENCRYPT}
iniset DB -f ${ENIQ_CONF_DIR}/${ENIQ_INI} ${user}Password_Encrypted=${ENCRYPT}

if [[ -z "$PASSWORD_ROLLBACK_CALL" ]]; then
        log_msg -h -l ${LOGFILE} -s "Updating password for ${user} user"
else
        log_msg -h -l ${LOGFILE} -s "Password rollback for ${user} user"
fi

for block in "${BLOCKS_TO_BE_PROCESSED_ARRAY[@]}"
do
        if [ $BLOCK_COUNT -eq $FILES_TO_REVERT ] && [[ -n "${PASSWORD_ROLLBACK_CALL}" && ${PASSWORD_ROLLBACK_CALL} -eq 1 ]]; then
                return 0
        fi

        log_msg -t -q -s "Changing the password for ${user} user for ${block} @SW." -l ${LOGFILE}
        iniset ${block} -f ${CLI_CONF_DIR}/${ENIQ_INI} ${property}=${_update_pwd_}

        if [ $? -ne 0 ]; then
                log_msg -t -s "Failed to update the password for ${user} user in core install software." -l ${LOGFILE}
                if [ $BLOCK_COUNT -eq 0 ]; then
                        abort_script "$ERROR_MESSAGE"
                else
                        password_rollback
                fi
        fi
        if [ -z "${PASSWORD_ROLLBACK_CALL}" ]; then
                ((FILES_TO_REVERT++))
        fi
        ((BLOCK_COUNT++))
        if [ $BLOCK_COUNT -eq $FILES_TO_REVERT ] && [[ -n "${PASSWORD_ROLLBACK_CALL}" && ${PASSWORD_ROLLBACK_CALL} -eq 1 ]]; then
                return 0
        fi

        log_msg -t -q -s "Changing the password for ${user} user for ${block} @Installation." -l ${LOGFILE}
        if [ $FILES_TO_REVERT -ge 1 ]; then
                iniset ${block} -f ${ENIQ_CONF_DIR}/${ENIQ_INI} ${property}=${_update_pwd_}
                if [ $? -ne 0 ]; then
                        log_msg -t -s "Failed to update the password for ${user} user in core install software." -l ${LOGFILE}
                        password_rollback
                fi
        fi
        if [ -z "${PASSWORD_ROLLBACK_CALL}" ]; then
                ((FILES_TO_REVERT++))
        fi
        ((BLOCK_COUNT++))
done

if [[ -z "$PASSWORD_ROLLBACK_CALL" ]]; then
        log_msg -t -s "Successfully updated the password for ${user} user in core install software." -l ${LOGFILE}
else
        log_msg -t -s "Password rollback successful for ${user} user in core install software." -l ${LOGFILE}
fi
}

### Function: usage_msg ###
#
#   Print out the usage message
#
# Arguments: none
#
# Return Values: none
usage_msg()
{
clear
$ECHO "Usage: `$BASENAME $0` -u <UserName> [ -l <path_to_logfile> ]

options:

-u  : Mandatory parameter.Specifies Username.Username is not case-sensitive.

-l  : Optional Parameter.Specifies logfile name with absolute path.Default path /eniq/log/sw_log/iq.
"
}

### Function: user_confirm_pwd_change ###
#
# Get confirmation from user to proceed with database password change
#
# Arguments: none
#
# Return Values: none
user_confirm_pwd_change()
{
    local _password_attempts_=3
    while [ ${_password_attempts_} -gt 0 ]
    do
        unset USER_CONF
        ((_password_attempts_--))
        $ECHO "\nPlease re-enter the new password to confirm the change: \c "
        read -s USER_CONF
        if [ "$USER_CONF" == "${new_user_pwd}" ]; then
                break
        else
                log_msg -s "\nPasswords not matching."
                if [ ${_password_attempts_} -eq 0 ]; then
                        abort_script "$ERROR_MESSAGE"
                fi
        fi
    done

    user_prompt_confirmation
}

### Function: user_prompt_confirmation ###
#
# Asks if user wants to proceed with changing the password
#
#
# Arguments: none
#
# Return Values: none
user_prompt_confirmation(){
    while :; do
        unset CONFIRMATION
        clear
        $ECHO "\nAre you sure you wish to change the SAP IQ password for ${user} user ? [Yes/No]: \c "
        read CONFIRMATION
        if [ -z "$CONFIRMATION" ]; then
             clear
        elif [ `$ECHO $CONFIRMATION | tr [:upper:] [:lower:]` == "no" ]; then
            _err_msg_="Script aborted by user."
            abort_script "$_err_msg_"
        elif [ `$ECHO $CONFIRMATION | tr [:upper:] [:lower:]` == "yes" ]; then
            break
        fi
    done

new_user_pwd_enc=$($ECHO $new_user_pwd | $OPENSSL enc -base64)

#check if the entered password is same as the previous five password
check_password_history

}

### Function: user_pwd_change ###
#
# Takes new password as input from the user and validates it as per the defined rules
#
# Arguments: none
#
# Return Values: none
user_pwd_change()
{
        if [  $CHANGE_PASSWORD_ATTEMPT_COUNT -eq 0 ]
    then
                log_msg -h -l ${LOGFILE} -s "Password Change"
        fi

        rules

    local _password_attempts_=3
    while [ ${_password_attempts_} -ge 0 ]
    do
        unset new_user_pwd
        if [ ${_password_attempts_} -eq 0 ]; then
            abort_script "$ERROR_MESSAGE"
        fi
        ((_password_attempts_--))
        $ECHO "\nEnter the new password for ${user} user: \c "
        read -s new_user_pwd
        local _password_length_=${#new_user_pwd}

        if  [ -z "${new_user_pwd}" ] ; then
            log_msg -s "\nThe new password cannot be empty."
            continue
        fi

        if ! [[ "${new_user_pwd}" =~ [A-Z] ]] ; then
            log_msg -s "\nThe new password entered is not compliant with the Password Policies must contain a uppercase letter."
            continue
        fi
        if ! [[ "${new_user_pwd}" =~ [a-z] ]] ; then
            log_msg -s "\nThe new password entered is not compliant with the Password Policies must contain a lowercase letter."
            continue
        fi

        if ! [[ "${new_user_pwd}" =~ [0-9] ]] ; then
            log_msg -s "\nThe new password entered is not compliant with the Password Policies must contain a number."
            continue
        fi

	if [ "${user}" == "ETLREP" ] || [ "${user}" == "DWHREP" ];then
            if  [[ "${new_user_pwd}" != *[@#%~={},.@:*_+]* ]] ; then
                log_msg -s "\nThe new password entered is not compliant with the Password Policies must contain a special character."
                continue
            fi
	    if  [[ "${_password_}" == *[\`\!\/\$\^\&\(\)\-\[\]\\\|\;\'\"\<\>\?]* ]] ; then
                log_msg -s "\nThe new password entered is not compliant with the Password Policies must contain a allowed special character."
                continue
            fi
        else
            if  [[ "${new_user_pwd}" != *['!'@#%~={},./@:*_+]* ]] ; then
                log_msg -s "\nThe new password entered is not compliant with the Password Policies must contain a special character."
                continue
            fi
	    if  [[ "${_password_}" == *[\`\$\^\&\(\)\-\[\]\\\|\;\'\"\<\>\?]* ]] ; then
                log_msg -s "\nThe new password entered is not compliant with the Password Policies must contain a allowed special character."
                continue
            fi
        fi

        if [ ${_password_length_} -lt 5 ] || [ ${_password_length_} -gt 30 ]; then
            log_msg -s "\nThe new password length should be not less than 5 characters or greater than 30 characters."
            continue
        fi

        break
    done
    user_confirm_pwd_change

}

### Function: user_pwd_change_common_func_list ###
#
# Takes new password as input from the user and validates it as per the defined rules
#
# Arguments: none
#
# Return Values: none
user_pwd_change_common_func_list(){
if [ "${user}" == "ETLREP" -o "${user}" == "DWHREP" ]; then
    update_password_asa
    update_password_iq
    update_password_niq
else
    update_password_niq
    update_password_iq
    update_password_asa
fi 
}

# ********************************************************************
#
#   Main body of program
#
# ********************************************************************
#

# Check that the effective id of the user is root
check_id root

setup_env

if [ "${CURR_SERVER_TYPE}" == "eniq_stats" -o "${CURR_SERVER_TYPE}" == "stats_coordinator" ]; then
    _change_pwd_=0
else
    _change_pwd_=1
fi
if [ ${_change_pwd_} -eq 1 ]; then
    _err_msg_="$($DATE '+%Y-%b-%d_%H.%M.%S'): Database password change allowed on the coordinator(dwhdb) only."
    abort_script "$_err_msg_"
fi

# Check if script is already running
check_file_presence "$LOCK_FILE"

declare -a BLOCKS_TO_BE_PROCESSED_ARRAY

while getopts ":u:l:" arg; do
  case $arg in
    u) user="$OPTARG"
       ;;
    l) LOGFILE="$OPTARG"
       ;;
   \?) usage_msg
       remove_lock_file
       exit 1
       ;;
  esac
done

ENCRYPT=Y

if [ ! "${user}" ]; then
    usage_msg
    abort_script
fi

# Check/Create Logfile
chk_create_logfile

user=$($ECHO ${user} | tr "[:lower:]" "[:upper:]")

case "${user}" in
    DBA)
        block_ini="DB"
        property="DBAPassword"
        store_current_password "$block_ini" "$property"
        ;;
    DC)
        block_ini="DWH DWH_READER_SETTINGS"
        property="DCPassword"
        store_current_password "DWH" "$property"
        ;;
    DCBO)
        block_ini="DWH DWH_READER_SETTINGS"
        property="DCBOPassword"
        store_current_password "DWH" "$property"
        ;;
    DCPUBLIC)
        block_ini="DWH DWH_READER_SETTINGS"
        property="DCPUBLICPassword"
        store_current_password "DWH" "$property"
        ;;
    ETLREP)
        block_ini="REP"
        property="ETLREPPassword"
	store_current_password "REP" "$property"
        ;;
    DWHREP)
        block_ini="REP"
        property="DWHREPPassword"
	store_current_password "REP" "$property"
        ;;  
    *)
        _err_msg_="$($DATE '+%Y-%b-%d_%H.%M.%S'): USER - ${user} not found."
        abort_script "$_err_msg_"
esac

# Trap keyboard interrupt (control-c)
trap control_c_invoked SIGINT

#Trap and disable keyboard interrupt (control-z)
trap '' SIGTSTP

# check the current password before changing the password for the user
check_user_password

user_pwd_change

#check if the entered password is same as the previous five password
check_password_history

user_pwd_change_common_func_list

#update the IQ_UserPwd_History_table
update_IQ_UserPwd_History_table

get_deployment_order
if [ "${CO_SERVER}" == "YES" ]; then
     for _line_ in `$CAT ${TEM_DIR}/encryption_order`; do
         _ip_address_=`$ECHO ${_line_} | $AWK -F"::" '{print $1}'`
         _serv_hostname_=`$ECHO ${_line_} | $AWK -F"::" '{print $2}'`
         if [ ! "${_ip_address_}" -o ! "${_serv_hostname_}" ]; then
               _err_msg_="Could not read required info from ${_order_file_}"
               abort_script "${_err_msg_}"
         fi

         if [ "${_ip_address_}" != "${HOST_IP}" ]; then
               log_msg -l ${LOGFILE} -t -s "Copying ${CLI_CONF_DIR}/${ENIQ_INI} to ${ENIQ_CONF_DIR} on ${_serv_hostname_}"
               run_remote_cmd "${_ip_address_}" "$CP -p ${CLI_CONF_DIR}/${ENIQ_INI} ${ENIQ_CONF_DIR}/${ENIQ_INI}" "$LOGFILE"
               if [ $? -ne 0 ]; then
                     _err_msg_="Failed to execute encrypt_passwords.bsh on ${_serv_hostname_}"
                     abort_script "${_err_msg_}"
               fi
         fi
     done
fi

log_msg -s "\nThe password for ${user} user has been successfully changed." -l ${LOGFILE}

remove_lock_file

log_msg -s "\n$SUCCESS_MESSAGE" -l ${LOGFILE}
$RM -rf ${REP_CONN_STR_USER_DBA_ENC}
$RM -rf ${DWH_CONN_STR_USER_DBA_ENC}
$RM -rf ${DWH_CONN_STR_USER_PIN_ENC}
exit 0
