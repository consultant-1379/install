# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2022 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used 
# and/or copied only with the written permission from Ericsson Radio 
# Systems AB or in accordance with the terms and conditions stipulated 
# in the agreement/contract under which the program(s) have been 
# supplied.
#
# ********************************************************************
# Name    : encrypt_user_passwords.bsh
# Date    : 06/10/2023
# Revision: main\6
# Purpose : To encrypt the user passwords and encryption flags in the
#           the required ini configuration files
#
#
# Usage   : bash encrypt_user_passwords.bsh
#
# ********************************************************************
#
# Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
CAT=/usr/bin/cat
CP=/usr/bin/cp
CHMOD=/usr/bin/chmod
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO='/usr/bin/echo -e'
EGREP=/usr/bin/egrep
ENV=/usr/bin/env
GETENT=/usr/bin/getent
GREP=/usr/bin/grep
HEAD=/usr/bin/head
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
MYHOSTNAME=/usr/bin/hostname
PERL=/usr/bin/perl
RM=/usr/bin/rm
SED=/usr/bin/sed
#SUDO=/usr/bin/sudo
SORT=/usr/bin/sort
TOUCH=/usr/bin/touch

# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************

# ini file
ENIQ_INI=niq.ini

# Cmd to exec a shell and drop user to it in case of an error
EXEC_SHELL_CMD="exec /bin/bash -o emacs"

# ********************************************************************
#
#   Functions
#
# ********************************************************************

### Function: abort_script ###
#
#   This will be called if the script is aborted by an error
#   which is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
else
    $ECHO "\nERROR : ${_err_msg_}\n"
fi

$RM -rf ${TEM_DIR}

exit 1
}

### Function: check_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
check_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd ${_dir_} 2>/dev/null && pwd || $ECHO ${_dir_}`
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{

_get_id_=`$ENV |$GREP -w SUDO_USER | $EGREP "^[[:blank:]]*SUDO_USER="|$AWK -F\= '{print $2}'|$SED -e 's|"||g'`

_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

_check_group_=`$ID $_get_id_ | $AWK -F\( '{print $3}' | $AWK -F\) '{print $1}'`


    if [ "${_get_id_}" == "" ]; then

        if [ "${_check_id_}" == "root" ]; then
           # Set 1 for true
           _user_root=1

        else
           _err_msg_="You must be root or admin to execute this script."
           abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
          else
            if [ "${_check_group_}" == "ENIQ_ADMIN_ROLE" ]; then
               # Set 0 for false
               _user_root=0

            else
               _err_msg_="You must be root or admin to execute this script." 
               abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
            fi
    fi
}

### Function: get_deployment_order ###
#
# Get the order of the deployment
# for performing required functionality based on action type
#
# Arguments: none
#
# Return Values: none
get_deployment_order()
{
$RM -rf ${TEM_DIR}/server_order_list ${TEM_DIR}/encryption_order

# Get an ordered list of servers based on the server_list file
$PERL ${ENIQ_CORE_INST_DIR}/lib/get_ip_order.pl -f ${TEM_DIR}/encryption_order
if [ $? -ne 0 ]; then
    _err_msg_="Could not get an ordered list of servers"
    abort_script "${_err_msg_}"
fi
}

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments: none
#
# Return Values: none
#
setup_env()
{
# ENIQ Directories
ENIQ_BASE_DIR=/eniq
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation
ENIQ_CORE_INST_DIR=${ENIQ_INST_DIR}/core_install
ENIQ_CORE_INST_LIB_DIR=${ENIQ_CORE_INST_DIR}/lib
ENIQ_LOG_DIR=${ENIQ_BASE_DIR}/local_logs
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config
DEPLOYMENT=${ENIQ_CONF_DIR}/extra_params/deployment
ENIQ_BIN=${ENIQ_CORE_INST_DIR}/bin

# ENIQ SW conf directory
CLI_CONF_DIR=${ENIQ_BASE_DIR}/sw/conf

# Hostname Information
HNAME=`${MYHOSTNAME}`
HOST_IP=`${MYHOSTNAME} -i | $AWK '{print $1}' | $HEAD -1`

# File containing the type of installation. Eg. events or statistics
INST_TYPE_FILE=${ENIQ_CONF_DIR}/ericsson_use_config
if [ ! -s "${INST_TYPE_FILE}" ]; then
    _err_msg_="ENIQ install type not defined in ${INST_TYPE_FILE}"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

# Read the installation type - should be "events" or "stats"
INSTALL_TYPE=`$CAT ${INST_TYPE_FILE} | $AWK -F\= '{print $2}'`

# Source the common functions
if [ -s ${ENIQ_CORE_INST_LIB_DIR}/common_functions.lib ]; then
    . ${ENIQ_CORE_INST_LIB_DIR}/common_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_LIB_DIR}/${lib_file} not found"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

# File containing the type of installation. Eg. events or statistics
INST_TYPE_FILE=${ENIQ_CONF_DIR}/ericsson_use_config
if [ ! -s "${INST_TYPE_FILE}" ]; then
    _err_msg_="ENIQ install type not defined in ${INST_TYPE_FILE}"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

# Templates Directory
ENIQ_CORE_INST_TEMPL_DIR="${ENIQ_CORE_INST_DIR}/templates/${INSTALL_TYPE}"

# Configuration file containing list of parameters that need to be encrypted
PASSWORD_ENCRYPTION_CONFIF_FILE=${ENIQ_CORE_INST_TEMPL_DIR}/password_encryption.cfg
if [ ! -s "${PASSWORD_ENCRYPTION_CONFIF_FILE}" ]; then
    _err_msg_="File ${PASSWORD_ENCRYPTION_CONFIF_FILE} not found"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

# Get current server type
CURR_SERVER_TYPE=`$CAT ${ENIQ_CONF_DIR}/installed_server_type | $EGREP -v  '^[[:blank:]]*#' | $SED -e 's/ //g'`
if [ ! "${CURR_SERVER_TYPE}" ]; then
    _err_msg_="Could not determine which server type this is"
    abort_script "${_err_msg_}"
fi

# Check if server is Coordinator or Standalone
CO_SERVER=""
if [ "${CURR_SERVER_TYPE}" == "stats_coordinator" -o "${CURR_SERVER_TYPE}" == "eniq_stats" ]; then
    CO_SERVER="YES"
fi

#Check IP Type
check_ip_type
}

### Function: update_encrypt_passwords ###
#
# Updates or encrypts user passwords based on 
# 
# Arguments: $1 = Updates the encryption flag or sets the password 
#                 based on the action type
#
# Return Values: none
#
update_encrypt_passwords()
{
_action_=$1

for _file_ in `$CAT ${PASSWORD_ENCRYPTION_CONFIF_FILE} | $GREP -v ";"|$AWK -F"::" '{print $1}'|$SORT -u`
do
    _file_name_=`$BASENAME ${_file_}`
     
    log_msg -t -q -l ${LOGFILE} -s "Creating a temporary copy of ${_file_} in ${TEM_DIR}"
    $CP -pf ${_file_} ${TEM_DIR}
    if [ $? -ne 0 ]; then
          _err_msg_="Could not create temporary copy of ${_file_} in ${TEM_DIR}"
          abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
    fi

    for _line_ in `$CAT ${PASSWORD_ENCRYPTION_CONFIF_FILE} | $GREP -w "${_file_}"`
    do
       _block_=`$ECHO ${_line_}|$AWK -F"::" '{print $2}'`
       _block_param_=`$ECHO ${_line_}|$AWK -F"::" '{print $3}'`
       _encryption_flag_=`iniget DB -f ${TEM_DIR}/${_file_name_} -v ${_block_param_}_Encrypted`
       if [ "${_action_}" == "encrypt" ]; then
            if [ "${_encryption_flag_}" == "N" ]; then
                 log_msg -t -l ${LOGFILE} -s "Getting value for ${_block_param_} under ${_block_} in ${TEM_DIR}/${_file_name_}"
                 _password_=`iniget ${_block_} -f ${TEM_DIR}/${_file_name_} -v ${_block_param_}`
    
                 log_msg -t -l ${LOGFILE} -s "Encrypting ${_block_param_} under ${_block_} in ${TEM_DIR}/${_file_name_}"
                 _encrypted_password_=`$ECHO ${_password_}| /usr/bin/openssl enc -base64`
    
                 log_msg -t -l ${LOGFILE} -s "Updating encrypted password for ${_block_param_} under ${_block_} in ${TEM_DIR}/${_file_name_}"
                 iniset ${_block_} -f ${TEM_DIR}/${_file_name_} ${_block_param_}=${_encrypted_password_}
            else
                 log_msg -t -l ${LOGFILE} -s "${_block_param_} under ${_block_} is already encrypted in ${TEM_DIR}/${_file_name_}"
            fi
       elif [ "${_action_}" == "update" ] ;then
              if [ "${_encryption_flag_}" == "N" ]; then
                    log_msg -t -l ${LOGFILE} -s "Updating ${_block_param_}_Encrypted=Y in ${TEM_DIR}/${_file_name_}"
                    iniset DB -f ${TEM_DIR}/${_file_name_} ${_block_param_}_Encrypted=Y
              else
                    log_msg -t -l ${LOGFILE} -s "${_block_param_}_Encrypted is already set to Y in ${TEM_DIR}/${_file_name_}"
              fi
       fi
    done

    log_msg -t -q -l ${LOGFILE} -s "Copying content of ${TEM_DIR}/${_file_name_} to ${_file_}"
    $CP -pf ${TEM_DIR}/${_file_name_} ${_file_}
    if [ $? -ne 0 ]; then
          _err_msg_="Could not copy content of ${TEM_DIR}/${_file_name_} to ${_file_}"
          abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
    fi
done
}

# ********************************************************************
#
#   Main body of program
#
# ********************************************************************

RUN_TIME=`$DATE '+%Y-%b-%d_%H:%M:%S'`

# Check that the effective id of the user is root
check_id 

# Determine absolute path to software
check_absolute_path

# Set up environment variables for script.
setup_env


# Log file
if [ ! "${LOGFILE}" ]; then
     $MKDIR -p ${ENIQ_LOG_DIR}/encryption
     LOGFILE="${ENIQ_LOG_DIR}/encryption/password_encryption_`$DATE '+%Y-%b-%d'`.log"
fi

$TOUCH $LOGFILE
if [ ! -f $LOGFILE ]; then
     _err_msg_="Failed to create $LOGFILE"
     abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi 

$ECHO "Changing permission of the ${LOGFILE} to 644" | $TEE -a ${LOGFILE}
$CHMOD 644 ${LOGFILE}
if [ $? -ne 0 ]; then
     _err_msg_="Could not change the permission of ${LOGFILE} file to 644"
     abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

# Create a temporary Directory
TEM_DIR=/tmp/password_encryption.$$.$$
$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory ${TEM_DIR}"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

get_deployment_order
if [ "${CO_SERVER}" == "YES" ]; then
     for _line_ in `$CAT ${TEM_DIR}/encryption_order`; do
	 
	_count_=`$ECHO "${_line_}" | $GREP -o "::" | wc -l`

	if [ "${_ip_type_}" == "IPv6" -a "${_count_}" == 3 ]; then
		_ip_address_=`$ECHO ${_line_} | $GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}'`
		_serv_hostname_=`$ECHO ${_line_} | $AWK -F"::" '{print $3}'`
		_serv_type_=`$ECHO ${_line_} | $AWK -F"::" '{print $4}'`
	else
		_ip_address_=`$ECHO ${_line_} | $AWK -F"::" '{print $1}'`
		_serv_hostname_=`$ECHO ${_line_} | $AWK -F"::" '{print $2}'`
		_serv_type_=`$ECHO ${_line_} | $AWK -F"::" '{print $3}'`

	fi
	 
         if [ ! "${_ip_address_}" -o ! "${_serv_hostname_}" ]; then
               _err_msg_="Could not read required info from ${_order_file_}"
               abort_script "${_err_msg_}"
         fi

         log_msg -h -l ${LOGFILE} -t -s "Starting password encryption procedure on ${_serv_hostname_}"

         if [ "${_ip_address_}" == "${HOST_IP}" ]; then
               update_encrypt_passwords "encrypt"
               update_encrypt_passwords "update"
               log_msg -h -l ${LOGFILE} -t -s "Successfully completed the encryption of passwords on ${HNAME}. Logfile: ${LOGFILE}" 
         else
               run_remote_cmd "${_serv_hostname_}" "$BASH ${SCRIPTHOME}/encrypt_user_passwords.bsh" "$LOGFILE"
               if [ $? -ne 0 ]; then
                     _err_msg_="Failed to execute encrypt_user_passwords.bsh on ${_serv_hostname_}"
                     abort_script "${_err_msg_}"
               fi
         fi
     done
else
     update_encrypt_passwords "encrypt"
     update_encrypt_passwords "update"
     log_msg -h -l ${LOGFILE} -t -s "Successfully completed the encryption of passwords on ${HNAME}. Logfile: ${LOGFILE}" 
fi



$RM -rf ${TEM_DIR}

exit 0
