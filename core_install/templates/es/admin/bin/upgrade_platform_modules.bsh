#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2016 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : upgrade_platform_modules
# Date    : 01/06/2016
# Revision: \main\0
# Purpose : Main wrapper script handling the installation of platform modules 
#
# Usage   : upgrade_platform_modules.bsh
#
# ********************************************************************
#
#       Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
BASH=/usr/bin/bash
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CHOWN=/usr/bin/chown
CLEAR=/usr/bin/clear
CMP=/usr/bin/cmp
CP=/usr/bin/cp
CPIO=/usr/bin/cpio
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
DOMAINNAME=/usr/bin/domainname
DTCONFIG=/usr/dt/bin/dtconfig
DUMPADM=/usr/sbin/dumpadm
ECHO=/usr/bin/echo
EGREP=/usr/bin/egrep
EJECT=/usr/bin/eject
ENV=/usr/bin/env
EXPR=/usr/bin/expr
FIND=/usr/bin/find
FLARCREATE=/usr/sbin/flarcreate
FORMAT=/usr/sbin/format
FUSER=/usr/sbin/fuser
GEGREP=/usr/sfw/bin/gegrep
GETENT=/usr/bin/getent
GETTEXT=/usr/bin/gettext
GREP=/usr/bin/grep
GROUPADD=/usr/sbin/groupadd
GTAR=/usr/sfw/bin/gtar
GZCAT=/usr/bin/gzcat
HEAD=/usr/bin/head
ID=/usr/bin/id
INIT=/usr/sbin/init
LS=/usr/bin/ls
MKDIR=/usr/bin/mkdir
MORE=/usr/bin/more
MV=/usr/bin/mv
MYHOSTNAME=/usr/bin/hostname
NAWK=/usr/bin/nawk
PERL=/usr/bin/perl
PGREP=/usr/bin/pgrep
PING=/usr/sbin/ping
PKGADD=/usr/sbin/pkgadd
PKGINFO=/usr/bin/pkginfo
PRTCONF=/usr/sbin/prtconf
PS=/usr/bin/ps
PWD=/usr/bin/pwd
RM=/usr/bin/rm
RCP=/usr/bin/rcp
RSH=/usr/bin/rsh
SED=/usr/bin/sed
SLEEP=/usr/bin/sleep
SORT=/usr/bin/sort
SU=/usr/bin/su
SVCADM=/usr/sbin/svcadm
SVCCFG=/usr/sbin/svccfg
SVCS=usr/bin/svcs
SWAP=/usr/sbin/swap
SYNC=/usr/sbin/sync
TAIL=/usr/bin/tail
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
TPUT=/usr/bin/tput
UADMIN=/usr/sbin/uadmin
UNAME=/usr/bin/uname
UNAME=/usr/bin/uname
UNZIP=/usr/bin/unzip
USERADD=/usr/sbin/useradd
VOLD=/usr/sbin/vold
WC=/usr/bin/wc
ZFS=/usr/sbin/zfs
ZPOOL=/usr/sbin/zpool

# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************
# Default user
DEFAULT_USER=root

# Name of SunOS & ENIQ ini Files
ENIQ_ENV=niq.rc
ENIQ_INI=niq.ini
SUNOS_INI=SunOS.ini

# DVD LABEL or Jumpstart Directory where all ENIQ SW will reside
ENIQ_BASE_SW=eniq_base_sw

# Directory on the root filesystem
ENIQ_ROOT_DIR=/eniq

# Install/Upgrade platform stage
PLATFORM_STAGE="install_ENIQ_platform"

# Database list
DB_LIST="repdb,dwhdb"

# Create a temporary Directory
TEM_DIR=/tmp/install_platform.$$.$$

# This is the ini file containing provision data of mediation-gateway
MG_PRO_INI=mg_pro.ini

# ********************************************************************
#
#       Functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   error signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO "\nERROR : $_err_msg_\n"|$TEE -a ${LOGFILE}
else
    $ECHO "\nERROR : $_err_msg_\n"
fi

cd $SCRIPTHOME

cleanup_manage_features

$RM -rf ${TEM_DIR}

if [ "$2" ]; then
    ${2}
else
   exit 1
fi
}

###Function: backup_mg_ini ###
#  This function will backup and restore mg-pro.ini from
#
#
# Arguments:
#       action => backup/restore
# Return Values:
#       none
backup_restore_mg_ini()
{
    _action_=$1
    if [ ${_action_} == "backup" ]; then
        log_msg -l ${LOGFILE} -q -s "\nTaking backup of ${MG_PRO_INI}"
        $CP ${ENIQ_MEDIATION_INTER_ETC}/${MG_PRO_INI} ${MG_INI_BACKUP_DIR}
        if [ $? -ne 0 ]; then
            _err_msg_="Could not copy ${ENIQ_MEDIATION_INTER_ETC}/${MG_PRO_INI}\nto ${MG_INI_BACKUP_DIR}"
            abort_script "$_err_msg_"
        fi
    else
        if [ ! -d "$ENIQ_MEDIATION_INTER_ETC" ]; then
            _err_msg_="$ENIQ_MEDIATION_INTER_ETC doesn't exist,Aborting script"
            abort_script "$_err_msg_"
        fi
        log_msg -l ${LOGFILE} -q -s "\nRestoring ${MG_PRO_INI}"
        $CP ${MG_INI_BACKUP_DIR}/${MG_PRO_INI} ${ENIQ_MEDIATION_INTER_ETC}
        if [ $? -ne 0 ]; then
            _err_msg_="Could not copy ${MG_INI_BACKUP_DIR}/${MG_PRO_INI}\nto ${ENIQ_MEDIATION_INTER_ETC}"
            abort_script "$_err_msg_"
        fi
        $RM -f ${MG_INI_BACKUP_DIR}/${MG_PRO_INI}
        if [ $? -ne 0 ]; then
            _err_msg_="Could not remove ${MG_INI_BACKUP_DIR}/${MG_PRO_INI}\n"
            abort_script "$_err_msg_"
        fi
    fi
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}

### Function: chk_create_logfile ###
#
# Check/Create Logfile
#
# Arguments:
#   none
# Return Values:
#   none
chk_create_logfile()
{
$MKDIR -p `$DIRNAME ${LOGFILE}`
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory `$DIRNAME ${LOGFILE}`"
     abort_script "$_err_msg_"
fi

$TOUCH -a ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not write to file ${LOGFILE}"
    abort_script "$_err_msg_"
fi
}

### Function: cleanup_manage_features###
#
#   Remove un-used files,reset files that were changed for the upgrade
#
# Arguments:
#   none
# Return Values:
#   none
cleanup_manage_features()
{
# Get the System User/Group. All directories are owned by this
_sysuser_=`iniget ENIQ_INSTALL_CONFIG -f ${ENIQ_CONF_DIR}/${SUNOS_INI} -v ENIQ_SYSUSER`
if [ ! "${_sysuser_}" ]; then
    _err_msg_="Could not read parameter ENIQ_SYSUSER from file ${ENIQ_CONF_DIR}/${SUNOS_INI}"
    abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi

_sysgrp_=`$ID ${_sysuser_} | $NAWK '{print $2}' | $NAWK -F\( '{print $2}' | $NAWK -F\) '{print $1}'`
if [ ! "${_sysgrp_}" ]; then
    _err_msg_="Could not determine group ID of ${_sysgrp_}"
    abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi

# Reset the engine smf_contract with the orignal engine entry
if [ -s ${ENGINE_SMF_CONTRACT_BACKUP} ]; then
        $SVCS /eniq/engine >> /dev/null 2>&1
        if [ $? -eq 0 ] ; then
                # Stats Multiblade would have engine started on the coordinator so shut it down before switching
                # it to disabled in the smf_contract_config file for the coordinator
                log_msg -l ${LOGFILE} -s "Stopping engine if it is running locally..."
                log_msg -l ${LOGFILE} -q -s "using command:"
                log_msg -l ${LOGFILE} -q -s "/usr/bin/bash ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh -a stop -s engine -N -l ${LOGFILE}"
                /usr/bin/bash ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh -a stop -s engine -N -l ${LOGFILE}
        fi

        local _smf_engine_orig_=`$CAT $ENGINE_SMF_CONTRACT_BACKUP | $NAWK -F"::" '{print $1," ",$2," ",$3," ",$4}'`
        log_msg -l ${LOGFILE} -s "Changing engine in ${SMF_CONTRACT_FILE} to ${_smf_engine_orig_}"
        update_smf_contract_config ${SMF_CONTRACT_FILE} ${_smf_engine_orig_}
        if [ $? -ne 0 ]; then
                _err_msg_="Failed to update ${SMF_CONTRACT_FILE} with ${_smf_engine_orig_}"
                abort_script "$_err_msg_"
        fi

        $RM -f ${ENGINE_SMF_CONTRACT_BACKUP}
fi

# Reset the engine service_names with the orignal engine entry
if [ -s ${ENGINE_SERVICE_NAME_BACKUP} ]; then
        local _engine_="engine"
        local _service_engine_orig_=`$CAT $ENGINE_SERVICE_NAME_BACKUP | $NAWK -F"::" '{print $1," ",$2}'`

        log_msg -l ${LOGFILE} -s "Changing engine service names back ${_service_engine_orig_}"
        update_service_file ${SERVICENAME_FILE} ${_service_engine_orig_} ${_engine_} "NULL_GRP"
        if [ $? -ne 0 ]; then
                _err_msg_="Failed to update ${SERVICENAME_FILE} with ${_service_engine_orig_} ${_engine_}"
                abort_script "$_err_msg_"
        fi

        log_msg -l ${LOGFILE} -q -s "Changing ownership of ${SERVICENAME_FILE} to ${_sysuser_}:${_sysgrp_} after updates"
        $CHOWN ${_sysuser_}:${_sysgrp_} ${SERVICENAME_FILE}
        if [ $? -ne 0 ]; then
            _err_msg_="Failed to change ownership of ${SERVICENAME_FILE} to ${_sysuser_}:${_sysgrp_}"
            abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
        fi

        $RM -f ${ENGINE_SERVICE_NAME_BACKUP}
fi

# Unlock events UI users.
if [ ${INSTALL_TYPE} == "events" ]; then
        $SU - ${SYSUSER} -c "engine -e lockEventsUIusers off"
        if [ $? -ne 0 ]; then
                log_msg -l ${LOGFILE} -s "Failed to unlock ENIQ Events UI users"
        else
                log_msg -l ${LOGFILE} -s "Successfully unlocked ENIQ Events UI users"
        fi
fi

# Revert repdb.cfg connection parameter from -gm 200 to -gm 100.
if [ -f ${REP_DB_DIR}/repdb.cfg_${RUN_TIME} ]; then
        log_msg -s "Restoring original ${REP_DB_DIR}/repdb.cfg_${RUN_TIME} file to ${REP_DB_DIR}/repdb.cfg" -l ${LOGFILE}
        $CP ${REP_DB_DIR}/repdb.cfg_${RUN_TIME} ${REP_DB_DIR}/repdb.cfg
        if [ $? -ne 0 ]; then
                _err_msg_="Could not copy ${REP_DB_DIR}/repdb.cfg_${RUN_TIME} to ${REP_DB_DIR}/repdb.cfg"
                abort_script "$_err_msg_"
        fi
        $RM -f ${REP_DB_DIR}/repdb.cfg_${RUN_TIME}
fi


}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#       none
# Return Values:
#       none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}


### Function: provision_mg_workflows ###
#
# Provision Mediation Gateway Workflows
#
# Arguments:
#         none
# Return Values:
#         none
provision_mg_workflows()
{
  local _action_=$1
  if [ ! ${_action_} ]; then
    _err_msg_="No action provided. Unable to provision WFs."
    abort_script "$_err_msg_"
  fi
  # Start the Databases

  start_dwhdb_repdb

  _new_perms_="550"
  # Attempt to automatically provision workflows
  if [ ! -s ${MEDIATION_INTER_BIN}/provision_mg_workflows.bsh ]; then

    #Fetch the provision_mg_workflows.bsh file if it is not present on lab
    cd ${MEDIATION_INTER}
    ${UNZIP} ${BASE_SW_DIR}/applications/mediation_gateway/mediation_gateway_*.zip bin/provision_mg_workflows.bsh
    if [ $? -ne 0 ]; then
      _err_msg_="Cannot Fetch the file provision_mg_workflows.bsh from MWS."
      abort_script "$_err_msg_"
    fi

    # Need to change the permission of the file
    ${CHMOD} ${_new_perms_} ${MEDIATION_INTER_BIN}/provision_mg_workflows.bsh
    if [ $? -ne 0 ]; then
      _err_msg_="Cannot change permission of the file ${MEDIATION_INTER_BIN}/provision_mg_workflows.bsh to ${_new_perms_} for automatic workflow provisioning.\n Please
provision all MG workflows manually."
      abort_script "$_err_msg_"
    fi
    # Need to change the ownership of the file
    ${CHOWN} ${SYSUSER}:${_sysgrp_} ${MEDIATION_INTER_BIN}/provision_mg_workflows.bsh
    if [ $? -ne 0 ]; then
      _err_msg_="Could not set ownership of the file ${MEDIATION_INTER_BIN}/provision_mg_workflows.bsh to to ${SYSUSER}:${_sysgrp_} for automatic workflow provisioning.
\n Please provision all MG workflows manually."
      abort_script "$_err_msg_"
    fi

  fi

  ${MEDIATION_INTER_BIN}/provision_mg_workflows.bsh -a ${_action_} -l ${LOGFILE}
  if [ $? -ne 0 ]; then
    _err_msg_="Could not automatically provision MG workflows."
    abort_script "$_err_msg_"
  fi
}

### Function: set_engine ###
#
# Set Engine profile to Normal
#
# Arguments:
#       none
# Return Values:
#       none
set_engine()
{
CURRENT_ENGINE_PROFILE=`$SU - ${_sysuser_} -c "engine -e getCurrentProfile"`
$ECHO ${CURRENT_ENGINE_PROFILE} | $GREP -i "normal" > /dev/null 2>&1
if [ $? -ne 0 ] ; then
    local RETRY_COUNT=3
    while [ ${RETRY_COUNT} -gt 0 ]; do
        set_engine_profile "Normal"
        if [ $? -ne 0 ]; then
            log_msg -q -t -l ${LOGFILE} -s "Failed to set engine to Normal profile."
        fi
        let RETRY_COUNT=RETRY_COUNT-1
    done
fi
}

### Function: setup_env ###
#
# Setup up path environment etc
#
# Arguments:
#    none
# Return Values:
#    none
setup_env()
{
if [ ! "${ENIQ_BASE_DIR}" ]; then
    ENIQ_BASE_DIR=${ENIQ_ROOT_DIR}
fi

ENIQ_CONF_DIR=${ENIQ_BASE_DIR}/installation/config
if [ ! -s ${ENIQ_CONF_DIR}/SunOS.ini ]; then
    _err_msg_="Could not locate file ${ENIQ_CONF_DIR}/SunOS.ini"
    abort_script "$_err_msg_"
fi

CLI_CONF_DIR=${ENIQ_BASE_DIR}/sw/conf
if [ ! -s ${CLI_CONF_DIR}/niq.ini ]; then
    _err_msg_="Could not locate file ${CLI_CONF_DIR}/niq.ini"
    abort_script "$_err_msg_"
fi

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=`$DIRNAME ${SCRIPTHOME}`

# Admin directory in the ENIQ filesystem
ENIQ_ADMIN_DIR=${ENIQ_ROOT_DIR}/admin

# Installer directory in the ENIQ filesystem
ENIQ_INSTALLER_DIR=${ENIQ_ROOT_DIR}/sw/installer

# TP Install program
TP_INSTALLER="tp_installer"

# Admin dir
ENIQ_ADMIN_BIN_DIR=${ENIQ_ADMIN_DIR}/bin
ENIQ_ADMIN_ETC_DIR=${ENIQ_ADMIN_DIR}/etc

if [ ! -s ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh ]; then
    _err_msg_="Failed to locate ENIQ service manager script - ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh"
    abort_script "$_err_msg_"
fi

# Core install bin dir
ENIQ_CORE_BIN_DIR=${ENIQ_BASE_DIR}/installation/core_install/bin

# Connectd dir
ENIQ_CONNECTD_DIR=${ENIQ_BASE_DIR}/connectd

#Mediation Inter directory
MEDIATION_INTER=${ENIQ_BASE_DIR}/mediation_inter

# Mediation Inter bin directory
MEDIATION_INTER_BIN=${ENIQ_BASE_DIR}/mediation_inter/bin

# directory where we want the mg_pro.ini to be backed up before upgrade
MG_INI_BACKUP_DIR=${ENIQ_BASE_DIR}/mediation_sw/

# directory where mg_pro.ini reside
ENIQ_MEDIATION_INTER_ETC=${ENIQ_BASE_DIR}/mediation_inter/etc/

#directory where we install mediation_gateway
MEDIATION_GATEWAY_HOME=${MG_INI_BACKUP_DIR}/mediation_gw

CURR_SERVER_TYPE=`$CAT $ENIQ_CONF_DIR/installed_server_type | $GEGREP -v '^[[:blank:]]*#' | $SED -e 's/ //g'`
if [ ! "${CURR_SERVER_TYPE}" ]; then
        _err_msg_="Could not determine which server type this is"
    abort_script "$_err_msg_"
fi

# File containing the type of OSS installation. Eg. events or statistics
INST_TYPE_FILE=${ENIQ_CONF_DIR}/ericsson_use_config
if [ ! -s "${INST_TYPE_FILE}" ]; then
    _err_msg_="ENIQ install type not defined in ${INST_TYPE_FILE}"
    abort_script "$_err_msg_"  "${EXEC_SHELL_CMD}"
fi
# Read the installation type - should be "events" or "stats"
INSTALL_TYPE=`$CAT ${INST_TYPE_FILE} | $NAWK -F\= '{print $2}'`

#smf_contract_config
ENIQ_CORE_DIR=${ENIQ_BASE_DIR}/installation/core_install

SMF_CONTRACT_FILE=${ENIQ_ADMIN_ETC_DIR}/smf_contract_config

#hostname of local host
HNAME=`${MYHOSTNAME}`

#IP of local host
HOST_IP=`$GETENT hosts ${HNAME} | $NAWK '{print $1}' | $HEAD -1`
if [ ! -s ${CLI_CONF_DIR}/service_names ]; then
    _err_msg_="Could not locate file ${CLI_CONF_DIR}/service_names"
    abort_script "$_err_msg_"
else
        SERVICENAME_FILE=${CLI_CONF_DIR}/service_names
fi

# Set the log directory
LOGFILE_DIR="$ENIQ_BASE_DIR/log/sw_log/platform_installer/platform_management_log"

# Set the back file for the engine entry in the service_names file
ENGINE_SERVICE_NAME_BACKUP=${CLI_CONF_DIR}/service_names_engine_backup

# Set the back file for the engine entry in the smf_contract_config
ENGINE_SMF_CONTRACT_BACKUP=${ENIQ_ADMIN_ETC_DIR}/smf_contract_engine_backup

# Get the System User
_sysuser_=`iniget ENIQ_INSTALL_CONFIG -f ${ENIQ_CONF_DIR}/${SUNOS_INI} -v ENIQ_SYSUSER`
if [ ! "${_sysuser_}" ]; then
    _err_msg_="Could not read parameter ENIQ_SYSUSER from file ${ENIQ_CONF_DIR}/${SUNOS_INI}"
    abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi

GET_IP_ORDER_SCRIPT=${ENIQ_CORE_DIR}/lib/get_ip_order.pl
if [ ! -s "${GET_IP_ORDER_SCRIPT}" ]; then
        _err_msg_="Could not find script: ${GET_IP_ORDER_SCRIPT}"
        abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi

#Set the repdb directory
REP_DB_DIR="${ENIQ_BASE_DIR}/database/rep_main"

}

### Function: start_dwhdb_repdb ###
#
# start the required eniq database before upgrade platform modules
#
# Arguments:
#   none
# Return Values:
#   none
start_dwhdb_repdb()
{
if [ "${CURR_SERVER_TYPE}" != "eniq_es" ] ; then
   local _status_dwhdb=`$SVCS -a | $GREP dwhdb | $AWK '{print $1}'`
   local _status_repdb=`$SVCS -a | $GREP repdb | $AWK '{print $1}'`
   if [ ${_status_dwhdb} != 'online' -o ${_status_repdb} != 'online' ]; then
       log_msg -t -l ${LOGFILE} -s "Starting ENIQ databases"
       ${BASH} ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh -a start -s $DB_LIST -N -l ${LOGFILE}
       if [ $? -ne 0 ]; then
           _err_msg_="Failed to start the ENIQ databases"
           abort_script "$_err_msg_"
       fi
       $ECHO "`$DATE '+%Y-%b-%d_%H.%M.%S'` - Please wait while database state changes"
       $SLEEP 30
   fi

fi
}

### Function: setup_manage_features###
#
#   Setup server to run managed features
#
# Arguments:
#   none
# Return Values:
#   none
setup_manage_features()
{
# Get the System User/Group. All directories are owned by this
_sysuser_=`iniget ENIQ_INSTALL_CONFIG -f ${ENIQ_CONF_DIR}/${SUNOS_INI} -v ENIQ_SYSUSER`
if [ ! "${_sysuser_}" ]; then
        _err_msg_="Could not read parameter ENIQ_SYSUSER from file ${ENIQ_CONF_DIR}/${SUNOS_INI}"
        abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi

_sysgrp_=`$ID ${_sysuser_} | $NAWK '{print $2}' | $NAWK -F\( '{print $2}' | $NAWK -F\) '{print $1}'`
if [ ! "${_sysgrp_}" ]; then
        _err_msg_="Could not determine group ID of ${_sysgrp_}"
        abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi

local _engine_="engine"

# Setup the engine smf_contract_config and service _name if smf_contract not set to Y
$CAT $SMF_CONTRACT_FILE | $EGREP $CURR_SERVER_TYPE | $EGREP ${_engine_} > ${ENGINE_SMF_CONTRACT_BACKUP}
local _enable_engine_=`$CAT $ENGINE_SMF_CONTRACT_BACKUP | $NAWK -F"::" '{print $4}'`
if [ "${_enable_engine_}" == "Y" ]; then
        log_msg -l ${LOGFILE} -s "$SMF_CONTRACT_FILE engine set to Y"
        $RM ${ENGINE_SMF_CONTRACT_BACKUP}
else
        log_msg -l ${LOGFILE} -s "Changing engine in $SMF_CONTRACT_FILE for $CURR_SERVER_TYPE to Y"
        local smf_to_change=`$CAT $ENGINE_SMF_CONTRACT_BACKUP | $NAWK -F"::" '{print $1," ",$2," ",$3}'`
        update_smf_contract_config ${SMF_CONTRACT_FILE} ${smf_to_change} "Y"
        if [ $? -ne 0 ]; then
                _err_msg_="Failed to update ${SMF_CONTRACT_FILE} with ${smf_to_change} Y"
                abort_script "$_err_msg_"
        fi

        # Setup the engine service names
        get_service_details "${_engine_}" "${SERVICENAME_FILE}" > ${ENGINE_SERVICE_NAME_BACKUP}
        if [ ! -s ${ENGINE_SERVICE_NAME_BACKUP} ]; then
                _err_msg_="Failed to get details ${SERVICENAME_FILE} with ${_engine_}"
                abort_script "$_err_msg_"
        fi

        local _engine_orig_ip_=`$CAT $ENGINE_SERVICE_NAME_BACKUP | $NAWK -F"::" '{print $1}'`
        if [ "${HOST_IP}" == "${_engine_orig_ip_}" ] ; then
                $RM -f ${ENGINE_SERVICE_NAME_BACKUP}
        else
                log_msg -l ${LOGFILE} -s "Changing engine in ${SERVICENAME_FILE} to current ${HOST_IP} ${HNAME} "
                update_service_file ${SERVICENAME_FILE} ${HOST_IP} ${HNAME} ${_engine_} "NULL_GRP"
                if [ $? -ne 0 ]; then
                        _err_msg_="Failed to update ${SERVICENAME_FILE} with ${HOST_IP} ${HNAME} ${_engine_}"
                        abort_script "$_err_msg_"
                fi

                log_msg -l ${LOGFILE} -q -s "Changing ownership of ${SERVICENAME_FILE} to ${_sysuser_}:${_sysgrp_} after updates"
                $CHOWN ${_sysuser_}:${_sysgrp_} ${SERVICENAME_FILE}
                if [ $? -ne 0 ]; then
                        _err_msg_="Failed to change ownership of ${SERVICENAME_FILE} to ${_sysuser_}:${_sysgrp_}"
                        abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
                fi
        fi
fi
}


### Function: update_smf_contract_config###
#
# This function will update the smf_contract_config
# file with the following format
##<server_type>::<SMF_contract>::<Y/N/X>
# Arguments:
#       $1 : _smf_contract_config file_
#       $2 : _server_type_
#       $3 : _service_type_
#       $4 : _smf_contract_
#       $5 : _smf_contract_value_       (options are <Y/N/X>)

# Return Values:
#       : details of Service
update_smf_contract_config()
{
local _smf_contract_config_=$1
local _server_type_=$2
local _service_type_=$3
local _smf_contract_=$4
local _smf_contract_value_=$5

local _smf_server_contract_="${_server_type_}::${_service_type_}::${_smf_contract_}::"
if [ ! "${_smf_contract_config_}" -o ! "${_server_type_}" -o ! "${_service_type_}" -o ! "${_smf_contract_}" -o ! "${_smf_contract_value_}" ]; then
    abort_script "Incorrect arguments passed to update_smf_contract_config function"
    exit 1
fi

if [ -s ${_smf_contract_config_} ]; then
        local _tmp_smf_file_=${TEM_DIR}/smf_contract_config.$$.$$
        $CAT ${_smf_contract_config_} | $SED -e "s/${_smf_server_contract_}.*/${_smf_server_contract_}${_smf_contract_value_}/g" > ${_tmp_smf_file_}
        if [ -s ${_tmp_smf_file_} ]; then
                $CP ${_tmp_smf_file_} ${_smf_contract_config_}
                if [ $? -ne 0 ]; then
                        _err_msg_="Could not copy ${_tmp_smf_file_} to ${_smf_contract_config_}"
                        abort_script "$_err_msg_"
                fi
        else
                _err_msg_="Could not update  ${_smf_contract_config_} with $_smf_server_contract_} ${smf_contract_value}"
            abort_script "$_err_msg_"
        fi
else
        _err_msg_="${_smf_contract_config_} does not exist"
        abort_script "$_err_msg_"
fi
}

### Function: upgrade_platform_modules ###
#
# Upgrade ENIQ platform
#
# Arguments:
#       none
# Return Values:
#       none
upgrade_platform_modules()
{
if [ ! -s ${ENIQ_CORE_BIN_DIR}/eniq_core_install.bsh ]; then
        _err_msg_="Could not locate ${ENIQ_CORE_BIN_DIR}/eniq_core_install.bsh script"
    abort_script "$_err_msg_"
fi

if [ "${CURR_SERVER_TYPE}" == "eniq_es" -o "${CURR_SERVER_TYPE}" == "eniq_events" -o "${CURR_SERVER_TYPE}" == "eniq_coordinator" -o "${CURR_SERVER_TYPE}" == "eniq_iqw" ] ; then
        PLATFORM_STAGE="${PLATFORM_STAGE} install_es_mediation"
fi

if [ "${CURR_SERVER_TYPE}" == "stats_coordinator" -o "${CURR_SERVER_TYPE}" == "eniq_coordinator" -o "${CURR_SERVER_TYPE}" == "eniq_events" -o "${CURR_SERVER_TYPE}" == "eniq_stats" ]; then

    PLATFORM_STAGE="${PLATFORM_STAGE} configure_ddc"
fi

# Ensure the DBs are started
start_dwhdb_repdb

# Upgrade the platform
log_msg -t -l ${LOGFILE} -s "Starting to upgrade ENIQ platform and SMF"
log_msg -l ${LOGFILE} -q -s "Using command:"
log_msg -l ${LOGFILE} -q -s "$BASH ${ENIQ_CORE_BIN_DIR}/eniq_core_install.bsh -s ${_stage_} -n -d $BASE_SW_DIR -u -l ${LOGFILE}"

for _stage_ in ${PLATFORM_STAGE}; do
        $BASH ${ENIQ_CORE_BIN_DIR}/eniq_core_install.bsh -s ${_stage_} -n -d $BASE_SW_DIR -u -l ${LOGFILE}
        if [ $? -ne 0 ]; then
                _err_msg_="Failed in core install stage ${_stage_}"
                abort_script "$_err_msg_"
        fi
done

if [ "${CURR_SERVER_TYPE}" != "eniq_es" ] ; then
        # Ensure the DBs are started
        log_msg -t -l ${LOGFILE} -s "Restarting ENIQ databases"
        $BASH ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh -a restart -s $DB_LIST -N -l ${LOGFILE}
        if [ $? -ne 0 ]; then
            _err_msg_="Failed to restart the ENIQ databases"
                abort_script "$_err_msg_"
        fi

        log_msg -l ${LOGFILE} -s "`$DATE '+%Y-%b-%d_%H.%M.%S'` - Please wait while database state changes"
        $SLEEP 120
fi

}

### Function: usage_msg ###
#
#   Print out the usage message
#
# Arguments:
#       none
# Return Values:
#       none
usage_msg()
{
$CLEAR
$ECHO "
Usage: `$BASENAME $0` -a { add -F <feature_file> | update [ -F <feature_file> -f <list_of_features> ] }
                      -d <eniq_sw_dir> [ -b <eniq_base_dir> ] [ -l <path_to_logfile> ]

options:

-a  : Feature Action. Must be either
              add      --> Add specified Features(s)
              update   --> Update specified Features(s)

-b  : Optional parameter specifying the full path to where the ENIQ
      BASEDIR directory is (eg. /eniq). If not specified, then the
      script will assume the the base directory is /eniq

-d  : Parameter specifying the full path to the directory
      containing the ENIQ BASE SW directory structure. Under this
      directory, script will locate a file that contains a list of
      features available for installation/activation.
      EG. <path_base_dir_sw>/eniq_techpacks/feature_descriptions

-F  : Full Path to file containing list of features to be installed
      Must be in the format of one Features per line E.g CXC12345679

-f  : Comma delimited (no space) list of ENIQ features. Must be in
      the following format e.g -f CXC12345679,CXC987654321,CXC24681357

      If all installed features are to be upgraded, then the keyword
      'ALL' can be used e.g. -f ALL

-l  : Optional parameter specifying the full path to logfile. If not specified, a
      logfile will be created in ${LOGFILE_DIR}
-X  : Optional parameter to only be used during installation or upgrade. If specified
      tp_installer will presume engine/scheduler are not started under SMF control
      and are running on the same host as the installation is being done on.

      If the -X arguement is NOT specified, tp_installer will lookup the service_names
      file to determine the host that it should call the SMF commands on.

-O  : Optional argument to skip platform upgrade

-R      : Optional argument to use rolling upgrade/install of features."
}

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************
#
RUN_TIME=`$DATE '+%Y-%b-%d_%H.%M.%S'`

# Determine absolute path to software
get_absolute_path

# Check that the effective id of the user is root
check_id $DEFAULT_USER

while getopts ":b:d:l:N" arg; do
  case $arg in
    b) ENIQ_BASE_DIR="$OPTARG"
       ;;
    d) BASE_SW_DIR="$OPTARG"
       ;;
    l) LOGFILE="$OPTARG"
       ;;
    N) NO_CONFIRM="YES"
       ;;
   \?) usage_msg
       exit 1
       ;;
  esac
done
shift `expr $OPTIND - 1`

# Source the common functions
if [ -s ${ENIQ_ROOT_DIR}/admin/lib/common_functions.lib ]; then
    . ${ENIQ_ROOT_DIR}/admin/lib/common_functions.lib
else
    _err_msg_="File ${ENIQ_ROOT_DIR}/admin/lib/common_functions.lib not found"
    abort_script "$_err_msg_"
fi

# Setup up path environment etc
setup_env

if [ ! "${LOGFILE}" ]; then
    LOGFILE=${LOGFILE_DIR}/upgrade_platform_modules.log
fi

# Check/Create Logfile
chk_create_logfile

log_msg -h -t -l ${LOGFILE} -q -s "Starting to execute upgrade_platform_modules.bsh"

#clean temp directory
$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory ${TEM_DIR}"
    abort_script "$_err_msg_"
fi

# only do this if this a stats_coordinator.
if [ "${CURR_SERVER_TYPE}" == "stats_coordinator" ]; then
    # Setup before running main tasks in manage_features i.e. setup engine to start in current machine,
    setup_manage_features
fi

if [ "${CURR_SERVER_TYPE}" == "eniq_es" -o "${CURR_SERVER_TYPE}" == "eniq_events" -o "${CURR_SERVER_TYPE}" == "eniq_coordinator" -o "${CURR_SERVER_TYPE}" == "eniq_iqw" ] ; then 
    provision_mg_workflows pre
    #taking backup of mg_pro.ini before doing platform upgrade
    backup_restore_mg_ini backup
fi

upgrade_platform_modules

if [ "${CURR_SERVER_TYPE}" == "eniq_es" -o "${CURR_SERVER_TYPE}" == "eniq_events" -o "${CURR_SERVER_TYPE}" == "eniq_coordinator" -o "${CURR_SERVER_TYPE}" == "eniq_iqw" ] ; then
        #restoring mg_pro.ini after doing platform upgrade
        backup_restore_mg_ini restore
fi

# Cleanup from the acivites in setup_manage_features
cleanup_manage_features

# Set enigne profile to Normal
set_engine

$RM -rf ${TEM_DIR}

exit 0 

