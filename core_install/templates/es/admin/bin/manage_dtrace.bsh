#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2018 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : manage_dtrace.bsh
# Date    : 20/12/2018
# Revision: \main\38
# Purpose : Manage on each machine where it is running.
#           enable/disable/remove logs.
#
# Usage   : manage_dtrace.bsh
#
# ********************************************************************
#
#       Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
BASH=/usr/bin/bash
CAT=/usr/bin/cat
CP=/usr/bin/cp
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO=/usr/bin/echo
EGREP=/usr/bin/egrep
GETENT=/usr/bin/getent
GREP=/usr/bin/grep
HEAD=/usr/bin/head
MKDIR=/usr/bin/mkdir
MYHOSTNAME=/usr/bin/hostname
PERL=/usr/bin/perl
RM=/usr/bin/rm
SED=/usr/bin/sed
SU=/usr/bin/su
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch

# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************
# Default user
DEFAULT_USER=root
DCUSER=dcuser

# Name of SunOS & ENIQ ini Files
ENIQ_ENV=niq.rc
ENIQ_INI=niq.ini
SUNOS_INI=SunOS.ini

# DVD LABEL or Jumpstart Directory where all ENIQ SW will reside
ENIQ_BASE_SW=eniq_base_sw

# Directory on the root filesystem
ENIQ_ROOT_DIR=/eniq

TMP_DIR=/tmp

# Admin directory in the ENIQ filesystem
ENIQ_ADMIN_DIR=${ENIQ_ROOT_DIR}/admin

if [ ! "${ENIQ_BASE_DIR}" ]; then
    ENIQ_BASE_DIR=${ENIQ_ROOT_DIR}
fi

HNAME=`${MYHOSTNAME}`
HOST_IP=`$GETENT hosts ${HNAME} | $AWK '{print $1}' | $HEAD -1`

#smf_contract_config
ENIQ_CORE_DIR=${ENIQ_BASE_DIR}/installation/core_install

GET_IP_ORDER_SCRIPT=${ENIQ_CORE_DIR}/lib/get_ip_order.pl
if [ ! -s "${GET_IP_ORDER_SCRIPT}" ]; then
        _err_msg_="Could not find script: ${GET_IP_ORDER_SCRIPT}"
        abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi

DTRACE_LOG_DIRECTORY=${ENIQ_BASE_DIR}/local_logs/Dtrace

# Define path to dtrace flag file.
# This will disable dtrace when it's created/touched.
FLAG_FILE=stop_dtrace.txt
DISABLE_DTRACE_FLAG_FILE=${DTRACE_LOG_DIRECTORY}/${FLAG_FILE}

# File to indicate rolling upgrade.
ROLLING_UPGRADE_FLAG_FILE=/tmp/rolling_upgrade

# Define path to dtrace symlink log file.
# This is created by call_dtrace.bsh.
DTRACE_SYMLINK_LOG_FILE=${DTRACE_LOG_DIRECTORY}/dtrace_symlink_log

# Define path to regeneration script.
REGENERATION_SCRIPT=${ENIQ_ADMIN_DIR}/bin/regenerate_symlinks.bsh
COPIED_REGENERATION_SCRIPT=${DTRACE_LOG_DIRECTORY}/regenerate_symlinks.bsh
DTRACE_SCRIPT=${ENIQ_ADMIN_DIR}/bin/manage_dtrace.bsh


# Define path to call_dtrace script:
CALL_DTRACE_SCRIPT=${ENIQ_ADMIN_DIR}/bin/call_dtrace.bsh

# Create a temporary Directory
TEM_DIR=/tmp/manage_dtrace.$$.$$

# Setup the log file:
LOGFILE_DIR="$ENIQ_BASE_DIR/log/feature_management_log"

RUN_TIME=`$DATE '+%Y-%b-%d_%H.%M.%S'`
LOGFILE=${LOGFILE_DIR}/${RUN_TIME}_manage_dtrace.log

# Dtrace failed flag file:
DTRACE_FAILED_FILE=${LOGFILE_DIR}/dtrace_failure.log

# Flag to check Dtrace is enable
DTRACE_ENABLED=${ENIQ_BASE_DIR}/local_logs/.dtrace_enabled

ENIQ_CONF_DIR=${ENIQ_BASE_DIR}/installation/config
CURR_SERVER_TYPE=`$CAT $ENIQ_CONF_DIR/installed_server_type | $EGREP -v '^[[:blank:]]*#' | $SED -e 's/ //g'`

# ********************************************************************
#
#       Functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This will be called if the script is aborted thru an error
#   error signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO "\nERROR : $_err_msg_\n"|$TEE -a ${LOGFILE}
else
    $ECHO "\nERROR : $_err_msg_\n"
fi

$RM -rf ${TEM_DIR}

if [ "$2" ]; then
    ${2}
else
   exit 1
fi
}

### Function: enable_dtrace ###
#
# Enable dtrace on each blade, if not already running.
#
# Arguments:
#   none
# Return Values:
#   none
enable_dtrace()
{
# Remove Dtrace failed flag file (dtrace_failure.log):
$RM -f ${DTRACE_FAILED_FILE} > /dev/null 2>&1

# Touch flag to check Dtrace is enabled
${TOUCH} ${DTRACE_ENABLED}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create ${DTRACE_ENABLED} flag." 
    abort_script "${_err_msg_}"
fi

# Touch file to indicate upgrade was rolling
run_command "stats_engine|eniq_mz|ec_*|eniq_events|eniq_stats" "touch ${ROLLING_UPGRADE_FLAG_FILE}"

DTRACE_CHECK=default

log_msg -t -l ${LOGFILE} -s "Checking if dtrace is already running"
run_command "stats_engine|eniq_mz|ec_*|eniq_events|eniq_stats" "ps -ef | grep start_dtrace.d | grep -v grep > /dev/null 2>&1" "Checking if dtrace is already running" "" true
if [ $? -eq 0 ]; then
        #Dtrace is running so no need to re-execute the command again
        DTRACE_CHECK=running
fi

if [ "$DTRACE_CHECK" == "running" ]; then
        log_msg -t -l ${LOGFILE} -s "Dtrace already running, Continuing"
        return 0
else
        log_msg -t -l ${LOGFILE} -s "Enabling dtrace"
        run_command "stats_engine|eniq_mz|ec_*|eniq_events|eniq_stats" "${CALL_DTRACE_SCRIPT} -a start > /dev/null 2>&1" "enable dtrace" "background"
fi

}

### Function: disable_dtrace ###
#
# Disable dtrace on each blade after upgrade is successful,
# or after we have finished restoring the symlinks.
#
# Arguments:
#   none
# Return Values:
#   none
disable_dtrace()
{
log_msg -t -l ${LOGFILE} -s "Disabling dtrace"
run_command "stats_engine|eniq_mz|ec_*|eniq_events|eniq_stats" "touch ${DISABLE_DTRACE_FLAG_FILE}" "disable dtrace"
}

### Function: remove_rolling_flag ###
#
# Remove the rolling_upgrade_flag_file
#
# Arguments:
#   none
# Return Values:
#   none
remove_rolling_flag()
{
log_msg -t -l ${LOGFILE} -s "Removing rolling upgrade flag file"
run_command "stats_engine|eniq_mz|ec_*|eniq_events|eniq_stats" "$RM -f ${ROLLING_UPGRADE_FLAG_FILE}" "remove rolling upgrade flag file"
}


### Function: remove_dtrace_log ###
#
# Remove the dtrace log file.
#
# Arguments:
#   none
# Return Values:
#   none
remove_dtrace_log()
{
log_msg -t -l ${LOGFILE} -s "Removing dtrace log"
run_command "stats_engine|eniq_mz|ec_*|eniq_events|eniq_stats" "$RM -f ${DTRACE_SYMLINK_LOG_FILE}*" "remove dtrace log"

}

### Function: clean_tmp_files ###
#
# Remove the last_features file and features_to_be_installed file
#
# Arguments:
#   none
# Return Values:
#   none
clean_tmp_files()
{
log_msg -t -l ${LOGFILE} -s "Removing feature files in /tmp directory"
run_command "eniq_coordinator|stats_coordinator|eniq_events|eniq_stats" "$RM -f /tmp/_upgrade_*" "Remove feature files in /tmp"
}

### Function: copy_scripts ###
#
# Copy regeneration script to location where it won't be rolled back (/eniq/local_logs/Dtrace/ on each blade running dtrace).
# Copy manage_dtrace script to location where it won't be rolled back
#
# Arguments:
#   none
# Return Values:
#   none
copy_scripts()
{
if [ ! -d ${DTRACE_LOG_DIRECTORY} ]; then
	$SU - ${DCUSER} -c "${MKDIR} -p ${DTRACE_LOG_DIRECTORY}"
fi

log_msg -t -l ${LOGFILE} -s "Copying regeneration script and manage_dtrace script"
run_command "stats_engine|eniq_mz|ec_*|eniq_events|eniq_stats" "$SU - dcuser -c \"$CP ${REGENERATION_SCRIPT} ${DTRACE_LOG_DIRECTORY}\"" "copy regeneration script"
# Copy manage_dtrace.bsh to /eniq/local_logs/Dtrace for use after rollback
# Only called from coordinator so OK to run this locally
$SU - dcuser -c "$CP ${DTRACE_SCRIPT} ${DTRACE_LOG_DIRECTORY}"
if [ $? -eq 0 ]; then
	$ECHO "The script ${DTRACE_SCRIPT} has been copied to ${DTRACE_LOG_DIRECTORY} on the co-ordinator for use after rollback"
else
	$ECHO "Failed to copy ${DTRACE_SCRIPT} to ${DTRACE_LOG_DIRECTORY} on the co-ordinator!" 
	$ECHO "Please do this manually before starting the rollback procedure."
fi
}

### Function: regenerate_symlinks ###
#
# Kick off the symlink regeneration script on all mediation blades.
#
#
# Arguments:
#   none
# Return Values:
#   none
regenerate_symlinks()
{
REGEN_CHECK=default

run_command "stats_engine|eniq_mz|ec_*|eniq_events|eniq_stats" "ps -ef | grep regenerate_symlinks.bsh | grep -v grep > /dev/null 2>&1" "Checking if symlink regeneration is already running" "" true
if [ $? -eq 0 ]; then
    REGEN_CHECK=running
fi

if [ "$REGEN_CHECK" == "running" ]; then
    log_msg -t -l ${LOGFILE} -s "Symlink regeneration already running, Continuing"
else
    log_msg -t -l ${LOGFILE} -s "Regenerating symlinks on all symlink processing blades using default dtrace log"
    run_command "stats_engine|eniq_mz|ec_*|eniq_events|eniq_stats" "$SU - dcuser -c \"${COPIED_REGENERATION_SCRIPT} > /dev/null 2>&1\"" "regenerate symlinks" "background"
fi
}

### Function: run_command ###
#
# Run a command remotely.
#
# Arguments:
#   $1 Servers filter. The servers we want to run the command on.
#   $2 Command. The command as a string.
#   $3 Message. Description of the command for printing out to screen/log.
#   $4 background. Set to "background" if the command should be run in the background with &.
#       $5 Return the result of the command do not abort..
# Return Values:
#   none
run_command()
{
local _servers_filter=$1
local _command_=$2
local _message_=$3
local _background_=$4
local _return_result_=$5

# Get an ordered list of servers based on the server_list file:
_dtrace_servers="${TEM_DIR}/manage_dtrace_servers.$$.tmp"
log_msg -t -q -l ${LOGFILE} -s "Running: $PERL ${GET_IP_ORDER_SCRIPT} -f ${_dtrace_servers}"
$PERL ${GET_IP_ORDER_SCRIPT} -f ${_dtrace_servers}

for _line_ in `$CAT ${_dtrace_servers} | $EGREP -i "${_servers_filter}"`; do
    local _ip_address_=`$ECHO ${_line_} | $AWK -F"::" '{print $1}'`
    local _serv_hostname_=`$ECHO ${_line_} | $AWK -F"::" '{print $2}'`
    if [ ! "${_ip_address_}" -o ! "${_serv_hostname_}" ]; then
        _err_msg_="Failed to run command ${_message_}. Could not read required info from $1."
        abort_script "${_err_msg_}"
    fi

    # If the IP found in the order file matches my IP,
    # then I better run the command locally - no need to ssh
    if [ "${_ip_address_}" == "${HOST_IP}" ]; then
        log_msg -t -q -l ${LOGFILE} -s "Running command ${_command_} locally on ${HNAME}"
        local _return_result_code_=0
        if [[ -n ${_background_} ]] && [[ ${_background_} != "" ]]; then
                eval "${_command_} &"
                _return_result_code_=$?
        else
                eval ${_command_}
                _return_result_code_=$?
        fi

        if [ $_return_result_code_ -ne 0 ]; then
            if [ ! "${_return_result_}" ]; then
                abort_script "Failed to run command ${_message_} on ${HNAME}"
            else
                return $_return_result_code_
            fi
        else
            log_msg -t -q -l ${LOGFILE} -s "Ran command ${_message_} on ${HNAME}"
        fi
    else

        local _return_result_code_=0
        if [[ -n ${_background_} ]] && [[ ${_background_} != "" ]]; then
			# We need extra options running the command remotely in the background:
			if [[ "${_command_}" != *nohup* ]]; then
				# Only add nohup if it hasn't been done before.
				# We could be running this command for several servers 
				# and it only need to have this change done once.
				_command_="nohup ${_command_} &"
            fi			
			log_msg -t -q -l ${LOGFILE} -s "Running command ${_command_} on ${_serv_hostname_}"
            run_remote_cmd "${_ip_address_}" "${_command_}" "" "" "disable_tty"
            _return_result_code_=$?
        else
			log_msg -t -q -l ${LOGFILE} -s "Running command ${_command_} on ${_serv_hostname_}"
            run_remote_cmd "${_ip_address_}" "${_command_}" "" ""
            _return_result_code_=$?
        fi

        if [ $_return_result_code_ -ne 0 ]; then
            if [ ! "${_return_result_}" ]; then
                abort_script "Failed to run command ${_message_} on ${_serv_hostname_}"
            else
                return $_return_result_code_
            fi
        else
            log_msg -t -q -l ${LOGFILE} -s "Ran command ${_message_} on ${_serv_hostname_}"
        fi
    fi
done
}

### Function: usage_msg ###
#
#   Print out the usage message
#
# Arguments:
#       none
# Return Values:
#       none
usage_msg()
{
$ECHO "
Usage: `$BASENAME $0` -a {enable | disable | regenerate | cleanup | copy_scripts | dtrace_cleanup | regen_prep} [ -l <path_to_logfile> ]

options:

-a  : Action. Must be either
        enable                           --> enable dtrace on all processing servers
        disable                          --> disable dtrace on all processing servers
        cleanup                          --> remove dtrace log files on all processing servers and rolling upgrade flag file 
                                                ( on the completion of a rollback and regeneration )
        dtrace_cleanup                   --> disable dtrace, remove rolling flag and remove dtrace log files on all processing servers 
                                                ( on successful upgrade )
        regen_prep    					 --> disable dtrace, copy regeneration script and manage_dtrace script on all processing servers and remove rolling upgrade flag and /tmp feature files
        copy_scripts                     --> copy regeneration script and manage_dtrace script on all processing servers
        regenerate                       --> regenerate processed symlinks on all processing servers
                                                ( on the completion of a rollback )

-l  : Optional parameter specifying the full path to logfile. If not specified, a
      logfile will be created in ${LOGFILE_DIR}"

}

### Function: setup_logfile ###
#
# Make sure the log file is created.
#
# Arguments:
#   $1 : Log file
# Return Values:
#       none
setup_logfile()
{
local _log_file_=$1

$MKDIR -p `$DIRNAME ${_log_file_}`
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory for logfile: `$DIRNAME ${_log_file_}`"
     abort_script "$_err_msg_"
fi

if [ ! -f "${_log_file_}" ]; then
    $TOUCH -a ${_log_file_}
        if [ $? -ne 0 ]; then
                _err_msg_="Could not write to file ${_log_file_}"
                abort_script "$_err_msg_"
        fi
fi
}

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************
#
# Source the common functions
if [ -s ${ENIQ_ROOT_DIR}/admin/lib/common_functions.lib ]; then
    . ${ENIQ_ROOT_DIR}/admin/lib/common_functions.lib
else
    _err_msg_="File ${ENIQ_ROOT_DIR}/admin/lib/common_functions.lib not found"
    abort_script "$_err_msg_"
fi

#clean temp directory
$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}

while getopts ":a:l:" arg; do
  case $arg in
  a) ACTION="$OPTARG"
       ACTION_SPECIFIED="YES"
       ;;
  l) LOGFILE="$OPTARG"
       ;;
  *) usage_msg
       exit 1
       ;;
  esac
done

if [ -z ${ACTION_SPECIFIED} ]; then
        usage_msg
                exit 1
fi

# Set up logfile:
setup_logfile ${LOGFILE}


# Trap interrupts ( do nothing )
# Run if Hang up detected on controlling terminal -SIGHUP
# Run if user sends an interrupt signal (Ctrl + C) -SIGINT
# Run if Software termination signal (sent by kill by default) -SIGTERM 
# The SIGABRT signal is sent to a process to tell it to abort, i.e. to terminate -SIGABRT
# SIGQUIT by default, this causes the process to terminate and dump core -SIGQUIT 
# SIGTSTP by default, this causes the process to suspend execution. -SIGTSTP
# SIGUSR1 & SIGUSR2 User-defined signals
# to test e.g. kill -SIGTERM pid
trap 'echo " Signal Trapped, this script can be killed by using kill -9 "' SIGHUP SIGINT SIGTERM SIGABRT SIGQUIT SIGTSTP SIGUSR1 SIGUSR2

case "${ACTION}" in
    enable)		    enable_dtrace
                  ;;
    disable)	    disable_dtrace
                  ;;
    regenerate)   regenerate_symlinks
		    ${RM} -f ${DTRACE_ENABLED}
                  ;;
    cleanup)	    ### on the completion of a rollback and regeneration
                  ### remove the dtarce logs
                  remove_dtrace_log
	           ;;
    copy_scripts) copy_scripts     
                  ;;
    dtrace_cleanup) ### on successful upgrade stop Dtrace and remove logs
                    ### and remove the rolling flag
                    disable_dtrace
                    remove_dtrace_log
                    remove_rolling_flag
		      ${RM} -f ${DTRACE_ENABLED}
                    ;;
	regen_prep)  ### on UNsuccessful upgrade stop Dtrace 
                    ### and copy itself and regen scripts to a directory that doesn't get rolled back
                    ### and remove the rolling flag
		      ### also remove feature files in /tmp
                    disable_dtrace
                    copy_scripts
                    remove_rolling_flag
		      clean_tmp_files
                    ;;
	*) 	      $ECHO "Unknown action: ${ACTION}"
                    ;;
esac

#clean temp directory
$RM -rf ${TEM_DIR}
exit 0


