#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2020 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : manage_oss_ip.bsh
# Date    : 22/04/2020
# Revision: main/7
# Purpose : This script will change the IP of the OSS server ENIQ will connect to. This hostname/alias
#           will be unique.
#
# Usage   : manage_oss_ip.bsh -h <eniq_hname> [ -l <path_to_logfile> ]
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CHOWN=/usr/bin/chown
CLEAR=/usr/bin/clear
CMP=/usr/bin/cmp
CP=/usr/bin/cp
CPIO=/usr/bin/cpio
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
DOMAINNAME=/usr/bin/domainname
DTCONFIG=/usr/dt/bin/dtconfig
ECHO=/usr/bin/echo
EGREP=/usr/bin/egrep
EJECT=/usr/bin/eject
ENV=/usr/bin/env
EXPR=/usr/bin/expr
FIND=/usr/bin/find
FLARCREATE=/usr/sbin/flarcreate
FORMAT=/usr/sbin/format
FUSER=/usr/sbin/fuser
GEGREP=/usr/sfw/bin/gegrep
GETENT=/usr/bin/getent
GETTEXT=/usr/bin/gettext
GREP=/usr/bin/grep
GROUPADD=/usr/sbin/groupadd
GTAR=/usr/sfw/bin/gtar
GZCAT=/usr/bin/gzcat
HEAD=/usr/bin/head
HOSTNAME=/usr/bin/hostname
ID=/usr/bin/id
INIT=/usr/sbin/init
KILL=/usr/bin/kill
LS=/usr/bin/ls
MKDIR=/usr/bin/mkdir
MORE=/usr/bin/more
MV=/usr/bin/mv
NAWK=/usr/bin/nawk
PGREP=/usr/bin/pgrep
PING=/usr/sbin/ping
PKGADD=/usr/sbin/pkgadd
PKGINFO=/usr/bin/pkginfo
PRTCONF=/usr/sbin/prtconf
PS=/usr/bin/ps
PWD=/usr/bin/pwd
RM=/usr/bin/rm
RCP=/usr/bin/rcp
RSH=/usr/bin/rsh
SED=/usr/bin/sed
SLEEP=/usr/bin/sleep
SORT=/usr/bin/sort
SU=/usr/bin/su
SVCADM=/usr/sbin/svcadm
SVCCFG=/usr/sbin/svccfg
SVCS=/usr/bin/svcs
SWAP=/usr/sbin/swap
SYNC=/usr/sbin/sync
TAIL=/usr/bin/tail
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
TPUT=/usr/bin/tput
UADMIN=/usr/sbin/uadmin
UNAME=/usr/bin/uname
USERADD=/usr/sbin/useradd
VOLD=/usr/sbin/vold
WC=/usr/bin/wc
ZFS=/usr/sbin/zfs
ZPOOL=/usr/sbin/zpool

# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************

# Default user
DEFAULT_USER=root



# ********************************************************************
#
#       Pre-execution Operations
#
# ********************************************************************



# ********************************************************************
#
#   Functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   error signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi

log_msg -s "\n$_err_msg_\n" -l ${LOGFILE}

cd $SCRIPTHOME
$RM -rf ${TEM_DIR}

if [ "$2" ]; then
    ${2}
else
   exit 1
fi

$RM -rf ${TEM_DIR}
}


### Function: check_alias_format ###
#
# checks the specified alias is valid format
#
# Arguments:
# 		none
#
# Return Values:
#       none
check_alias_format()
{
	
if [ ! "${1}" ]; then
    _err_msg_="ENIQ HNAME must be passed to function check_alias_format"
     abort_script "$_err_msg_"
fi

local _host_to_use_=${1}
	
# Check that the user specified a ENIQ HNAME format eg. eniq_oss_
log_msg -s "\nChecking ${_host_to_use_} is in a valid format" -l ${LOGFILE}
$ECHO ${_host_to_use_} | $EGREP "${OSS_REF_STR}[1-9][0-9]*"  >> /dev/null 2>&1
if [ $? -ne 0 ]; then
	_err_msg_="Specified alias should be in the correct format eg. ${OSS_REF_STR}1"
	abort_script "$_err_msg_"
fi

# Have we previous OSS defined
if [ ! -s ${OSS_REF_NAME_FILE} ]; then
    _err_msg_="No OSS's are currently managed by this ENIQ server"
    abort_script "$_err_msg_"
fi

# Is the OSS managed
log_msg -s "Checking ${_host_to_use_} is in ${OSS_REF_NAME_FILE}" -l ${LOGFILE}
$CAT ${OSS_REF_NAME_FILE} | $GREP -w ${_host_to_use_} >> /dev/null 2>&1
if [ $? -ne 0 ]; then
    _err_msg_="${_host_to_use_} does not seem to be currently managed by ENIQ server"
    abort_script "$_err_msg_"
fi

# Check that the /etc/hosts file is a symbolic link. If not, get out
#if [ ! -L /etc/hosts ]; then
#    _err_msg_="File /etc/hosts should be a symbolic link to /etc/inet/hosts"
#    abort_script "$_err_msg_"
#fi


}

### Function: change_eniq_oss_ip ###
#
# change the OSS alias IP address
#
# Arguments:
#   $1 : Shared location of OSS reference name file 
#   $2 : OSS alias name to be changed 
#
# Return Values:
#       none
change_eniq_oss_ip()
{

if [ ! "${1}" ]; then
    _err_msg_="ENIQ HNAME must be passed to function change_eniq_oss_ip"
     abort_script "$_err_msg_"
fi

if [ ! "${2}" ]; then
    _err_msg_="OSS reference name file must be passed to function change_eniq_oss_ip"
     abort_script "$_err_msg_"
fi

local _host_to_use_=${1}
local _oss_ref_name_file_=${2}


# Update OSS server Name/IP
update_oss_server_det ${_host_to_use_} ${OSS_REF_NAME_FILE}

setup_update_disp_file

# If there is no file then there is nothing to update
if [ -s  ${TEM_DIR}/disp_file ]; then
    # Confirm that the User still wants to add the OSS
    confirm_user_input ${TEM_DIR}/disp_file

    if [ "${USER_CONF}" == "N" -o "${USER_CONF}" == "n" ]; then
        $RM -rf ${TEM_DIR}
        $ECHO "\n\n"
        exit 0
    fi
else
    $CLEAR
    log_msg -s "\nNo update required....exiting\n\n" -l ${LOGFILE}
    $RM -rf ${TEM_DIR}
    exit 0
fi


# Update the entry in the REF File
update_oss_ref_file ${OSS_REF_NAME_FILE} ${_host_to_use_} ${OLD_SRV_IP} ${NEW_SRV_IP}

	
}

### Function: confirm_user_input ###
#
# Confirm with user that values entered are correct
#
# Arguments:
#       none
# Return Values:
#       none
confirm_user_input()
{
while :; do
    $CLEAR
    $CAT ${1}
    read USER_CONF

    # If the User hit nothing
    if [ ! "${USER_CONF}" ]; then
        continue
    fi

    # Did the user input (Y/y)
    if [ "${USER_CONF}" == "Y" -o "${USER_CONF}" == "y" -o "${USER_CONF}" == "N" -o "${USER_CONF}" == "n" ]; then
        break
    fi
done
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}

### Function: chk_create_logfile ###
#
# Check/Create Logfile
#
# Arguments:
#   none
# Return Values:
#   none
chk_create_logfile()
{
$MKDIR -p `$DIRNAME ${LOGFILE}`
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory `$DIRNAME ${LOGFILE}`"
    abort_script "$_err_msg_"
fi

$TOUCH -a ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not write to file ${LOGFILE}"
    abort_script "$_err_msg_"
fi
}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}

### Function: setup_update_disp_file ###
#
# Set up a file to display out for update details
#
# Arguments:
#   none
# Return Values:
#   none
setup_update_disp_file()
{
# Set up a file to display out
$RM -f ${TEM_DIR}/disp_file


if [ "${NEW_SRV_IP}" != "${OLD_SRV_IP}" ]; then
	$ECHO "\nAlias :\t\t\t${HNAME_HOST}" >> ${TEM_DIR}/disp_file
    $ECHO "Alias IP Address :\t$NEW_SRV_IP" >> ${TEM_DIR}/disp_file
    $ECHO "\nDo you wish to continue to update the OSS Server details (Yy/Nn)" >> ${TEM_DIR}/disp_file
fi



}

### Function: setup_env ###
#
# Setup up path environment etc
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
if [ ! "${ENIQ_BASE_DIR}" ]; then
    ENIQ_BASE_DIR=/eniq
fi

ENIQ_CONF_DIR=${ENIQ_BASE_DIR}/installation/config
if [ ! -s ${ENIQ_CONF_DIR}/ericsson_use_config ]; then
    _err_msg_="Could not locate file ${ENIQ_CONF_DIR}/ericsson_use_config"
    abort_script "$_err_msg_"
fi


# File containing the type of OSS installation. Eg. oss or single
INST_TYPE_FILE=${ENIQ_CONF_DIR}/ericsson_use_config
if [ ! -s "${INST_TYPE_FILE}" ]; then
    _err_msg_="ENIQ install type not defined in ${INST_TYPE_FILE}"
    abort_script "$_err_msg_"
fi
# Read the installation type - should be "events" or "statistics"
INSTALL_TYPE=`$CAT ${INST_TYPE_FILE} | $AWK -F\= '{print $2}'`

# Directory of sw/conf
CLI_CONF_DIR=${ENIQ_BASE_DIR}/sw/conf

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation/core_install

# ENIQ admin bin directory
ENIQ_ADMIN_DIR=${ENIQ_BASE_DIR}/admin

# ENIQ admin bin directory
ENIQ_ADMIN_BIN_DIR=${ENIQ_ADMIN_DIR}/bin

# ENIQ admin bin directory
ENIQ_CONNECTD_DIR=${ENIQ_BASE_DIR}/connectd

# Name of file containing List of used OSS reference names
OSS_REF_NAME_FILE=${CLI_CONF_DIR}/.oss_ref_name_file

# Set the log directory
LOG_DIR=${ENIQ_BASE_DIR}/log
LOGFILE_DIR="$LOG_DIR/manage_oss_ip_log"

CURR_SERVER_TYPE=`$CAT $ENIQ_CONF_DIR/installed_server_type | $EGREP -v  '^[[:blank:]]*#' | $SED -e 's/ //g'`
if [ ! "${CURR_SERVER_TYPE}" ]; then
	_err_msg_="Could not determine which server type this is"
    abort_script "$_err_msg_"
fi

# String denoting the start of and OSS refernce name. Appended
# to this will be the next available number
if [ "${CONN_TYPE}" == "events" ]; then
	OSS_REF_STR="eniq_events_"
else
	if [ "${INSTALL_TYPE}" == "events" -o "${INSTALL_TYPE}" == "es" ]; then
		OSS_REF_STR="events_oss_"
	else
		OSS_REF_STR="eniq_oss_"
	fi
fi

# Source the common functions
if [ -s ${ENIQ_BASE_DIR}/admin/lib/common_functions.lib ]; then
    . ${ENIQ_BASE_DIR}/admin/lib/common_functions.lib
else
    _err_msg_="File ${ENIQ_BASE_DIR}/admin/lib/common_functions.lib not found"
    abort_script "$_err_msg_"
fi


}


### Function: usage_msg ###
#
#   Print out the usage message
#
# Arguments:
#   none
# Return Values:
#   none
usage_msg()
{
$CLEAR
$ECHO "
Usage: `$BASENAME $0` -h <eniq_hname> [ -b <eniq_base_dir> ] [ -l <path_to_logfile> ]
   
options:


-h  : Parameter specifying the ENIQ HNAME. This is only required if an OSS has
	  already been added to the ENIQ server
	  
-b  : Optional parameter specifying the full path to where the ENIQ
      BASEDIR directory is (eg. /eniq). If not specified, then the
      script will assume the the base directory is
      ../../<directory_that_this_script_is_in>

-l  : Optional parameter specifying the full path to logfile. If not specified, a 
      logfile will be created in ${LOGFILE_DIR}
      	       
"
}


# ********************************************************************
#
#   Main body of program
#
# ********************************************************************
#

if [ ${LOGNAME} != "root" ] ; then
	$ECHO "This script has to be run as 'root'. You are currently logged in as '${LOGNAME}'"
	exit 2
fi

# Determine absolute path to software
get_absolute_path

# Check that the effective id of the user is root
check_id $DEFAULT_USER


while getopts ":h:b:l:" arg; do
  case $arg in
    h) HNAME_HOST="$OPTARG"
       ;;
    b) ENIQ_BASE_DIR="$OPTARG"
       ;;
    l) LOGFILE="$OPTARG"
       ;;
   \?) usage_msg
       exit 1
       ;;
  esac
done
shift `expr $OPTIND - 1`


if [ ! "${HNAME_HOST}" ]; then
    usage_msg
    exit 1
fi

# Setup up path environment etc
setup_env

if [ ! "${LOGFILE}" ]; then
	LOGFILE=${LOGFILE_DIR}/manage_oss_ip.log
fi	

# Check/Create Logfile
chk_create_logfile

log_msg -h -t -s "Updating OSS IP for ${HNAME_HOST}" -q -l ${LOGFILE}

# Create a temporary Directory
TEM_DIR=/tmp/manage_eniq_oss.$$.$$
$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory ${TEM_DIR}"
    abort_script "$_err_msg_"
fi


if [ "${CURR_SERVER_TYPE}" == "eniq_events" -o "${CURR_SERVER_TYPE}" == "eniq_stats" -o "${CURR_SERVER_TYPE}" == "eniq_coordinator" \
	-o "${CURR_SERVER_TYPE}" == "stats_coordinator" -o "${CURR_SERVER_TYPE}" == "eniq_es" ]; then
	log_msg -s "Current server type ${CURR_SERVER_TYPE} is correct" -q -l ${LOGFILE}
else
    _err_msg_="This script should not run on this server type ${CURR_SERVER_TYPE}"
    abort_script "$_err_msg_"
fi

#Checks the format of the Alias is in correct format
check_alias_format ${HNAME_HOST}

# run script to change oss ip
change_eniq_oss_ip ${HNAME_HOST} ${OSS_REF_NAME_FILE} 



$RM -rf ${TEM_DIR}

exit 0

