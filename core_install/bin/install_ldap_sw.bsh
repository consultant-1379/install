#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2017 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : install_ldap_sw.bsh
# Date    : 15/04/2017
# Revision: C.5
# Purpose : Main wrapper script handling the installation LDAP. It will
#           call all necessary scripts to complete the installation
#
# Usage   : install_ldap_sw.bsh
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
BASH=/usr/bin/bash
BC=/usr/bin/bc
BOOTADM=/usr/sbin/bootadm
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CHOWN=/usr/bin/chown
CLEAR=/usr/bin/clear
CMP=/usr/bin/cmp
CP=/usr/bin/cp
CPIO=/usr/bin/cpio
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
DLADM=/usr/sbin/dladm
DOMAINNAME=/usr/bin/domainname
DTCONFIG=/usr/dt/bin/dtconfig
DUMPADM=/usr/sbin/dumpadm
ECHO=/usr/bin/echo
EGREP=/usr/bin/egrep
EJECT=/usr/bin/eject
ENV=/usr/bin/env
EXPR=/usr/bin/expr
FIND=/usr/bin/find
FLARCREATE=/usr/sbin/flarcreate
FORMAT=/usr/sbin/format
FUSER=/usr/sbin/fuser
GEGREP=/usr/sfw/bin/gegrep
GETENT=/usr/bin/getent
GETTEXT=/usr/bin/gettext
GREP=/usr/bin/grep
GROUPADD=/usr/sbin/groupadd
GTAR=/usr/sfw/bin/gtar
GZCAT=/usr/bin/gzcat
GZIP=/usr/bin/gzip
HEAD=/usr/bin/head
MYHOSTNAME=/usr/bin/hostname
ID=/usr/bin/id
IFCONFIG=/usr/sbin/ifconfig
INIT=/usr/sbin/init
LN=/usr/bin/ln
LS=/usr/bin/ls
MKDIR=/usr/bin/mkdir
MORE=/usr/bin/more
MOUNT=/usr/sbin/mount
MV=/usr/bin/mv
NAWK=/usr/bin/nawk
NSLOOKUP=/usr/sbin/nslookup
PGREP=/usr/bin/pgrep
PING=/usr/sbin/ping
PKGADD=/usr/sbin/pkgadd
PKGINFO=/usr/bin/pkginfo
PKGRM=/usr/sbin/pkgrm
PRTCONF=/usr/sbin/prtconf
PSRINFO=/usr/sbin/psrinfo
PWD=/usr/bin/pwd
REBOOT=/usr/sbin/reboot
RM=/usr/bin/rm
RCP=/usr/bin/rcp
RSH=/usr/bin/rsh
SED=/usr/bin/sed
SEVEN_Z=/usr/bin/7z
SLEEP=/usr/bin/sleep
SORT=/usr/bin/sort
STMSBOOT=/usr/sbin/stmsboot
SU=/usr/bin/su
SVCADM=/usr/sbin/svcadm
SVCCFG=/usr/sbin/svccfg
SVCS=/usr/bin/svcs
SWAP=/usr/sbin/swap
SYNC=/usr/sbin/sync
TAIL=/usr/bin/tail
TAR=/usr/sbin/tar
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
TPUT=/usr/bin/tput
TR=/usr/bin/tr
UADMIN=/usr/sbin/uadmin
UMOUNT=/usr/sbin/umount
UNAME=/usr/bin/uname
USERADD=/usr/sbin/useradd
VOLD=/usr/sbin/vold
WC=/usr/bin/wc
YES=/usr/bin/yes
ZFS=/usr/sbin/zfs
ZPOOL=/usr/sbin/zpool

# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************

# Default user
DEFAULT_USER=root

UNTAR_SW_NAME="ldap_schema"
INSTALL_SCRIPT="bin/setup_ldap.sh "

USR_JAVA_DIR="/usr/jdk/instances"

# ********************************************************************
#
#       Pre-execution Operations
#
# ********************************************************************

# ********************************************************************
#
#   Functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO "\nERROR : $_err_msg_\n" | $TEE -a ${LOGFILE}
else
    $ECHO -s "\nERROR : $_err_msg_\n"
fi

cd $SCRIPTHOME
$RM -rf ${TEM_DIR}

if [ "$2" ]; then
	if [ ! "${UPGRADE}" ]; then
    	${2}    	
    fi
    exit 1
else
   exit 1
fi
}

### Function: chk_create_logfile ###
#
# Check/Create Logfile
#
# Arguments:
#   none
# Return Values:
#   none
chk_create_logfile()
{
$MKDIR -p `$DIRNAME ${LOGFILE}`
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory `$DIRNAME ${LOGFILE}`"
     abort_script "$_err_msg_"
fi

$TOUCH -a ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not write to file ${LOGFILE}"
    abort_script "$_err_msg_"
fi
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}

### Function: install_configure_ldap_sw ###
#
# Install openDJ
#
# Arguments:
#   none
# Return Values:
#   none
install_configure_ldap_sw()
{
_openDJ_install_script_="${TEM_DIR}/${UNTAR_SW_NAME}/${INSTALL_SCRIPT}"
# Check the SMF script exists
if [ ! -s ${_openDJ_install_script_} ]; then
	_err_msg_="${_openDJ_install_script_} does not exist, or is empty"
    abort_script "$_err_msg_"
fi

# Run the script
log_msg -s "Starting to install openDJ SW" -l "${LOGFILE}"
log_msg -s "using command" -l "${LOGFILE}" -q 
log_msg -s "$BASH ${_openDJ_install_script_} -d ${LDAP_SW_LOC} ${UPGRADE} -l ${LOGFILE}" -q
$BASH ${_openDJ_install_script_} -d ${LDAP_SW_LOC} ${UPGRADE} -l ${LOGFILE}
if [ $? -ne 0 ]; then
	_err_msg_="Problem encountered running ${_openDJ_install_script_}"
    abort_script "$_err_msg_"
fi
}

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{
if [ ! "${ENIQ_BASE_DIR}" ]; then
    # Directory on the root filesystem
    ENIQ_BASE_DIR=/eniq
fi

# ENIQ Log Directory
ENIQ_LOG_DIR=${ENIQ_BASE_DIR}/local_logs

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# ENIQ Config Directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

# Has debug flag been used?
if [ -s ${ENIQ_CONF_DIR}/extra_params/debug ]; then
    set -xv
    BASH="/usr/bin/bash -xv"
fi
}

### Function: untar_sw_bundle ###
#
# Untar the LDAP bundle
#
# Arguments:
#   none
# Return Values:
#   none
untar_sw_bundle()
{
if [ ! -s ${LDAP_SW_LOC}/${LDAP_BUNDLE} ]; then
    _err_msg_="Failed to find LDAP SW bundle - ${LDAP_SW_LOC}/${LDAP_BUNDLE}"
    abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
fi	

cd ${TEM_DIR}
$GZCAT ${LDAP_SW_LOC}/${LDAP_BUNDLE} | $TAR xf -
if [ $? -ne 0 ]; then
	_err_msg_="Problem encountered extracting ${LDAP_SW_LOC}/${LDAP_BUNDLE}"
    abort_script "$_err_msg_"
fi
cd ${SCRIPTHOME}
}

### Function: usage_msg ###
#
#   Print out the usage message
#
# Arguments:
#   none
# Return Values:
#   none
usage_msg()
{
$CLEAR

$ECHO "
Usage: `$BASENAME $0` -b <LDAP_SW_bundle> -p <OpenDJ_package_name> -s <LDAP_sw_location> [-u] [-l <path_to_logfile>]

options:

-b  : Parameter specifying the name of the LDAP SW bundle.

-p  : Parameter specifying the name of the OpenDJ package.
      
-s  : Parameter specifying the full path to the openDJ SW.

-u  : Flag to specify this script is run as part of upgrade.

-m	: Optional parameter, Flag to specify Only Java Installation.

-d	: Optional parameter, Path to ENIQ BASE SW directory structure.

-l  : Optional parameter specifying the full path to logfile. If not specified, a 
      logfile will be created in /eniq/local_logs/installation
"
}

### Function: check_java ###
#
#   Print out the usage message
#
# Arguments:
#   none
# Return Values:
#   0:java not present
#	1:java is present
check_java()
{

log_msg -s "Checking if Java 1.7 is present" -l "${LOGFILE}" -t

$LS -l /usr/jdk/ | $GREP "jdk1\.7\.0_95"
if [ $? -eq 0 ]; then
	
    log_msg -s "Java 1.7 already present at /usr/jdk"  -l "${LOGFILE}"
    _java_present_=1
	
else
	log_msg -s "Java 1.7 not present" -l "${LOGFILE}" -t
	_java_present_=0


fi

}


### Function: install_java ###
#
#   install java 1.7 for 
#
# Arguments:
#   1: LDAP SW Location
#
# Return Values:
#   none
install_java()
{

check_java
if [ ${_java_present_} == "0" ];
then
	
	SW_DIR=$1
	if [ -z $SW_DIR  ]; then
		_err_msg_="SW_DIR for java installation not found"
		abort_script "$_err_msg_"
	fi
	
	TIMESTAMP=`date +%d.%m.%y_%H:%M:%S`
	_tmp_dir_java_=${TEM_DIR}/sw/java
	_tmp_dir_rt_=${TEM_DIR}/sw/runtime
	
	
	$MKDIR -p ${_tmp_dir_java_}
	$MKDIR -p ${_tmp_dir_rt_}
	
	
	log_msg -s "Installing Java 1.7 for openDJ 3.5 installation" -l "${LOGFILE}"
	
	currdir=`pwd`
	OSTYPE=$(uname -s)
	if [ -z $OSTYPE  ]; then
		_err_msg_="OS Type string is null. Aborting"
		abort_script "$_err_msg_"
	fi
	
	log_msg -s "sourcing java 1.7 from runtime package" -l "${LOGFILE}" -t
	
	if [ "$USER_DEF_STAGE" == "install_java" ]; then
	$CP ${SW_DIR}/eniq_sw/runtime* ${_tmp_dir_rt_}
	if [ $? -ne 0 ]; then
		_err_msg_="Problem encountered while copying runtime package for sourcing java for openDJ"
		abort_script "$_err_msg_"
	fi
	else
	$CP ${SW_DIR}/../../eniq_sw/runtime* ${_tmp_dir_rt_}
	if [ $? -ne 0 ]; then
		_err_msg_="Problem encountered while copying runtime package for sourcing java for openDJ"
		abort_script "$_err_msg_"
	fi
	fi
		
	cd ${_tmp_dir_rt_}
	if [ $? -ne 0 ]; then
		_err_msg_="Java package not present in ${_tmp_dir_rt_}. Aborting script"
		abort_script "$_err_msg_"
	fi
	
	RT_PKG_TMP=`ls`
	if [ -z $RT_PKG_TMP  ]; then
		_err_msg_="No files in ${_tmp_dir_rt_}. Aborting"
		abort_script "$_err_msg_"
	fi
	
	log_msg -s "Runtime package $RT_PKG_TMP found" -l "${LOGFILE}" -t -q
	log_msg -s "extracting Runtime package for OpenDJ 3.5 installation" -l "${LOGFILE}" -t -q
	unzip $RT_PKG_TMP >> ${LOGFILE} 2>&1
	if [ $? -ne 0 ]; then
		_err_msg_="Error extracting Java package"
		abort_script "$_err_msg_"
	fi
	log_msg -s "Runtime package extracted successfully (for sourcing java 1.7 for OpenDJ 3.5 installation)" -l "${LOGFILE}" -t -q
	log_msg -s "sourcing Java from Runtime package for OpenDJ 3.5 installation" -l "${LOGFILE}" -t -q
	$CP -r ${_tmp_dir_rt_}/jdk* ${_tmp_dir_java_}
	if [ $? -ne 0 ]; then
		_err_msg_="Problem encountered while copying java package"
		abort_script "$_err_msg_"
	fi
	log_msg -s "Java sourced successfully to ${_tmp_dir_java_}" -l "${LOGFILE}" -t
	
	cd ${_tmp_dir_java_}
	
	log_msg -s "Removing runtime packages ( temporarily extracted for sourcing java 1.7 for OpenDJ 3.5 installation)" -l "${LOGFILE}" -t -q
	$RM -rf ${_tmp_dir_rt_}
	if [ $? -ne 0 ]; then
		_err_msg_="Could not remove temporary runtime directory."
		log_msg -s "$_err_msg_" -l "${LOGFILE}" -t -q
	fi
	
	log_msg -s "Installing JDK" -l "${LOGFILE}" -t 
	if [[ $OSTYPE == CYGWIN* ]] ; then
		PROSTYPE="i386"
	else
		PROSTYPE=`uname -p`
	fi
		
	

	
	if [ $PROSTYPE = "i386" ]
	then
		echo "Server Type is : $PROSTYPE, installing JDK on this."
		cd ./jdk/i386/
		if [ $? -ne 0 ]; then
			_err_msg_="Expected folder not found"
			abort_script "$_err_msg_"
		fi	
		JAVA_TMP=`ls jdk*`
	fi

	if [ -z $JAVA_TMP ]; then
		_err_msg_="${JAVA_TMP} not found. Incompatible java. Aborting script."
		abort_script "$_err_msg_"
	fi  
	
	$CP -r ${JAVA_TMP} ${USR_JAVA_DIR} 
	if [ $? -ne 0 ]; then
		_err_msg_="Could not copy Java at ${USR_JAVA_DIR}"
		abort_script "$_err_msg_"
	fi
	
	
	cd ${USR_JAVA_DIR}
	if [ $? -ne 0 ]; then
		_err_msg_="${USR_JAVA_DIR} not found"
		abort_script "$_err_msg_"
	fi
	
	gunzip ${JAVA_TMP} >> ${LOGFILE} 2>&1
	if [ $? -ne 0 ]; then
		_err_msg_="Could not extract java 1.7"
		abort_script "$_err_msg_"
	fi
	
	JAVA_TMP=`basename ${JAVA_TMP} .gz`
	if [ -z $JAVA_TMP  ]; then
		_err_msg_="JAVA_TMP string is null. Aborting"
		abort_script "$_err_msg_"
	fi
	
	_flags="xf"
	
	
	tar ${_flags} ${JAVA_TMP} >> ${LOGFILE}
	if [ $? -ne 0 ]; then
		_err_msg_="Could not extract java 1.7"
		abort_script "$_err_msg_"
	fi
	
	$RM ${JAVA_TMP} >> ${LOGFILE}
	if [ $? -ne 0 ]; then
		_err_msg_="Could not remove java package file ${JAVA_TMP}"
		log_msg "$_err_msg_"
	fi
	
	
	
	JDK7_DIR=`ls | grep jdk1.7.0_95`
	if [ -z $JDK7_DIR  ]; then
		_err_msg_="JDK7_DIR string is null. Aborting"
		abort_script "$_err_msg_"
	fi	
	
	log_msg -s "Java 1.7 directory is $JDK7_DIR" -l "${LOGFILE}" -t -q
	
	chmod -R 755 ${JDK7_DIR}
	if [ $? -ne 0 ]; then
		_err_msg_="WARNING!! Could not change permissions of installed java"
		log_msg "$_err_msg_"
	fi
	
	chown -R root:bin ${JDK7_DIR}
	if [ $? -ne 0 ]; then
		_err_msg_="WARNING!! Could not change owner and group of installed java"
		log_msg "$_err_msg_"
	fi
	
	cd ${USR_JAVA_DIR}/..
	DIR=`pwd`
	ln -s ${USR_JAVA_DIR}/${JDK7_DIR} ${DIR}/${JDK7_DIR} >> ${LOGFILE}
	if [ $? -ne 0 ]; then
		_err_msg_="Could not create link to installed java"
		abort_script "$_err_msg_"
	fi
	
	
	chown root:other ${DIR}/${JDK7_DIR}
	
	cd $currdir
	log_msg -s "Java 1.7 installed." -l "${LOGFILE}" -t 
else
	log_msg -s "skipping Java Installation." -l "${LOGFILE}"
	
fi
}


# ********************************************************************
#
#   Main body of program
#
# ********************************************************************
#
RUN_TIME=`$DATE '+%Y-%b-%d_%H.%M.%S'`



# Determine absolute path to software
get_absolute_path


SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`

if [ -s ${SCRIPTHOME}/../lib/common_functions.lib ]; then
    . ${SCRIPTHOME}/../lib/common_functions.lib
else
    _err_msg_="${SCRIPTHOME}/../lib/common_functions.lib not found"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi


# Check that the effective id of the user is root
check_id $DEFAULT_USER

while getopts ":l:ub:s:d:m:" arg; do
  case $arg in
    b) LDAP_BUNDLE="$OPTARG"
       ;;
    l) LOGFILE="$OPTARG"
       ;;
    s) LDAP_SW_LOC="$OPTARG"
       ;;
    u) UPGRADE="-u"
       ;;
	d) ENIQ_BASE_SW="$OPTARG"
	   ;;
	m) USER_DEF_STAGE="$OPTARG"
	   ;;
  esac
done
shift `expr $OPTIND - 1`


# Create a temporary Directory
TEM_DIR=/tmp/openDJ_installation.$$.$$
$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory $TEM_DIR"
    abort_script "$_err_msg_"
fi


# Set up environment variables for script.
setup_env

# Log file
if [ ! "${LOGFILE}" ]; then
    LOGFILE="${ENIQ_LOG_DIR}/installation/`${MYHOSTNAME}`_openDJ_install.log"
fi

# Check/Create Logfile
chk_create_logfile



#install java 1.7 for opendj 3.5
if [ "$USER_DEF_STAGE" == "install_java" ]; then
install_java ${ENIQ_BASE_SW}
exit 0
else
install_java ${LDAP_SW_LOC}
fi

if [ ! "${LDAP_BUNDLE}" -o ! "${LDAP_SW_LOC}" ]; then
    usage_msg
    exit 1
fi

log_msg -s "Beginning to install openDJ" -l "${LOGFILE}"

# Untar out the LDAP tar file
untar_sw_bundle

# Install openDJ
install_configure_ldap_sw

$RM -rf ${TEM_DIR}

exit 0
