#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2023 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : eniq_db_expansion.bsh
# Date    : 10/10/2023
# Revision: \main\09
# Purpose : Main wrapper script handling the expansion of ENIQ. It will
#           call all necessary scripts to complete the expansion
#
# Usage   : eniq_db_expansion.bsh
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
BASH=/usr/bin/bash
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CP=/usr/bin/cp
CUT=/usr/bin/cut
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO='/usr/bin/echo -e'
EGREP=/usr/bin/egrep
EXPR=/usr/bin/expr
GREP=/usr/bin/grep
MYHOSTNAME=/usr/bin/hostname
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
PERL=/usr/bin/perl
PING=/usr/bin/ping
PRINTF=/usr/bin/printf
PWD=/usr/bin/pwd
RM=/usr/bin/rm
SED=/usr/bin/sed
SLEEP=/usr/bin/sleep
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
TR=/usr/bin/tr
UEMCLI=/usr/bin/uemcli
WC=/usr/bin/wc


# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************

# Default user
#DEFAULT_USER=root


# Cmd to exec a shell and drop user to it in case of an error
EXEC_SHELL_CMD="exec /bin/bash -o emacs"

# Name of SunOS & ENIQ ini Files
BLK_STOR_INI=block_storage.ini
ENIQ_INI=niq.ini
SYM_INI=sym_links.ini



# ********************************************************************
#
#   Functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_time_=`${DATE} '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO -e "\nERROR : ${_err_msg_}\n" | $TEE -a "${LOGFILE}"
else
    $ECHO -e "\nERROR : ${_err_msg_}\n"
fi

$RM -rf "${TEM_DIR}"
#Removin tmp files
remove_tmp_file

exit 1

}


luns_addition_prerequisite()
{

if [ ${CURR_SERVER_TYPE} == "stats_coordinator" ]; then    
    if [ -e /tmp/disk_partition ]; then
        
        $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
        log_msg -t -s "Skipping disk partition on Coordinator as already completed" -l "${LOGFILE}"
        $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
    else 
        log_msg -t -s "Creating disk partition on Coordinator..." -l "$LOGFILE"
        $BASH /eniq/installation/core_install/bin/eniq_core_install.bsh -s create_disk_partition -n -M >> /dev/null 2>&1
        if [ $? -ne 0 ]; then
            _err_msg_="Disk Partition was Unsuccessfull on Coordinator"
            abort_script "${_err_msg_}"
        else
            
            log_msg -t -s "Disk Partition Completed on Coordinator" -l "${LOGFILE}"
            touch /tmp/disk_partition
        fi
    fi
    
    if [ -e /tmp/lun_map ]; then
        
        $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
        log_msg -t -s "Skipping on Coordinator as Lun Map was already Completed" -l "${LOGFILE}"
        $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
    else
        $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
        log_msg -t -s "Creating LUN MAP on Coordinator..." -l "$LOGFILE"
        $BASH /eniq/installation/core_install/bin/eniq_core_install.bsh -s create_lun_map -n -M >> /dev/null 2>&1
        if [ $? -ne 0 ]; then
            _err_msg_="Lun Mapping was Unsuccessfull on Coordinator"
            abort_script "${_err_msg_}"
        else
            log_msg -t -s "Lun Map Created on Coordinator" -l "${LOGFILE}"
            touch /tmp/lun_map
        fi
    fi
    $PERL ${ENIQ_LIB_DIR}/get_ip_order.pl -f ${TEMP_DIR}/perl.txt
    for line in `$CAT ${TEMP_DIR}/perl.txt`;do
            local _count_
            _count_=`$ECHO ${line} | $GREP -o "::" | $WC -l`
            if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
                _ip_address_=`$ECHO ${line}| $GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}'`
                _serv_hostname_=`$ECHO $line | $AWK -F:: '{print $3}'`
                _serv_type_=`$ECHO $line | $AWK -F:: '{print $4}'`
            else
                _ip_address_=`$ECHO $line | $AWK -F:: '{print $1}'`
                _serv_hostname_=`$ECHO $line | $AWK -F:: '{print $2}'`
                _serv_type_=`$ECHO $line | $AWK -F:: '{print $3}'`	
            fi
            _blade_type_server_=`$CAT ${INSTALLED_SERVER_TYPE}`
                        if [ -z ${_blade_type_server_} ]; then
                                _err_msg_="Could not get server type.\n"
                abort_script "${_err_msg_}"
                        fi
            server_type=`$CAT /eniq/installation/config/installed_server_type`
                        if [ -z ${server_type} ]; then
                                _err_msg_="Could not get server type.\n"
                abort_script "${_err_msg_}"
                        fi
            if [ ! "${_ip_address_}" ] || [ ! "${_serv_hostname_}" ] || [ ! "${_serv_type_}" ]; then
                _err_msg_="Unable to retrieve IP or hostname or server type.\n"
                abort_script "${_err_msg_}"
            fi
            if [ "${_serv_type_}" == "dwh_reader_1" ]; then
                if [ -e /tmp/disk_partition_rd1 ]; then
                    $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                    log_msg -t -s "Skipping disk partition on Reader-1 as already completed" -l "${LOGFILE}"
                    $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                else
                    $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                    log_msg -t -s "Creating Disk Partition on Reader-1 server..." -l "$LOGFILE"
                    run_remote_cmd "${_serv_hostname_}" "$BASH /eniq/installation/core_install/bin/eniq_core_install.bsh -s create_disk_partition -n -M" >> /dev/null 2>&1
                    if [ $? -ne 0 ]; then
                        _err_msg_="Disk Partition was Unsuccessfull on Reader-1 server"
                        abort_script "${_err_msg_}"
                    else
                        log_msg -t -s "Disk Partition Completed on Reader-1 server" -l "${LOGFILE}"
                        touch /tmp/disk_partition_rd1
                    fi
                fi
                
                if [ -e /tmp/lun_map_rd1 ]; then
                    $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                    log_msg -t -s "Skipping on Reader-1 as Lun Map was already Completed" -l "${LOGFILE}"
                    $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                else
                    $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                    log_msg -t -s "Creating Lun Map on Reader-1 server..." -l "$LOGFILE"
                    run_remote_cmd "${_serv_hostname_}" "$BASH /eniq/installation/core_install/bin/eniq_core_install.bsh -s create_lun_map -n -M" >> /dev/null 2>&1
                    if [ $? -ne 0 ]; then
                        _err_msg_="Lun Mapping was Unsuccessfull on Reader-1 server"
                        abort_script "${_err_msg_}"
                    else
                        log_msg -t -s "Lun Map Created on Reader-1" -l "${LOGFILE}"
                        touch /tmp/lun_map_rd1
                    fi
                fi
            elif [ "${_serv_type_}" == "dwh_reader_2" ]; then
                if [ -e /tmp/disk_partition_rd2 ]; then
                    
                    $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                    log_msg -t -s "Skipping disk partition on Reader-1 as already completed" -l "${LOGFILE}"
                    $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                else 
                    $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                    log_msg -t -s "Creating Disk partition on Reader-2 server..." -l "$LOGFILE"
                    run_remote_cmd "${_serv_hostname_}" "$BASH /eniq/installation/core_install/bin/eniq_core_install.bsh -s create_disk_partition -n -M" >> /dev/null 2>&1
                    if [ $? -ne 0 ]; then
                        _err_msg_="Disk Partition was Unsuccessfull on Reader-2 server" 
                        abort_script "${_err_msg_}"
                    else
                        log_msg -t -s "Disk Partition Completed on Reader-2" -l "${LOGFILE}"
                        touch /tmp/disk_partition_rd2
                    fi
                fi
                
                if [ -e /tmp/lun_map_rd2 ]; then
                    $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                    log_msg -t -s "Skipping on Reader-2 as Lun Map was already Completed" -l "${LOGFILE}"
                    $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                else
                    $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                    log_msg -t -s "Creating LUN Map on Reader-2 server..." -l "$LOGFILE"
                    run_remote_cmd "${_serv_hostname_}" "$BASH /eniq/installation/core_install/bin/eniq_core_install.bsh -s create_lun_map -n -M" >> /dev/null 2>&1
                    if [ $? -ne 0 ]; then
                        _err_msg_="Lun Mapping was Unsuccessfull on Reader-2 server"
                        abort_script "${_err_msg_}"
                    else
                        log_msg -t -s "Lun Map Created on Reader-2" -l "${LOGFILE}"
                        $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                        touch /tmp/lun_map_rd2
                    fi
                fi
            fi
    done
elif [ ${CURR_SERVER_TYPE} == "eniq_stats" ]; then
    if [ -e /tmp/disk_partition ]; then
        
        $ECHO -e "\n=======================================================" | $TEE -a "${LOGFILE}"
        log_msg -t -s "Skipping this step as Disk Partition was already Completed on Coordinator" -l "${LOGFILE}"
        $ECHO -e "=======================================================" | $TEE -a "${LOGFILE}"
    else 
        log_msg -t -s "Creating disk partition" -l "$LOGFILE"
        $BASH /eniq/installation/core_install/bin/eniq_core_install.bsh -s create_disk_partition -n -M >> /dev/null 2>&1
        if [ $? -ne 0 ]; then
            _err_msg_="Disk Partition was Unsuccessfull"
            abort_script "${_err_msg_}"
        else
            
            $ECHO -e "\n=======================================================" | $TEE -a "${LOGFILE}"
            log_msg -t -s "Disk Partition Is Completed on Coordinator" -l "${LOGFILE}"
            $ECHO -e "=======================================================" | $TEE -a "${LOGFILE}"
            touch /tmp/disk_partition
        fi
    fi
    
    if [ -e /tmp/lun_map ]; then
        
        $ECHO -e "\n=======================================================" | $TEE -a "${LOGFILE}"
        log_msg -t -s "Skipping this step as Lun Map was already Completed on Coordinator" -l "${LOGFILE}"
        $ECHO -e "=======================================================" | $TEE -a "${LOGFILE}"
    else 
        $BASH /eniq/installation/core_install/bin/eniq_core_install.bsh -s create_lun_map -n -M >> /dev/null 2>&1
        if [ $? -ne 0 ]; then
            _err_msg_="Lun Mapping was Unsuccessfull"
            abort_script "${_err_msg_}"
        else
            
            $ECHO -e "\n=======================================================" | $TEE -a "${LOGFILE}"
            log_msg -t -s "Lun Map Is Created on Coordinator" -l "${LOGFILE}"
            $ECHO -e "=======================================================" | $TEE -a "${LOGFILE}"
            touch /tmp/lun_map
        fi
    fi    
fi

}

luns_addition_confirmation()
{
local filename=/eniq/sw/conf/status_file.txt
local word1='RW'
local word2='T'
local mode
mode=$(grep -cw $word1 $filename)
local online
online=$(grep -cw $word2 $filename)
local total_lun_count=$2
local server=$1

$ECHO -e "\n------------------------------------------------------------------" | $TEE -a "${LOGFILE}"
log_msg -t -s "Checking the status of the LUNs in the database" -l "${LOGFILE}"
if [ -s /eniq/sw/conf/status_file.txt ]; then
    if [ $server == "stats_coordinator" ]; then
        if [ "${mode}" != "${online}" ]; then
            _err_msg_="All LUNs are not Online or they are not set to RW mode on Coordinator"
            abort_script "${_err_msg_}"
        
        elif [ "${mode}" == "${total_lun_count}" ]; then
            log_msg -t -s "All database LUNs have RW mode and are Online on Coordinator" -l "${LOGFILE}"
            $ECHO -e "------------------------------------------------------------------" | $TEE -a "${LOGFILE}"
        else 
            _err_msg_="All LUNs are not Online and they are not set to RW mode on $server"
            abort_script "${_err_msg_}"
        fi
    elif [ $server == "dwh_reader_1" ]; then
        if [ "${mode}" != "${online}" ]; then
            _err_msg_="Either all LUNs are not Online or they are not set to RW mode"
            abort_script "${_err_msg_}"
        
        elif [ "${mode}" == "${total_lun_count}" ]; then
            log_msg -t -s "All database LUNs have RW mode and are Online on Reader-1" -l "${LOGFILE}"
            $ECHO -e "------------------------------------------------------------------" | $TEE -a "${LOGFILE}"
        else 
            _err_msg_="All LUNs are not Online and they are not set to RW mode"
            abort_script "${_err_msg_}"
        fi
    elif [ $server == "dwh_reader_2" ]; then
        if [ "${mode}" != "${online}" ]; then
            _err_msg_="Either all LUNs are not Online or they are not set to RW mode"
            abort_script "${_err_msg_}"
        
        elif [ "${mode}" == "${total_lun_count}" ]; then
            log_msg -t -s "All database LUNs have RW mode and are Online on Reader-2" -l "${LOGFILE}"
            $ECHO -e "------------------------------------------------------------------" | $TEE -a "${LOGFILE}"
        else 
            _err_msg_="All LUNs are not Online and they are not set to RW mode"
            abort_script "${_err_msg_}"
        fi
    else 
        if [ "${mode}" != "${online}" ]; then
            _err_msg_="Either all LUNs are not Online or they are not set to RW mode"
            abort_script "${_err_msg_}"
        
        elif [ "${mode}" == "${total_lun_count}" ]; then
            $ECHO -e "\n=======================================================" | $TEE -a "${LOGFILE}"
            log_msg -t -s "All LUNs have RW mode and are Online" -l "${LOGFILE}"
            $ECHO -e "=======================================================" | $TEE -a "${LOGFILE}"
        else 
            _err_msg_="All LUNs are not Online and they are not set to RW mode"
            abort_script "${_err_msg_}"
        fi
    fi
    rm -rf $filename
else 
    _err_msg_="Status file was not created"
    abort_script "${_err_msg_}"
fi
}

### Function: add_mainDb ###
#
#  Function to add maindb's to server
#
# Arguments:
#       none
# Return Values:
#       none
add_mainDb()
{
insert_header_footer head "Entering ENIQ DB Expansion stage - ${NEXT_STAGE}" "${LOGFILE}"
#Create disk partition and run lun_map on all servers
luns_addition_prerequisite

#Stop all eniq Services
stop_services

DATABASE_QUERY="select DBFileName, RWMode, Online from sp_iqfile() where DBFileName like 'main%';"
total_maindb_count=$($CAT /eniq/sw/conf/expansion_info_file | $GREP -w total_maindb_count | $AWK -F "=" '{print $2}')

if [ "${CURR_SERVER_TYPE}" == "stats_coordinator" ]; then
    _serv_type_="dwhdb"
    
    if [ -e /tmp/mainDb_addition_status ]; then
        $ECHO -e "\n-----------------------------------------------------"
        log_msg -t -s "Skipping as MainDB already added on Coordinator Server" -l "${LOGFILE}"
        $ECHO -e "-----------------------------------------------------"
    else
        $ECHO -e "\n-----------------------------------------------------"
        log_msg -t -s "STARTING TO ADD MAINDB LUNS ON COORDINATOR...." -l "${LOGFILE}"
        $CP /eniq/installation/config/lun_map.ini ${Var_TEM_DIR}/lun_map_bkp_main_db.ini
        _lun_ini_bkp_exe_status_=$?
        if [ $_lun_ini_bkp_exe_status_ -ne 0 ]; then
            _err_msg_="Failed to copy ${ENIQ_INSTALL_CONFIG}/lun_map.ini"
            abort_script "${_err_msg_}"
        fi
        $CP /eniq/installation/config/coordinator_sym_links.ini ${Var_TEM_DIR}/coordinator_sym_links_bkp_main_db.ini
        _co_syms_ini_bkp_exe_status_=$?
        if [ $_co_syms_ini_bkp_exe_status_ -ne 0 ]; then
            _err_msg_="Failed to copy /eniq/installation/config/coordinator_sym_links.ini"
            abort_script "${_err_msg_}"
        fi
        $CP /eniq/installation/config/sym_links.ini ${Var_TEM_DIR}/sym_links_bkp_main_db.ini
        _syms_ini_1bkp_exe_status_=$?
        if [ $_syms_ini_1bkp_exe_status_ -ne 0 ]; then
            _err_msg_="Failed to copy /eniq/installation/config/sym_links.ini"
            abort_script "${_err_msg_}"
        fi
        $CP /etc/udev/rules.d/99-iq-raw-devs.rules ${Var_TEM_DIR}/99-iq-raw-devs_bkp_main_db.rules
        _iq_raw_bkp_exe_status_=$?
        if [ $_iq_raw_bkp_exe_status_ -ne 0 ]; then
            _err_msg_="Failed to copy /etc/udev/rules.d/99-iq-raw-devs.rules"
            abort_script "${_err_msg_}"
        fi
        $BASH /eniq/admin/bin/exp_add_maindb.bsh -c /eniq/installation/config -d /eniq/installation/config/niq.ini -a automation >> /dev/null 2>&1
        _exp_add_co_exe_status_=$?
        if [ $_exp_add_co_exe_status_ -ne 0 ]; then
            remove_luns
            $CP ${Var_TEM_DIR}/lun_map_bkp_main_db.ini /eniq/installation/config/lun_map.ini
            _lun_map_bkp_exe_status_=$?
            if [ $_lun_map_bkp_exe_status_ -ne 0 ]; then
                _err_msg_="Failed to restore ${ENIQ_INSTALL_CONFIG}/lun_map.ini"
                abort_script "${_err_msg_}"
            else 
                log_msg -t -s "File /eniq/installation/config/lun_map.ini restored successfully" -l "${LOGFILE}"
            fi
            $CP ${Var_TEM_DIR}/coordinator_sym_links_bkp_main_db.ini  /eniq/installation/config/coordinator_sym_links.ini
            _syms_ini_db_bkp_exe_status_=$?
            if [ $_syms_ini_db_bkp_exe_status_ -ne 0 ]; then
                _err_msg_="Failed to restore /eniq/installation/config/coordinator_sym_links.ini"
                abort_script "${_err_msg_}"
            else 
                log_msg -t -s "File /eniq/installation/config/coordinator_sym_links.ini restored successfully" -l "${LOGFILE}"
            fi
            $CP ${Var_TEM_DIR}/sym_links_bkp_main_db.ini /eniq/installation/config/sym_links.ini 
            _syms_ini_bkpi_exe_status_=$?
            if [ $_syms_ini_bkpi_exe_status_ -ne 0 ]; then
                _err_msg_="Failed to restore /eniq/installation/config/sym_links.ini"
                abort_script "${_err_msg_}"
            else 
                log_msg -t -s "File /eniq/installation/config/sym_links.ini restored successfully" -l "${LOGFILE}"
            fi
            $CP ${Var_TEM_DIR}/99-iq-raw-devs_bkp_main_db.rules /etc/udev/rules.d/99-iq-raw-devs.rules
            _raw_rul_bkp_exe_status_=$?
            if [ $_raw_rul_bkp_exe_status_ -ne 0 ]; then
                _err_msg_="Failed to restore /etc/udev/rules.d/99-iq-raw-devs.rules"
                abort_script "${_err_msg_}"
            else 
                log_msg -t -s "File /etc/udev/rules.d/99-iq-raw-devs.rules restored successfully" -l "${LOGFILE}"
            fi
            _err_msg_="MainDb Addition was Unsuccessfull on Coordinator"
            abort_script "${_err_msg_}"
        fi
    touch /tmp/mainDb_addition_status
    fi

    log_msg -t -s "MAINDB ADDITION COMPLETED SUCCESSFULLY on COORDINATOR" -l "${LOGFILE}"
    $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
    
    $BASH /eniq/admin/bin/manage_eniq_services.bsh -a start -s eniq-dwhdb -N
    _eniq_dwh_bkp_exe_status_=$?
    if [ $_eniq_dwh_bkp_exe_status_ -ne 0 ]; then
        _err_msg_="Could not start eniq-dwhdb service on ${server_type}"
        abort_script "$_err_msg_"
    fi
    check_status "$DATABASE_QUERY" "${_serv_type_}" >> /dev/null 2>&1
    _chck_stat_bkp_exe_status_=$?
    if [ $_chck_stat_bkp_exe_status_ -eq 1 ]; then
        _err_msg_="Could not get dwhdb DBA Password"
        abort_script "${_err_msg_}"
    elif [ $_chck_stat_bkp_exe_status_ -eq 2 ]; then
        _err_msg_="Could not read System User from  ${ENIQ_CONF_DIR}/${SUNOS_INI}"
        abort_script "${_err_msg_}"
    elif [ $_chck_stat_bkp_exe_status_ -eq 3 ]; then
        _err_msg_="Could not read IQ values from ${ENIQ_INI}"
        abort_script "${_err_msg_}"
    elif [ $_chck_stat_bkp_exe_status_ -eq 0 ]; then
        luns_addition_confirmation "${CURR_SERVER_TYPE}" "${total_maindb_count}"
    else 
        _err_msg_="Unable to check the status of the database LUNs"
        abort_script "${_err_msg_}"
    fi
 
    $PERL "${ENIQ_LIB_DIR}"/get_ip_order.pl -f "${TEMP_DIR}"/perl.txt
    for line in $($CAT "${TEMP_DIR}"/perl.txt);do
    local _count_
    _count_=`$ECHO ${line} | $GREP -o "::" | $WC -l`
    if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
        _ip_address_=`$ECHO ${line}| $GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}'`
        _serv_type_=`$ECHO $line | $AWK -F:: '{print $4}'`
        _serv_hostname_=`$ECHO $line | $AWK -F:: '{print $3}'`
    else
        _ip_address_=`$ECHO $line | $AWK -F:: '{print $1}'`
        _serv_type_=`$ECHO $line | $AWK -F:: '{print $3}'`
        _serv_hostname_=`$ECHO $line | $AWK -F:: '{print $2}'`				
    fi
    if [ -z "${_serv_type_}" ]; then
        _err_msg_="Could not get server type"
    abort_script "$_err_msg_"
    fi
    
        if [ ! "${_ip_address_}" ] || [ ! "${_serv_hostname_}" ] || [ ! "${_serv_type_}" ]; then
            _err_msg_="Unable to retrieve IP or hostname or server type.\n"
            abort_script "${_err_msg_}"
        fi
        if [ "${_serv_type_}" == "dwh_reader_1" ]; then
            if [ -e /tmp/mainDb_addition_status_RD1 ]; then
                $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                log_msg -s "Skipping as MainDB already added on Reader-1 Server" -l "${LOGFILE}"
                $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
            else
                $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                log_msg -t -s "STARTING TO ADD MAINDB LUNS ON DWH_READER_1...." -l "${LOGFILE}"
                run_remote_cmd "${_serv_hostname_}" "$CP /eniq/installation/config/lun_map.ini /var/tmp/lun_map_bkp_main_db.ini" >> /dev/null 2>&1
                _lunn_bkp_exe_status_=$?
                if [ $_lunn_bkp_exe_status_ -ne 0 ]; then
                    _err_msg_="Failed to copy ${ENIQ_INSTALL_CONFIG}/lun_map.ini"
                    abort_script "${_err_msg_}"
                fi
                run_remote_cmd "${_serv_hostname_}" "$CP /eniq/installation/config/coordinator_sym_links.ini /var/tmp/coordinator_sym_links_bkp_main_db.ini" >> /dev/null 2>&1
                _symmms_ini_bkp_exe_status_=$?
                if [ $_symmms_ini_bkp_exe_status_ -ne 0 ]; then
                    _err_msg_="Failed to copy ${ENIQ_INSTALL_CONFIG}/coordinator_sym_links.ini"
                    abort_script "${_err_msg_}"
                fi
                run_remote_cmd "${_serv_hostname_}" "$CP /eniq/installation/config/sym_links.ini /var/tmp/sym_links_bkp_main_db.ini" >> /dev/null 2>&1
                _syms_rrini_bkp_exe_status_=$?
                if [ $_syms_rrini_bkp_exe_status_ -ne 0 ]; then
                    _err_msg_="Failed to copy ${ENIQ_INSTALL_CONFIG}/sym_links.ini"
                    abort_script "${_err_msg_}"
                fi
                run_remote_cmd "${_serv_hostname_}" "$CP /etc/udev/rules.d/99-iq-raw-devs.rules /var/tmp/99-iq-raw-devs_bkp_main_db.rules" >> /dev/null 2>&1
                _raaw_ini_bkp_exe_status_=$?
                if [ $_raaw_ini_bkp_exe_status_ -ne 0 ]; then
                    _err_msg_="Failed to copy /etc/udev/rules.d/99-iq-raw-devs.rules"
                    abort_script "${_err_msg_}"
                fi
                run_remote_cmd "${_serv_hostname_}" "$BASH /eniq/admin/bin/exp_add_maindb.bsh -c /eniq/installation/config -d /eniq/installation/config/niq.ini -a automation" >> /dev/null 2>&1
                _expp_rd1_bkp_exe_status_=$?
                if [ $_expp_rd1_bkp_exe_status_ -ne 0 ]; then
                    run_remote_cmd "${_serv_hostname_}" "$CP /var/tmp/lun_map_bkp_main_db.ini /eniq/installation/config/lun_map.ini" >> /dev/null 2>&1
                    _lunn_ini_bkp_exe_status_=$?
                    if [ $_lunn_ini_bkp_exe_status_ -ne 0 ]; then
                        _err_msg_="Failed to restore ${ENIQ_INSTALL_CONFIG}/lun_map.ini"
                        abort_script "${_err_msg_}"
                    else 
                        log_msg -t -s "File /eniq/installation/config/lun_map.ini restored successfully" -l "${LOGFILE}"
                    fi
                    run_remote_cmd "${_serv_hostname_}" "$CP /var/tmp/coordinator_sym_links_bkp_main_db.ini /eniq/installation/config/coordinator_sym_links.ini" >> /dev/null 2>&1
                    _syms_innni_bkp_exe_status_=$?
                    if [ $_syms_innni_bkp_exe_status_ -ne 0 ]; then
                        _err_msg_="Failed to restore /eniq/installation/config/coordinator_sym_links.ini"
                        abort_script "${_err_msg_}"
                    else 
                        log_msg -t -s "File /eniq/installation/config/coordinator_sym_links.ini restored successfully" -l "${LOGFILE}"
                    fi
                    run_remote_cmd "${_serv_hostname_}" "$CP /var/tmp/sym_links_bkp_main_db.ini /eniq/installation/config/sym_links.ini" >> /dev/null 2>&1
                    _syms_ini_bbkp_exe_status_=$?
                    if [ $_syms_ini_bbkp_exe_status_ -ne 0 ]; then
                        _err_msg_="Failed to restore /eniq/installation/config/sym_links.ini"
                        abort_script "${_err_msg_}"
                    else 
                        log_msg -t -s "File /eniq/installation/config/sym_links.ini restored successfully" -l "${LOGFILE}"
                    fi
                    run_remote_cmd "${_serv_hostname_}" "$CP /var/tmp/SunOS_bkp_main_db.ini /eniq/installation/config/SunOS.ini" >> /dev/null 2>&1
                    _sun_ini_bkp_exe_status_=$?
                    if [ $_sun_ini_bkp_exe_status_ -ne 0 ]; then
                        _err_msg_="Failed to restore /eniq/installation/config/SunOS.ini"
                        abort_script "${_err_msg_}"
                    else 
                        log_msg -t -s "File /eniq/installation/config/SunOS.ini restored successfully" -l "${LOGFILE}"
                    fi
                    run_remote_cmd "${_serv_hostname_}" "$CP /var/tmp/99-iq-raw-devs_bkp_main_db.rules /etc/udev/rules.d/99-iq-raw-devs.rules" >> /dev/null 2>&1
                    _rraaww_ini_bkp_exe_status_=$?
                    if [ $_rraaww_ini_bkp_exe_status_ -ne 0 ]; then
                        _err_msg_="Failed to restore /etc/udev/rules.d/99-iq-raw-devs.rules"
                        abort_script "${_err_msg_}"
                    else 
                        log_msg -t -s "File /etc/udev/rules.d/99-iq-raw-devs.rules restored successfully" -l "${LOGFILE}"
                    fi
                    _err_msg_="MainDb Addition was Unsuccessfull on Reader 1"
                    abort_script "${_err_msg_}"
                fi
                touch /tmp/mainDb_addition_status_RD1
                run_remote_cmd "${_serv_hostname_}" "$RM -rf /var/tmp/lun_map_bkp_main_db.ini" >> /dev/null 2>&1
                run_remote_cmd "${_serv_hostname_}" "$RM -rf /var/tmp/coordinator_sym_links_bkp_main_db.ini" >> /dev/null 2>&1
                run_remote_cmd "${_serv_hostname_}" "$RM -rf /var/tmp/sym_links_bkp_main_db.ini" >> /dev/null 2>&1
                run_remote_cmd "${_serv_hostname_}" "$RM -rf /var/tmp/99-iq-raw-devs_bkp_main_db.rules" >> /dev/null 2>&1
            fi
            log_msg -t -s "MAINDB ADDITION COMPLETED SUCCESSFULLY ON READER 1" -l "${LOGFILE}"
            $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
            run_remote_cmd "${_serv_hostname_}" ". /eniq/installation/core_install/lib/common_functions.lib;check_status \"$DATABASE_QUERY\" "dwhdb"" >> /dev/null 2>&1
            _chkrd1st_ini_bkp_exe_status_=$?
            if [ $_chkrd1st_ini_bkp_exe_status_ -eq 1 ]; then
                _err_msg_="Could not get dwhdb DBA Password"
                abort_script "${_err_msg_}"
            elif [ $_chkrd1st_ini_bkp_exe_status_ -eq 2 ]; then
                _err_msg_="Could not read System User from  ${ENIQ_CONF_DIR}/${SUNOS_INI}"
                abort_script "${_err_msg_}"
            elif [ $_chkrd1st_ini_bkp_exe_status_ -eq 3 ]; then
                _err_msg_="Could not read IQ values from ${ENIQ_INI}"
                abort_script "${_err_msg_}"
            else
                luns_addition_confirmation "dwh_reader_1" "${total_maindb_count}"
            fi
        elif [ "${_serv_type_}" == "dwh_reader_2" ]; then
            if [ -e /tmp/mainDb_addition_status_RD2 ]; then
                $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                log_msg -s "Skipping as MainDB already added on Reader-2" -l "${LOGFILE}"
                $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
            else
                $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
                log_msg -t -s "STARTING TO ADD MAINDB LUNS ON DWH_READER_2...." -l "${LOGFILE}"
                run_remote_cmd "${_serv_hostname_}" "$CP /eniq/installation/config/lun_map.ini /var/tmp/lun_map_bkp_main_db.ini" >> /dev/null 2>&1
                _lllun_ini_bkp_exe_status_=$?
                if [ $_lllun_ini_bkp_exe_status_ -ne 0 ]; then
                    _err_msg_="Failed to copy ${ENIQ_INSTALL_CONFIG}/lun_map.ini"
                    abort_script "${_err_msg_}"
                fi
                run_remote_cmd "${_serv_hostname_}" "$CP /eniq/installation/config/coordinator_sym_links.ini /var/tmp/coordinator_sym_links_bkp_main_db.ini" >> /dev/null 2>&1
                _coo_ini_bkp_exe_status_=$?
                if [ $_coo_ini_bkp_exe_status_ -ne 0 ]; then
                    _err_msg_="Failed to copy ${ENIQ_INSTALL_CONFIG}/coordinator_sym_links.ini"
                    abort_script "${_err_msg_}"
                fi
                run_remote_cmd "${_serv_hostname_}" "$CP /eniq/installation/config/sym_links.ini /var/tmp/sym_links_bkp_main_db.ini" >> /dev/null 2>&1
                _syuums_ini_bkp_exe_status_=$?
                if [ $_syuums_ini_bkp_exe_status_ -ne 0 ]; then
                    _err_msg_="Failed to copy ${ENIQ_INSTALL_CONFIG}/sym_links.ini"
                    abort_script "${_err_msg_}"
                fi
                run_remote_cmd "${_serv_hostname_}" "$CP /etc/udev/rules.d/99-iq-raw-devs.rules /var/tmp/99-iq-raw-devs_bkp_main_db.rules" >> /dev/null 2>&1
                _rawww_ini_bkp_exe_status_=$?
                if [ $_rawww_ini_bkp_exe_status_ -ne 0 ]; then
                    _err_msg_="Failed to copy /etc/udev/rules.d/99-iq-raw-devs.rules"
                    abort_script "${_err_msg_}"
                fi
                run_remote_cmd "${_serv_hostname_}" "$BASH /eniq/admin/bin/exp_add_maindb.bsh -c /eniq/installation/config -d /eniq/installation/config/niq.ini -a automation" >> /dev/null 2>&1
                _expcv_ini_bkp_exe_status_=$?
                if [ $_expcv_ini_bkp_exe_status_ -ne 0 ]; then
                    run_remote_cmd "${_serv_hostname_}" "$CP /var/tmp/lun_map_bkp_main_db.ini /eniq/installation/config/lun_map.ini" >> /dev/null 2>&1
                    _luunn_ini_bkp_exe_status_=$?
                    if [ $_luunn_ini_bkp_exe_status_ -ne 0 ]; then
                        _err_msg_="Failed to restore ${ENIQ_INSTALL_CONFIG}/lun_map.ini"
                        abort_script "${_err_msg_}"
                    else 
                        log_msg -t -s "File ${ENIQ_INSTALL_CONFIG}/lun_map.ini restored successfully" -l "${LOGFILE}"
                    fi
                    run_remote_cmd "${_serv_hostname_}" "$CP /var/tmp/coordinator_sym_links_bkp_main_db.ini /eniq/installation/config/coordinator_sym_links.ini" >> /dev/null 2>&1
                    _sams_ini_bkp_exe_status_=$?
                    if [ $_sams_ini_bkp_exe_status_ -ne 0 ]; then
                        _err_msg_="Failed to restore /eniq/installation/config/coordinator_sym_links.ini "
                        abort_script "${_err_msg_}"
                    else 
                        log_msg -t -s "File /eniq/installation/config/coordinator_sym_links.ini restored successfully" -l "${LOGFILE}"
                    fi
                    run_remote_cmd "${_serv_hostname_}" "$CP /var/tmp/sym_links_bkp_main_db.ini /eniq/installation/config/sym_links.ini" >> /dev/null 2>&1
                    _syms_ini_wewbkp_exe_status_=$?
                    if [ $_syms_ini_wewbkp_exe_status_ -ne 0 ]; then
                        _err_msg_="Failed to restore /eniq/installation/config/sym_links.ini"
                        abort_script "${_err_msg_}"
                    else 
                        log_msg -t -s "File /eniq/installation/config/sym_links.ini restored successfully" -l "${LOGFILE}"
                    fi
                    run_remote_cmd "${_serv_hostname_}" "$CP /var/tmp/SunOS_bkp_main_db.ini /eniq/installation/config/SunOS.ini" >> /dev/null 2>&1
                    _sun_ini_bkddp_exe_status_=$?
                    if [ $_sun_ini_bkddp_exe_status_ -ne 0 ]; then
                        _err_msg_="Failed to restore /eniq/installation/config/SunOS.ini"
                        abort_script "${_err_msg_}"
                    else 
                        log_msg -t -s "File /eniq/installation/config/SunOS.ini restored successfully" -l "${LOGFILE}"
                    fi
                    run_remote_cmd "${_serv_hostname_}" "$CP /var/tmp/99-iq-raw-devs_bkp_main_db.rules /etc/udev/rules.d/99-iq-raw-devs.rules" >> /dev/null 2>&1
                    _rrraw_ini_bkp_exe_status_=$?
                    if [ $_rrraw_ini_bkp_exe_status_ -ne 0 ]; then
                        _err_msg_="Failed to restore /etc/udev/rules.d/99-iq-raw-devs.rules "
                        abort_script "${_err_msg_}"
                    else 
                        log_msg -t -s "File /etc/udev/rules.d/99-iq-raw-devs.rules restored successfully" -l "${LOGFILE}"
                    fi
                    _err_msg_="MainDb Addition was Unsuccessfull on Reader 2"
                    abort_script "${_err_msg_}"
                fi
                touch /tmp/mainDb_addition_status_RD2
                run_remote_cmd "${_serv_hostname_}" "$RM -rf /var/tmp/lun_map_bkp_main_db.ini" >> /dev/null 2>&1
                run_remote_cmd "${_serv_hostname_}" "$RM -rf /var/tmp/coordinator_sym_links_bkp_main_db.ini" >> /dev/null 2>&1
                run_remote_cmd "${_serv_hostname_}" "$RM -rf /var/tmp/sym_links_bkp_main_db.ini" >> /dev/null 2>&1
                run_remote_cmd "${_serv_hostname_}" "$RM -rf /var/tmp/99-iq-raw-devs_bkp_main_db.rules" >> /dev/null 2>&1
            fi
            log_msg -t -s "MAINDB ADDITION COMPLETED SUCCESSFULLY ON READER 2" -l "${LOGFILE}"
            $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
            run_remote_cmd "${_serv_hostname_}" ". /eniq/installation/core_install/lib/common_functions.lib;check_status \"$DATABASE_QUERY\" "dwhdb"" >> /dev/null 2>&1
            _rd2chkstat_ini_bkp_exe_status_=$?
            if [ $_rd2chkstat_ini_bkp_exe_status_ -eq 1 ]; then
                _err_msg_="Could not get dwhdb DBA Password"
                abort_script "${_err_msg_}"
            elif [ $_rd2chkstat_ini_bkp_exe_status_ -eq 2 ]; then
                _err_msg_="Could not read System User from  ${ENIQ_CONF_DIR}/${SUNOS_INI}"
                abort_script "${_err_msg_}"
            elif [ $_rd2chkstat_ini_bkp_exe_status_ -eq 3 ]; then
                _err_msg_="Could not read IQ values from ${ENIQ_INI}"
                abort_script "${_err_msg_}"
            else
                luns_addition_confirmation "dwh_reader_2" "${total_maindb_count}"
            fi
        fi
    done
elif [ "${CURR_SERVER_TYPE}" == "eniq_stats" ]; then
    _serv_type_="dwhdb"
    if [ -e /tmp/mainDb_addition_status ]; then
        log_msg -s "Skipping this stage as Main_Db LUNs are already Added on Coordinator" -l "${LOGFILE}"
        $ECHO -e "\n=======================================================" | $TEE -a "${LOGFILE}"
        log_msg -t -s "Skipping this stage as Main_Db LUNs are already Added on Coordinator" -l "${LOGFILE}"
        $ECHO -e "=======================================================" | $TEE -a "${LOGFILE}"
    else
        $ECHO -e "\n=======================================================" | $TEE -a "${LOGFILE}"
        log_msg -t -s "STARTING TO ADD MAINDB LUNS ON ${INSTALLED_SERVER_TYPE}" -l "${LOGFILE}"
        $ECHO -e "=======================================================" | $TEE -a "${LOGFILE}"
        $CP /eniq/installation/config/lun_map.ini /eniq/installation/config/lun_map_bkp_main_db.ini
        _syms_ini_bkp_exe_status_=$?
        if [ $_syms_ini_bkp_exe_status_ -ne 0 ]; then
            _err_msg_="Failed to copy ${ENIQ_INSTALL_CONFIG}/lun_map.ini"
            abort_script "${_err_msg_}"
        fi
        $CP /eniq/installation/config/coordinator_sym_links.ini /eniq/installation/config/coordinator_sym_links_bkp_main_db.ini
        _syms_ini_bkp_exe_status_=$?
        if [ $_syms_ini_bkp_exe_status_ -ne 0 ]; then
            _err_msg_="Failed to copy ${ENIQ_INSTALL_CONFIG}/coordinator_sym_links.ini"
            abort_script "${_err_msg_}"
        fi
        $CP /eniq/installation/config/sym_links.ini /eniq/installation/config/sym_links_bkp_main_db.ini
        _syms_ini_bkp_exe_status_=$?
        if [ $_syms_ini_bkp_exe_status_ -ne 0 ]; then
            _err_msg_="Failed to copy ${ENIQ_INSTALL_CONFIG}/sym_links.ini"
            abort_script "${_err_msg_}"
        fi
        $CP /etc/udev/rules.d/99-iq-raw-devs.rules /etc/udev/rules.d/99-iq-raw-devs_bkp_main_db.rules
        _syms_ini_bkp_exe_status_=$?
        if [ $_syms_ini_bkp_exe_status_ -ne 0 ]; then
            _err_msg_="Failed to copy /etc/udev/rules.d/99-iq-raw-devs.rules"
            abort_script "${_err_msg_}"
        fi
        $BASH /eniq/admin/bin/exp_add_maindb.bsh -c /eniq/installation/config -d /eniq/installation/config/niq.ini -a automation >> /dev/null 2>&1
        _syms_ini_bkp_exe_status_=$?
        if [ $_syms_ini_bkp_exe_status_ -ne 0 ]; then
            $CP /eniq/installation/config/lun_map_bkp_main_db.ini /eniq/installation/config/lun_map.ini
            _syms_ini_bkp_exe_status_=$?
            if [ $_syms_ini_bkp_exe_status_ -ne 0 ]; then
                _err_msg_="Failed to restore ${ENIQ_INSTALL_CONFIG}/lun_map.ini"
                abort_script "${_err_msg_}"
            else 
                log_msg -t -s "File ${ENIQ_INSTALL_CONFIG}/lun_map.ini restored successfully" -l "${LOGFILE}"
            fi
            $CP /eniq/installation/config/coordinator_sym_links_bkp_main_db.ini  /eniq/installation/config/coordinator_sym_links.ini
            _syms_ini_bkp_exe_status_=$?
            if [ $_syms_ini_bkp_exe_status_ -ne 0 ]; then
                _err_msg_="Failed to restore /eniq/installation/config/coordinator_sym_links.ini "
                abort_script "${_err_msg_}"
            else 
                log_msg -t -s "File /eniq/installation/config/coordinator_sym_links.ini restored successfully" -l "${LOGFILE}"
            fi
            $CP /eniq/installation/config/sym_links_bkp_main_db.ini /eniq/installation/config/sym_links.ini 
            _syms_ini_bkp_exe_status_=$?
            if [ $_syms_ini_bkp_exe_status_ -ne 0 ]; then
                _err_msg_="Failed to restore /eniq/installation/config/sym_links.ini"
                abort_script "${_err_msg_}"
            else 
                log_msg -t -s "File /eniq/installation/config/sym_links.ini restored successfully" -l "${LOGFILE}"
            fi
            $CP /eniq/installation/config/SunOS_bkp_main_db.ini /eniq/installation/config/SunOS.ini 
            _syms_ini_bkp_exe_status_=$?
            if [ $_syms_ini_bkp_exe_status_ -ne 0 ]; then
                _err_msg_="Failed to restore /eniq/installation/config/SunOS.ini"
                abort_script "${_err_msg_}"
            else 
                log_msg -t -s "File /eniq/installation/config/SunOS.ini restored successfully" -l "${LOGFILE}"
            fi
            $CP /etc/udev/rules.d/99-iq-raw-devs_bkp_main_db.rules /etc/udev/rules.d/99-iq-raw-devs.rules
            _syms_ini_bkp_exe_status_=$?
            if [ $_syms_ini_bkp_exe_status_ -ne 0 ]; then
                _err_msg_="Failed to restore /etc/udev/rules.d/99-iq-raw-devs.rules"
                abort_script "${_err_msg_}"
            else 
                log_msg -t -s "File /etc/udev/rules.d/99-iq-raw-devs.rules restored successfully" -l "${LOGFILE}"
            fi
            _err_msg_="MainDb Addition was Unsuccessfull on Coordinator"
            abort_script "${_err_msg_}"
        fi
        touch /tmp/mainDb_addition_status
    fi
    $ECHO -e "\n-----------------------------------------------------" | $TEE -a "${LOGFILE}"
    log_msg -t -s "-----------MAINDB ADDITION COMPLETED SUCCESSFULLY----------" -l "${LOGFILE}"
    $ECHO -e "-----------------------------------------------------" | $TEE -a "${LOGFILE}"
    $BASH /eniq/admin/bin/manage_eniq_services.bsh -a start -s eniq-dwhdb -N
    _syms_ini_bkp_exe_status_=$?
    if [ $_syms_ini_bkp_exe_status_ -ne 0 ]; then
        _err_msg_="Could not start eniq-dwhdb service on ${server_type}"
        abort_script "$_err_msg_"
    fi
    check_status "${DATABASE_QUERY}" "${_serv_type_}" >> /dev/null 2>&1
    _syms_ini_bkp_exe_status_=$?
    if [ $? -eq 1 ]; then
        _err_msg_="Could not get dwhdb DBA Password"
        abort_script "${_err_msg_}"
    elif [ $? -eq 2 ]; then
        _err_msg_="Could not read System User from  ${ENIQ_CONF_DIR}/${SUNOS_INI}"
        abort_script "${_err_msg_}"
    elif [ $? -eq 3 ]; then
        _err_msg_="Could not read IQ values from ${ENIQ_INI}"
        abort_script "${_err_msg_}"
    else
        luns_addition_confirmation "${INSTALLED_SERVER_TYPE}" "${total_maindb_count}"
        
    fi
fi

#Confirming that the maindb luns addition in the database
# Add flag
$ECHO "\n[status_maindb]" >> "${CLI_CONF_DIR}"/expansion_disp_file | $TEE -a "${LOGFILE}"
$ECHO "maindb_status=1" >> "${CLI_CONF_DIR}"/expansion_disp_file | $TEE -a "${LOGFILE}"

$RM -rf /tmp/mainDb_addition_status
$RM -rf /tmp/mainDb_addition_status_RD1
$RM -rf /tmp/mainDb_addition_status_RD2
$RM -rf /tmp/disk_partition
$RM -rf /tmp/lun_map
$RM -rf /tmp/disk_partition_rd1
$RM -rf /tmp/disk_partition_rd2
$RM -rf /tmp/lun_map_rd1
$RM -rf /tmp/lun_map_rd2
$RM -rf /var/tmp/mainids
$RM -rf /var/tmp/main_ids

insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}"
set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
}


### Function: add_tempdb ###
#
#  Function to add tempdb's to server
#
# Arguments:
#       none
# Return Values:
#       none
add_tempdb()
{
#fetch target config selected
insert_header_footer head "Entering ENIQ DB TempDB Addition Stage - ${NEXT_STAGE}" "${LOGFILE}"
if [ -s "${CLI_CONF_DIR}"/expansion_disp_file ]; then
    _supported_config_=$($CAT "${CLI_CONF_DIR}"/expansion_disp_file | $GREP -w "ENIQ Target Configuration Selected Type" | $AWK -F ": " '{print $2}')
fi
get_server_type
target_tmpdb_count_RD1=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v NoofTempDB_RD1)
if [ ! "${target_tmpdb_count_RD1}" ]; then
    _err_msg_="Could not read ${target_tmpdb_count_RD1} param from ${DB_CONF}"
    abort_script "$_err_msg_" 
fi
`run_remote_cmd "dwh_reader_1" ". /eniq/installation/core_install/lib/common_functions.lib; iniget DB_DISK_ALLOC -f ${ENIQ_INST_DIR}/config/sym_links.ini -v TEMPDB_DISKS" "${LOGFILE}" root disable_tty | sed 's/ /\n/g' > "${VAR_TMP_DIR}"/Allocated_luns_temp_mpath_RD1.txt`
if [ ! -s "${VAR_TMP_DIR}"/Allocated_luns_temp_mpath_RD1.txt ]; then
    _err_msg_="Could not read TEMPDB_DISKS param from ${DB_CONF}"
    abort_script "$_err_msg_" 
fi
present_tmpdb_count_RD1=$($CAT "${VAR_TMP_DIR}"/Allocated_luns_temp_mpath_RD1.txt | wc -l)
if [ ! "${present_tmpdb_count_RD1}" ]; then
    _err_msg_="Could not read ${present_tmpdb_count_RD1} param from ${DB_CONF}"
    abort_script "$_err_msg_" 
fi
target_tmpdb_count_RD2=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v NoofTempDB_RD2)
if [ ! "${target_tmpdb_count_RD2}" ]; then
    _err_msg_="Could not read ${target_tmpdb_count_RD2} param from ${DB_CONF}"
    abort_script "$_err_msg_" 
fi
`run_remote_cmd "dwh_reader_2" ". /eniq/installation/core_install/lib/common_functions.lib; iniget DB_DISK_ALLOC -f ${ENIQ_INST_DIR}/config/sym_links.ini -v TEMPDB_DISKS" "${LOGFILE}" root disable_tty | sed 's/ /\n/g' > "${VAR_TMP_DIR}"/Allocated_luns_temp_mpath_RD2.txt`
if [ ! -s "${VAR_TMP_DIR}"/Allocated_luns_temp_mpath_RD2.txt ]; then
    _err_msg_="Could not read TEMPDB_DISKS param from ${DB_CONF}"
    abort_script "$_err_msg_" 
fi
present_tmpdb_count_RD2=$($CAT "${VAR_TMP_DIR}"/Allocated_luns_temp_mpath_RD2.txt | wc -l)
if [ ! "${present_tmpdb_count_RD2}" ]; then
    _err_msg_="Could not read ${present_tmpdb_count_RD2} param from ${DB_CONF}"
    abort_script "$_err_msg_" 
fi
tmpdb_add_count_RD[1]=$(expr "${target_tmpdb_count_RD1}" - "${present_tmpdb_count_RD1}")
tmpdb_add_count_RD[2]=$(expr "${target_tmpdb_count_RD2}" - "${present_tmpdb_count_RD2}")

reader_number=1
tempdb_status=0
DATABASE_QUERY="select DBFileName, RWMode, Online from sp_iqfile() where DBFileName like 'reader%';"

if [ "${_supported_config_}" == "G" ]; then
    while [ "${reader_number}" -lt 3 ]
    do
        if [ -e /tmp/tempDb_addition_status_RD"${reader_number}" ]; then
            log_msg -s "\n-----------------------------------------------------" -l "${LOGFILE}"
            log_msg -s "\nSkipping this stage as temp_DB LUNs are already added on Reader ${reader_number}" -l "${LOGFILE}"
            log_msg -s "\n-----------------------------------------------------" -l "${LOGFILE}"
            reader_number=$(expr "$reader_number" + 1)
        else
            log_msg -s "\n-----------------------------------------------------" -l "${LOGFILE}"
            log_msg -s "\nStarting to Add TEMPDB LUNS on READER ${reader_number}......"
        
            #Taking backup of sym_link.ini file
            run_remote_cmd "dwh_reader_${reader_number}" "$CP -p ${ENIQ_CONFIG_DIR}/sym_links.ini /var/tmp/sym_links.ini_tmp_bkp"
            _sys_ini_bkp_exe_status_=$?
            if [ $_sys_ini_bkp_exe_status_ -ne 0 ]; then
                _err_msg_="Failed to take sym_links.ini backup"
                abort_script "${_err_msg_}"
            fi
        
            #Taking backup of 99-iq-raw-devs.rules
            run_remote_cmd "dwh_reader_${reader_number}" "$CP -p ${ENIQ_CONFIG_DIR}/99-iq-raw-devs.rules /var/tmp/99-iq-raw-devs.rules_tmp_bkp"
            _99_devs_rules_bkp_exe_status_=$?
            if [ $_99_devs_rules_bkp_exe_status_ -ne 0 ]; then
                _err_msg_="Failed to take 99-iq-raw-devs.rules backup"
                abort_script "${_err_msg_}"
            fi
            if [ ! -f "/var/tmp/done_get_disk_info_${reader_number}" ]; then
                log_msg -s "\nExecuting get_disk_info.bsh on reader_${reader_number}" -l "${LOGFILE}"
                run_remote_cmd "dwh_reader_${reader_number}" "$BASH ${ENIQ_CORE_INST_DIR}/bin/get_disk_info.bsh -i stats -l /tmp/expand.log -t raw -e -T -a automation" >> /dev/null 2>&1
                _get_disk_info_exe_status_=$?
                if [ $_get_disk_info_exe_status_ -ne 0 ]; then
                    run_remote_cmd "dwh_reader_${reader_number}" "$CP -p /var/tmp/sym_links.ini_tmp_bkp ${ENIQ_CONFIG_DIR}/sym_links.ini"
                    _err_msg_="Unable to select TempDB LUNS"
                    abort_script "${_err_msg_}"
                else
                    touch /var/tmp/done_get_disk_info_${reader_number}
                fi
            fi
            $BASH "${ENIQ_ADMIN_BIN_DIR}"/manage_eniq_services.bsh -a start -s dwhdb -N
            _dwhdb_svc_start_exe_status_=$?
            if [ $_dwhdb_svc_start_exe_status_ -ne 0 ]; then
                _err_msg_="Unable to start the dwh_reader services"
                abort_script "${_err_msg_}"
            fi
            if [ ! -f "/var/tmp/done_update_cell_node_count_${reader_number}" ]; then
                run_remote_cmd "dwh_reader_${reader_number}" "$BASH ${ENIQ_ADMIN_BIN_DIR}/update_cell_node_count.bsh -r -t ${tmpdb_add_count_RD[$reader_number]} -T -a automation" >> /dev/null 2>&1
                _update_cell_node_exe_status_=$?
                if [ $_update_cell_node_exe_status_ -ne 0 ]; then
                    run_remote_cmd "dwh_reader_${reader_number}" "$CP -p /var/tmp/99-iq-raw-devs.rules_tmp_bkp ${ENIQ_CONFIG_DIR}/99-iq-raw-devs.rules"
                    _err_msg_="Unable to update cell node count "
                    abort_script "${_err_msg_}"
                else
                    touch /var/tmp/done_update_cell_node_count_${reader_number}
                fi
            fi
        
            run_remote_cmd "dwh_reader_${reader_number}" "$BASH ${ENIQ_CORE_INST_DIR}/bin/eniq_core_install.bsh -s create_db_sym_links -n" >> /dev/null 2>&1
            _create_db_sym_exe_status_=$?
            if [ $_create_db_sym_exe_status_ -ne 0 ]; then
                _err_msg_="Unable to execute create_db_sym_links"
                abort_script "${_err_msg_}"
            fi
        
            run_remote_cmd "dwh_reader_${reader_number}" "$BASH ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh -a start -s eniq-dwh_reader -N"
            _dwh_reader_exe_status_=$?
            if [ $_dwh_reader_exe_status_ -ne 0 ]; then
                _err_msg_="Unable to star dwh_reader service"
                abort_script "${_err_msg_}"
            fi
        
            #Taking backup of sym_link.ini file
            run_remote_cmd "dwh_reader_${reader_number}" "$CP -p ${ENIQ_CONFIG_DIR}/sym_links.ini /var/tmp/sym_links.ini_tmp_bkp"
            _syms_ini_bkp_exe_status_=$?
            if [ $_syms_ini_bkp_exe_status_ -ne 0 ]; then
                _err_msg_="Failed to take sym_links.ini backup"
                abort_script "${_err_msg_}"
            fi
        
            run_remote_cmd "dwh_reader_${reader_number}" "su - dcuser -c '$BASH ${ENIQ_CORE_INST_DIR}/bin/add_reader_temp_dbspace.bsh -c ${ENIQ_CONFIG_DIR}/ -d ${ENIQ_CONFIG_DIR}/niq.ini -s ${ENIQ_CONFIG_DIR}/sym_links.ini'" >> /dev/null 2>&1
            _add_reader_temp_dbspace_exe_status_=$?
            if [ $_add_reader_temp_dbspace_exe_status_ -ne 0 ]; then
                rollback_tempdb ${reader_number}
                run_remote_cmd "dwh_reader_${reader_number}" "$CP -p /var/tmp/sym_links.ini_tmp_bkp ${ENIQ_CONFIG_DIR}/sym_links.ini"
                _err_msg_="Failed to add devices to SAP IQ on dwh_reader_${reader_number}"
                abort_script "${_err_msg_}"
            fi
            $TOUCH /tmp/tempDb_addition_status_RD"${reader_number}"
        fi
        run_remote_cmd "dwh_reader_${reader_number}" ". /eniq/installation/core_install/lib/common_functions.lib;check_status \"$DATABASE_QUERY\" "dwh_reader_${reader_number}"" >> /dev/null 2>&1
        _temp_status_exe_status_=$?
        if [ $_temp_status_exe_status_ -eq 1 ]; then
            _err_msg_="Could not get dwhdb DBA Password"
            abort_script "${_err_msg_}"
        elif [ $_temp_status_exe_status_ -eq 2 ]; then
            _err_msg_="Could not read System User from  ${ENIQ_CONF_DIR}/${SUNOS_INI}"
            abort_script "${_err_msg_}"
        elif [ $_temp_status_exe_status_ -eq 3 ]; then
            _err_msg_="Could not read IQ values from ${ENIQ_INI}"
            abort_script "${_err_msg_}"
        else
            temp_db_count=$($CAT /eniq/sw/conf/status_file.txt | wc -l)
            `run_remote_cmd "dwh_reader_${reader_number}" ". /eniq/installation/core_install/lib/common_functions.lib; iniget DB_DISK_ALLOC -f ${ENIQ_INST_DIR}/config/sym_links.ini -v TEMPDB_DISKS | sed 's/ /\n/g'" "${LOGFILE}" root disable_tty > "${VAR_TMP_DIR}"/new_updated_luns_temp_mpath_RD1.txt`
            if [ ! -s "${VAR_TMP_DIR}"/new_updated_luns_temp_mpath_RD1.txt ]; then
                _err_msg_="Could not read TEMPDB_DISKS param from ${DB_CONF}"
                abort_script "$_err_msg_" 
            fi
            tmp_db_count_cli=$($CAT "${VAR_TMP_DIR}"/new_updated_luns_temp_mpath_RD1.txt | wc -l)
            if [ ! "${present_tmpdb_count_RD1}" ]; then
                _err_msg_="Could not read ${present_tmpdb_count_RD1} param from ${DB_CONF}"
                abort_script "$_err_msg_" 
            fi
            if [ "${temp_db_count}" == "${tmp_db_count_cli}" ]; then
                log_msg -s "\nTempDB added Successfully on dwh_reader_${reader_number}"
            else
                _err_msg_="TempDB addittion not successful for dwh_reader_${reader_number}"
                abort_script "${_err_msg_}"
            fi
            run_remote_cmd "dwh_reader_${reader_number}" "$RM -rf /var/tmp/tempids" >> /dev/null 2>&1
            run_remote_cmd "dwh_reader_${reader_number}" "$RM -rf /var/tmp/temp_ids" >> /dev/null 2>&1
            run_remote_cmd "dwh_reader_${reader_number}" "$RM -rf /var/tmp/sym_links.ini_tmp_bkp" >> /dev/null 2>&1
            run_remote_cmd "dwh_reader_${reader_number}" "$RM -rf /var/tmp/99-iq-raw-devs.rules_tmp_bkp" >> /dev/null 2>&1
            run_remote_cmd "dwh_reader_${reader_number}" "$RM -rf ${VAR_TMP_DIR}/new_updated_luns_temp_mpath_RD1.txt" >> /dev/null 2>&1
            reader_number=$(expr "$reader_number" + 1)
        fi
    done
else
    if [ -e /tmp/tempDb_addition_status_RD1 ]; then
        log_msg -s "Skipping this stage as temp_DB LUNs are already added on Reader 1" -l "${LOGFILE}"
    else
        log_msg -s "\n-----------------------------------------------------" -l "${LOGFILE}"
        log_msg -s "\nStarting to Add TEMPDB LUNS on READER ${reader_number}...." -l "${LOGFILE}"
        #Taking backup of sym_link.ini file
        run_remote_cmd "dwh_reader_${reader_number}" "$CP -p ${ENIQ_CONFIG_DIR}/sym_links.ini /var/tmp/sym_links.ini_tmp_bkp"
        _syss_ini_bkp_exe_status_=$?
        if [ $_syss_ini_bkp_exe_status_ -ne 0 ]; then
            _err_msg_="Failed to take sym_links.ini backup"
            abort_script "${_err_msg_}"
        fi

        #Taking backup of 99-iq-raw-devs.rules
        run_remote_cmd "dwh_reader_${reader_number}" "$CP -p ${ENIQ_CONFIG_DIR}/99-iq-raw-devs.rules /var/tmp/99-iq-raw-devs.rules_tmp_bkp"
        _99_raw_bkp_exe_status_=$?
        if [ $_99_raw_bkp_exe_status_ -ne 0 ]; then
            _err_msg_="Failed to take 99-iq-raw-devs.rules backup"
            abort_script "${_err_msg_}"
        fi

        if [ ! -f "touch /var/tmp/done_get_disk_info_${reader_number}" ]; then 
            log_msg -s "\nExecuting get_disk_info.bsh on reader_${reader_number}" -l "${LOGFILE}"
            run_remote_cmd "dwh_reader_${reader_number}" "$BASH ${ENIQ_CORE_INST_DIR}/bin/get_disk_info.bsh -i stats -l /tmp/expand.log -t raw -e -T -a automation" >> /dev/null 2>&1
            _get_disk_info_bkp_exe_status_=$?
            if [ $_get_disk_info_bkp_exe_status_ -ne 0 ]; then
                #Restoring from backup of sym_link.ini file
                run_remote_cmd "dwh_reader_${reader_number}" "$CP -p /var/tmp/sym_links.ini_bkp ${ENIQ_CONFIG_DIR}/sym_links.ini"
                _err_msg_="Unable to select TempDB LUNS"
                abort_script "${_err_msg_}"
            else 
                touch /var/tmp/done_get_disk_info_${reader_number}
            fi
        fi
        $BASH "${ENIQ_ADMIN_BIN_DIR}"/manage_eniq_services.bsh -a start -s dwhdb -N
        _dwhdb_svc_start_exe_status_=$?
        if [ $_dwhdb_svc_start_exe_status_ -ne 0 ]; then
            _err_msg_="Unable to start the dwh_reader services"
            abort_script "${_err_msg_}"
        fi
        if [ ! -f "/var/tmp/done_update_cell_node_count_${reader_number}" ]; then
            run_remote_cmd "dwh_reader_${reader_number}" "$BASH ${ENIQ_ADMIN_BIN_DIR}/update_cell_node_count.bsh -r -t ${tmpdb_add_count_RD[$reader_number]} -T -a automation" >> /dev/null 2>&1
            _update_cell_node_exe_status_=$?
            if [ $_update_cell_node_exe_status_ -ne 0 ]; then
                run_remote_cmd "dwh_reader_${reader_number}" "$CP -p /var/tmp/99-iq-raw-devs.rules_tmp_bkp ${ENIQ_CONFIG_DIR}/99-iq-raw-devs.rules"
                _err_msg_="Unable to update cell node count"
                abort_script "${_err_msg_}"
            else
                touch /var/tmp/done_update_cell_node_count_${reader_number}
            fi
        fi

        run_remote_cmd "dwh_reader_${reader_number}" "$BASH ${ENIQ_CORE_INST_DIR}/bin/eniq_core_install.bsh -s create_db_sym_links -n" >> /dev/null 2>&1
        _create_db_sym_linkss_exe_status_=$?
        if [ $_create_db_sym_linkss_exe_status_ -ne 0 ]; then
            _err_msg_="Unable to create symlink for reader_${reader_number}"
            abort_script "${_err_msg_}"
        fi

        run_remote_cmd "dwh_reader_${reader_number}" "$BASH ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh -a start -s eniq-dwh_reader -N"
        _dwh_readers_exe_status_=$?
        if [ $_dwh_readers_exe_status_ -ne 0 ]; then
            _err_msg_="Failed to start dwh_reader service"
            abort_script "${_err_msg_}"
        fi

        #Taking backup of sym_link.ini file
        run_remote_cmd "dwh_reader_${reader_number}" "$CP -p ${ENIQ_CONFIG_DIR}/sym_links.ini /var/tmp/sym_links.ini_tmp_bkp"
        _sys_iini_bkp_exe_status_=$?
        if [ $_sys_iini_bkp_exe_status_ -ne 0 ]; then
            _err_msg_="Failed to take sym_links.ini backup"
            abort_script "${_err_msg_}"
        fi
        
        run_remote_cmd "dwh_reader_${reader_number}" "su - dcuser -c '$BASH ${ENIQ_CORE_INST_DIR}/bin/add_reader_temp_dbspace.bsh -c ${ENIQ_CONFIG_DIR}/ -d ${ENIQ_CONFIG_DIR}/niq.ini -s ${ENIQ_CONFIG_DIR}/sym_links.ini'" >> /dev/null 2>&1
        _add_readder_temp_dbspace_exe_status_=$?
        if [ $_add_readder_temp_dbspace_exe_status_ -ne 0 ]; then
            rollback_tempdb ${reader_number}
            #Restoring from backup of sym_link.ini file
            run_remote_cmd "dwh_reader_${reader_number}" "$CP -p /var/tmp/sym_links.ini_tmp_bkp ${ENIQ_CONFIG_DIR}/sym_links.ini"
            _err_msg_="Failed to add devices to SAP IQ on ${HNAME}"
            abort_script "${_err_msg_}"
        fi
        $TOUCH /tmp/tempDb_addition_status_RD${reader_number}
    fi
    run_remote_cmd "dwh_reader_${reader_number}" ". /eniq/installation/core_install/lib/common_functions.lib;check_status \"$DATABASE_QUERY\" "dwh_reader_${reader_number}"" >> /dev/null 2>&1
    _check_status_temp_exe_status_=$?
    if [ $_check_status_temp_exe_status_ -eq 1 ]; then
        _err_msg_="Could not get dwhdb DBA Password"
        abort_script "${_err_msg_}"
    elif [ $_check_status_temp_exe_status_ -eq 2 ]; then
        _err_msg_="Could not read System User from  ${ENIQ_CONF_DIR}/${SUNOS_INI}"
        abort_script "${_err_msg_}"
    elif [ $_check_status_temp_exe_status_ -eq 3 ]; then
        _err_msg_="Could not read IQ values from ${ENIQ_INI}"
        abort_script "${_err_msg_}"
    else
        temp_db_count=$($CAT /eniq/sw/conf/status_file.txt | wc -l)
        `run_remote_cmd "dwh_reader_${reader_number}" ". /eniq/installation/core_install/lib/common_functions.lib; iniget DB_DISK_ALLOC -f ${ENIQ_INST_DIR}/config/sym_links.ini -v TEMPDB_DISKS | sed 's/ /\n/g'" "${LOGFILE}" root disable_tty > "${VAR_TMP_DIR}"/new_updated_luns_temp_mpath_RD1.txt`
        if [ ! -s "${VAR_TMP_DIR}"/new_updated_luns_temp_mpath_RD1.txt ]; then
            _err_msg_="Could not read TEMPDB_DISKS param from ${DB_CONF}"
            abort_script "$_err_msg_" 
        fi
        tmp_db_count_cli=$($CAT "${VAR_TMP_DIR}"/new_updated_luns_temp_mpath_RD1.txt | wc -l)
        if [ ! "${present_tmpdb_count_RD1}" ]; then
            _err_msg_="Could not read ${present_tmpdb_count_RD1} param from ${DB_CONF}"
            abort_script "$_err_msg_" 
        fi
        if [ "${temp_db_count}" == "${tmp_db_count_cli}" ]; then
            log_msg -s "\nTempDB added successfully on dwh_reader_1" -l "${LOGFILE}"
        else
            _err_msg_="TempDB addittion not successful on dwh_reader_${reader_number}"
            abort_script "${_err_msg_}"
        fi
        
    fi
    run_remote_cmd "dwh_reader_${reader_number}" "$RM -rf /var/tmp/tempids" >> /dev/null 2>&1
    run_remote_cmd "dwh_reader_${reader_number}" "$RM -rf /var/tmp/temp_ids" >> /dev/null 2>&1
    run_remote_cmd "dwh_reader_${reader_number}" "$RM -rf /var/tmp/sym_links.ini_tmp_bkp" >> /dev/null 2>&1
    run_remote_cmd "dwh_reader_${reader_number}" "$RM -rf /var/tmp/99-iq-raw-devs.rules_tmp_bkp" >> /dev/null 2>&1
    run_remote_cmd "dwh_reader_${reader_number}" "$RM -rf ${VAR_TMP_DIR}/new_updated_luns_temp_mpath_RD1.txt" >> /dev/null 2>&1
fi
$RM -rf /tmp/tempDb_addition_status_RD1
$RM -rf /tmp/tempDb_addition_status_RD2
$RM -rf /var/tmp/done_get_disk_info_1
$RM -rf /var/tmp/done_get_disk_info_2
$RM -rf /var/tmp/done_update_cell_node_count_1
$RM -rf /var/tmp/done_update_cell_node_count_2

# Add flag
$ECHO "\n[status_tempdb]" >> "${CLI_CONF_DIR}"/expansion_disp_file | $TEE -a "${LOGFILE}"
$ECHO "tempdb_status=1" >> "${CLI_CONF_DIR}"/expansion_disp_file | $TEE -a "${LOGFILE}"

insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}"
set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
}

### Function: remove_luns ###
#
#  Function to remove newly added luns in case of failures
#
# Arguments:
#       none
# Return Values:
#       none
remove_luns()
{
$SU - ${_sysuser_} -c "$ENV |$EGREP '^(SYBASE|ASDIR|IQDIR|ASALOGDIR|SQLANY)'" > $TEM_DIR/sybase_det.$$
$CAT $TEM_DIR/sybase_det.$$ |$EGREP '^(SYBASE|ASDIR|IQDIR|ASALOGDIR|SQLANY)' > $TEM_DIR/sybase_det_var.$$
. $TEM_DIR/sybase_det_var.$$

#Query to store MainDb DBFileNames
DATABASE_QUERY="select DBFileName from sp_iqfile() where DBFileName like 'main%';"

TEM=/tmp


#Fetching DWH_DBSPACES_MAIN list before maindb addition execution
iniget DWH_DBSPACES_MAIN -f /eniq/installation/config/sym_links_bkp_main_db.ini > /var/tmp/maindb

#Stopping all the services
$BASH /eniq/admin/bin/manage_deployment_services.bsh -a stop -s ALL -N

#Starting DWHDB service
$BASH /eniq/admin/bin/manage_eniq_services.bsh -a start -s eniq-dwhdb -N
_ip_address_="dwh_reader_1"
run_remote_cmd "${_ip_address_}" "$BASH /eniq/admin/bin/manage_eniq_services.bsh -a start -s eniq-dwh_reader -N"
_ip_address_="dwh_reader_2"
run_remote_cmd "${_ip_address_}" "$BASH /eniq/admin/bin/manage_eniq_services.bsh -a start -s eniq-dwh_reader -N"


local old_luns=$(wc -l < /var/tmp/maindb | cut -d "" -f 1)
local first_lun=$((old_luns+1))
$SU - $_sysuser_ -c "${IQDIR}/bin64/dbisql @${db_connection_string_enc} \"${DATABASE_QUERY}OUTPUT TO /var/tmp/maindb_luns.txt\"" >> /dev/null 2>&1
local filename=/var/tmp/maindb_luns.txt
local last_lun=$(grep -o "main_" $filename | wc -l)
local new_lun=$((last_lun - old_luns))
tail -n ${new_lun} /var/tmp/maindb_luns.txt > /var/tmp/maindb
file=/var/tmp/maindb

if [ -f "$file" ]; then
    flag=1
    for line in `cat /var/tmp/maindb`; do
        db_line=$line
        line=${line##*([[:space:]])}
        line=${line%%*([[:space:]])}
        line="${line//\'/}"

#Query for making the lun readonly
        $ECHO "alter dbspace IQ_MAIN" > ${ENIQ_ADMIN_DIR}/sql/remove_dbspace_1.sql
        $ECHO "alter file ${line} READONLY" >> ${ENIQ_ADMIN_DIR}/sql/remove_dbspace_1.sql

#Query for emptying the lun
        $ECHO "sp_iqemptyfile ${line}" > ${ENIQ_ADMIN_DIR}/sql/remove_dbspace_2.sql

#Query for dropping the lun
        $ECHO "alter dbspace IQ_MAIN" > ${ENIQ_ADMIN_DIR}/sql/remove_dbspace_3.sql
        $ECHO "drop file ${line}" >> ${ENIQ_ADMIN_DIR}/sql/remove_dbspace_3.sql

        $SU - $_sysuser_ -c "${IQDIR}/bin64/dbisql @${db_connection_string_enc} -q ${ENIQ_ADMIN_DIR}/sql/remove_dbspace_1.sql"
#Checking if the lun is in RO mode
        DATABASE_QUERY="select RWMode from sp_iqfile() where DBFileName like $db_line;"
        $SU - $_sysuser_ -c "${IQDIR}/bin64/dbisql @${db_connection_string_enc} \"${DATABASE_QUERY}OUTPUT TO /var/tmp/maindb_luns.txt\"" >> /dev/null 2>&1
        filename=/var/tmp/maindb_luns.txt
        last_lun_status=$(grep -w "RO" $filename | wc -l)
        if [ $last_lun_status -ne $flag ]; then
            _err_msg="Failed to make the lun READONLY"
			abort_script "${_err_msg}"
        fi
        $SU - $_sysuser_ -c "${IQDIR}/bin64/dbisql @${db_connection_string_enc} -q ${ENIQ_ADMIN_DIR}/sql/remove_dbspace_2.sql" >> /dev/null 2>&1
        sleep 200
#Checking if the OkToDrop status of lun have changed to Y
        DATABASE_QUERY="select OkToDrop from sp_iqfile() where DBFileName like $db_line;"
        $SU - $_sysuser_ -c "${IQDIR}/bin64/dbisql @${db_connection_string_enc} \"${DATABASE_QUERY}OUTPUT TO /var/tmp/maindb_luns.txt\"" >> /dev/null 2>&1
        filename=/var/tmp/maindb_luns.txt
        last_lun_status=$(grep -w "Y" $filename | wc -l)
        if [ $last_lun_status -ne $flag ]; then
			_err_msg="Failed to make the lun empty"
			abort_script "${_err_msg}"
        fi
        $SU - $_sysuser_ -c "${IQDIR}/bin64/dbisql @${db_connection_string_enc} -q ${ENIQ_ADMIN_DIR}/sql/remove_dbspace_3.sql" >> /dev/null 2>&1
        sleep 10
        
    done
else
    _err_msg="${file} does not exist"
    abort_script "$_err_msg"
fi

iniget DWH_DBSPACES_MAIN -f /eniq/installation/config/sym_links_bkp_main_db.ini > /var/tmp/maindb_old
iniget DWH_DBSPACES_MAIN -f /eniq/installation/config/sym_links.ini > /var/tmp/maindb_new
local total_new_paths=$(wc -l < /var/tmp/maindb_new | cut -d "" -f 1)
local total_old_paths=$(wc -l < /var/tmp/maindb_old | cut -d "" -f 1)
local total_paths_tobe_removed=$((total_new_paths - total_old_paths))
tail -n ${total_paths_tobe_removed} /var/tmp/maindb_new > /var/tmp/maindb
for line in `$CAT /var/tmp/maindb`; do
    path=`iniget $line -f /eniq/installation/config/sym_links.ini -v Path`
    path="${path//\'/}"
    $RM -rf ${path}
done

}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_get_id_=`$ENV |$GREP -w SUDO_USER | $EGREP "^[[:blank:]]*SUDO_USER="|$AWK -F\= '{print $2}'|$SED -e 's|"||g'`

_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

_check_group_=`$ID $_get_id_ | $AWK -F\( '{print $3}' | $AWK -F\) '{print $1}'`


    if [ "${_get_id_}" == "" ]; then

        if [ "${_check_id_}" == "root" ]; then
           # Set 1 for true
           _user_root=1

        else
           _err_msg_="You must be root or admin to execute this script."
           abort_script "${_err_msg_}"
        fi
    else
        if [ "${_check_group_}" == "ENIQ_ADMIN_ROLE" ]; then
           # Set 0 for false
           _user_root=0

        else
            _err_msg_="You must be root or admin to execute this script."
            abort_script "${_err_msg_}"
        fi
    fi
}

### Function: check_for_file ###
#
# To check whether file or directory exist or not and to test the basic file operations.
#
# Arguments:
#       $1 : File operations
#        $2 : File qualified path
# Return Values:
#         none
check_for_file()
{
if [ ! "$1" ]; then
    _err_msg_="$1 does not exist"
    abort_script "$_err_msg_"
fi
if [ ! "$2" ]; then
    _err_msg_="$2 does not exist"
    abort_script "$_err_msg_"
fi
}


### Function: cleanup ###
#
# Final stage. Cleanup of temporary directory 
#
# Arguments:
#   none
# Return Values:
#   none
cleanup()
{
insert_header_footer head "Entering ENIQ DB ${ACTION_TYPE} stage - ${NEXT_STAGE}" "${LOGFILE}"

log_msg -t -q -s "Deleting temporary files" -l "${LOGFILE}"
_temp_files_="/var/tmp/input_file1.txt /var/tmp/target_conf.txt /var/tmp/Allocated_luns_temp_mpath_RD1.txt /var/tmp/Allocated_luns_temp_mpath_RD2.txt /var/tmp/new_updated_luns_temp_mpath_RD1.txt /eniq/sw/conf/expansion_disp_file /eniq/sw/conf/expansion_info_file /eniq/installation/core_install/etc/current_eniq_db_expansion_stage"
for _file_ in ${_temp_files_}; do
    if [ -f "${_file_}" ]; then
        log_msg -t -q -s "Deleting ${_file_} file" -l "${LOGFILE}"
        $RM -rf ${_file_}
    fi
done

log_msg -s "Cleaning up the temporary directory" -l "${LOGFILE}"
$RM -rf ${TEM_DIR}
$RM -rf ${Var_TEM_DIR}
$RM -rf ${Rollback_EXP}
remove_tmp_file
insert_header_footer foot "Successfully completed the cleanup" "${LOGFILE}"
$ECHO "\nDatabase Expansion Stages Completed: ${number_of_stages} of ${number_of_stages}" | $TEE -a ${LOGFILE}
}


### Function: disabling_OMBS_policies ###
#
#   To disable the OMBS policies across the deployment
#   
#
# Arguments:
#       none
# Return Values:
#       none
disabling_OMBS_policies()
{
insert_header_footer head "Entering ENIQ DB Expansion stage - ${NEXT_STAGE}" "${LOGFILE}"
ombs_flag=$($CAT ${CLI_CONF_DIR}/expansion_disp_file | $GREP -w "Selected value to disable OMBS policies" | $AWK -F ": " '{print $2}')
if [ -z "$ombs_flag" ]; then
    _err_msg_="Could not read OMBS Policy Disable value from expansion_disp_file file"
    abort_script "$_err_msg_" 
fi
if [[ $ombs_flag == 'Y' ]]; then
    script=$ENIQ_CORE_INST_DIR/bin/manage_ombs_policies.bsh
    i=1
    ombs_choice=$($CAT /var/tmp/input_file1.txt | $GREP -w "ENIQ_connected_to_OMBS" | $AWK -F ":" '{print $3}')
    if [ -z "$ombs_choice" ]; then
        _err_msg_="Could not read ENIQ-OMBS conneted confirmation value from input_file1.txt file"
        abort_script "$_err_msg_" 
    fi
    ombs_policies=$($CAT /var/tmp/input_file1.txt | $GREP -w "Disable_OMBS_Policy" | $AWK -F ":" '{print $3}')
    if [ -z "$ombs_policies" ]; then
        _err_msg_="Could not read OMBS Policy Disable value from input_file1.txt file"
        abort_script "$_err_msg_" 
    fi
    if [[ $ombs_choice == 'Y' && $ombs_policies == 'Y' ]]; then
        $ECHO "\nStarting to Disable OMBS Policies\n" | $TEE -a "${LOGFILE}"
        ombs_pass=$($CAT /var/tmp/input_file1.txt | $GREP -w "OMBS_password" | $AWK -F ":" '{print $3}')
        if [ -z "$ombs_pass" ]; then
            _err_msg_="Could not read OMBS Password from input_file1.txt file"
            abort_script "$_err_msg_" 
        fi
        ombs_pass_key=$($CAT /var/tmp/input_file1.txt | $GREP -w "OMBS_password_key" | $AWK -F ":" '{print $3}')
        if [ -z "$ombs_pass_key" ]; then
            _err_msg_="Could not read OMBS Password key from input_file1.txt file"
            abort_script "$_err_msg_" 
        fi
        ombs_pass_dec=`$ECHO $ombs_pass | openssl enc -aes-256-ctr -md sha512 -a -d -salt -pass pass:$ombs_pass_key`
        ombs_uname=$($CAT /var/tmp/input_file1.txt | $GREP -w "OMBS_username" | $AWK -F ":" '{print $3}')
        if [ -z "$ombs_uname" ]; then
            _err_msg_="Could not read OMBS Username from input_file1.txt file"
            abort_script "$_err_msg_" 
        fi
        ombs_ip=$($CAT /var/tmp/input_file1.txt | $GREP -w "OMBS_IP" | $AWK -F ":" '{print $3}')
        if [ -z "$ombs_ip" ]; then
            _err_msg_="Could not read OMBS server IP from input_file1.txt file"
            abort_script "$_err_msg_" 
        fi
        
        ping -c 4 ${ombs_ip} >> /dev/null 2>&1
        if [ $? -ne 0 ]; then
            _err_msg_="Entered OMBS Server IP ${ombs_ip} is not Reachable"
            abort_script "$_err_msg_" 
        else
            $ECHO "Entered OMBS Server IP ${ombs_ip} is Reachable" | $TEE -a "${LOGFILE}"
        fi
        $CAT /var/tmp/input_file1.txt | $GREP -w "ENIQ_backup_host" | $AWK -F ":" '{print $3}' | $SED -e 's/ /\n/g' > /var/tmp/hostnames.txt
        if [ ! -s "/var/tmp/hostnames.txt" ]; then
            _err_msg_="Could not read ENIQ backup hostnames from input_file1.txt file"
            abort_script "$_err_msg_" 
        fi
        if [ "${CURR_SERVER_TYPE}" == "stats_coordinator" ]; then
        while read _line_; do
            $CP -rp $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies.bsh $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies_bkp.bsh
            $ECHO "eniq_hostname=$_line_" >> /var/tmp/tmp.txt
            $CAT $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies.bsh |  $SED -e 's/action_type=enable/action_type=disable/g' >> /var/tmp/tmp.txt
            $CP -rp /var/tmp/tmp.txt $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies.bsh
            $RM -rf /var/tmp/tmp.txt
            CMD="ssh -o StrictHostKeyChecking=no  ${ombs_uname}\@${ombs_ip} "
expect <<EOF
spawn bash  -c "${CMD} /bin/bash < ${script} "
sleep 7
expect {
"* password: " {send "${ombs_pass_dec}\r";exp_continue}
"ERROR" {send_user "\nERROR!!!\n"; exit 1}
sleep 60
timeout {send_user "\nTIMEOUT!\n"; exit 9}
}

EOF
            if [ $? -eq 0 ]; then
                $ECHO "\nSuccessfully Disabled OMBS Policies\n" | $TEE -a "${LOGFILE}"
            else
                _err_msg_="\nUnsuccessful to Disable OMBS Policies\n"
                abort_script "$_err_msg_" 
            fi
            $CP -rp $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies_bkp.bsh $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies.bsh
        done < /var/tmp/hostnames.txt
        $ECHO "\nVerifying OMBS Policies Status\n" | $TEE -a "${LOGFILE}"
        while read _line_; do
            $CP -rp $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies.bsh $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies_bkp.bsh
            $ECHO "eniq_hostname=$_line_" >> /var/tmp/tmp.txt
            $CAT $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies.bsh |  $SED -e 's/action_type=disable/action_type=list/g' >> /var/tmp/tmp.txt
            $CP -rp /var/tmp/tmp.txt $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies.bsh
            $RM -rf /var/tmp/tmp.txt
            CMD="ssh -o StrictHostKeyChecking=no  ${ombs_uname}\@${ombs_ip} "
expect <<EOF
spawn bash  -c "${CMD} /bin/bash < ${script} "
sleep 7
expect {
"* password: " {send "${ombs_pass_dec}\r";exp_continue}
"ERROR" {send_user "\nERROR!!!\n"; exit 1}
sleep 60
timeout {send_user "\nTIMEOUT!\n"; exit 9}
}

EOF
            if [ $? -ne 0 ]; then
                _err_msg_="\nUnsuccessful to check OMBS policies status\n"
                abort_script "$_err_msg_" 
            fi
            $CP -rp $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies_bkp.bsh $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies.bsh
        done < /var/tmp/hostnames.txt
        $RM -rf /var/tmp/hostnames.txt
        $ECHO "\n------------------------------------------------------------------\n" | $TEE -a "${LOGFILE}"
        fi
        $ECHO "\n------------------------------------------------------------------\n" | $TEE -a "${LOGFILE}"
        elif [[ $ombs_choice == 'Y' && $ombs_policies == 'N' ]]; then
            $ECHO "Skipping this stage as OMBS Policies are manually disabled" | $TEE -a "${LOGFILE}"
        else
            $ECHO "Skipping this stage as OMBS Server is Not Configured" | $TEE -a "${LOGFILE}"
        fi
        $RM -rf $ENIQ_CORE_INST_DIR/bin/manage_ombs_policies_bkp.bsh
        insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}"
        set_next_stage `$EXPR ${ARRAY_ELEM}+1`
else
    $ECHO "OMBS Policy disabling is not required"  | $TEE "${LOGFILE}"
    insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}"
    set_next_stage `$EXPR ${ARRAY_ELEM}+1`
fi
}

### Function: display_target_configuration ###
#
#   Disaply the Target and current configuration to user
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
display_target_configuration(){

target_maindb_count=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v NoofMainDB)
present_maindb_count=$($CAT "${CLI_CONF_DIR}"/expansion_info_file | $GREP -w "total_maindb_count" | $AWK -F "=" '{print $2}')
if [ "${server_type}" == "MB" ] || [ "${server_type}" == "MR" ]; then
    target_tmpdb_count_RD1=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v NoofTempDB_RD1)
    if [ ! "${target_tmpdb_count_RD1}" ]; then
        _err_msg_="Could not read ${target_tmpdb_count_RD1} param from ${DB_CONF}"
        abort_script "$_err_msg_" 
    fi
    present_tmpdb_count_RD1=$($CAT "${CLI_CONF_DIR}"/expansion_info_file | $GREP -w "total_tmpdb_count_rd1" | $AWK -F "=" '{print $2}')
    if [ ! "${present_tmpdb_count_RD1}" ]; then
        _err_msg_="Could not read ${present_tmpdb_count_RD1} param from ${DB_CONF}"
        abort_script "$_err_msg_" 
    fi
    target_tmpdb_count_RD2=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v NoofTempDB_RD2)
    if [ ! "${target_tmpdb_count_RD2}" ]; then
        _err_msg_="Could not read ${target_tmpdb_count_RD2} param from ${DB_CONF}"
        abort_script "$_err_msg_" 
    fi
    present_tmpdb_count_RD2=$($CAT "${CLI_CONF_DIR}"/expansion_info_file | $GREP -w "total_tmpdb_count_rd2" | $AWK -F "=" '{print $2}')
    if [ ! "${present_tmpdb_count_RD2}" ]; then
        _err_msg_="Could not read ${present_tmpdb_count_RD2} param from ${DB_CONF}"
        abort_script "$_err_msg_" 
    fi
fi
if [ "${present_maindb_count}" == "${target_maindb_count}" ] && [ "${present_tmpdb_count_RD1}" == "${target_tmpdb_count_RD1}" ] && [ "${present_tmpdb_count_RD2}" == "${target_tmpdb_count_RD2}" ]; then
    Lun_match_i=1
else
    Lun_match_i=-1

fi
}


### Function: db_expansion_build_stage_array ###
#
# Build a stage array using the stage file
#
# Arguments:
# None
# Return Values:
# None
db_expansion_build_stage_array(){

# Stagelist file location
$ECHO "Determining the stage file to use" | $TEE -a "${LOGFILE}" 
_stage_file_="${ENIQ_CORE_INST_DIR}/etc/eniq_db_expansion_stagelist"
if [ ! -s "${_stage_file_}" ]; then
    _err_msg_="Could not find ${_stage_file_} file, or it is empty"
    abort_script "$_err_msg_" 
fi
$ECHO "Building stage list from ${_stage_file_}\n" | $TEE -a "${LOGFILE}"

# Remove stages that are commented out
$RM -rf "${TEM_DIR}"/db_expansion_stagelist_file
$CAT "${_stage_file_}" | $EGREP -v '^[     ]*#' | $SED -e 's/ //g' > "${TEM_DIR}"/db_expansion_stagelist_file
if [ $? -ne 0 ]; then
    _err_msg_="Could not remove comments from ${_stage_file_} file"
    abort_script "$_err_msg_" 
fi

_cnt_=0
while read _line_; do
    _DB_EXP_stage_=$($ECHO "${_line_}" | $AWK '{print $1}' | sed -e 's/ //g')

    # Store the details in an array
    DB_EXP_STAGES[${_cnt_}]=${_DB_EXP_stage_}

    let _cnt_=_cnt_+1
done < "${TEM_DIR}"/db_expansion_stagelist_file
}


### Function: db_expansion_check_user_stage ###
#
# Check specified stage is valid
#
# Arguments:
#   $1 : User stage
# Return Values:
# None
db_expansion_check_user_stage(){
if [ ! "$1" ]; then
   $ECHO "ERROR: User stage not set, exiting"
   return 1
else
   _user_stage_=$1
fi

if [ "${_user_stage_}" == "cleanup" ]; then
    return 0
fi

log_msg -s "Checking if user specified stage - ${_user_stage_} - is valid" -l "${LOGFILE}"
$ECHO "${DB_EXP_STAGES[*]}" | $GREP -w "${_user_stage_}" >> /dev/null 2>&1
if [ $? -ne 0 ]; then
    log_msg -s "Specified stage ${_user_stage_} not a valid DB Expansion stage" -l "${LOGFILE}"
    return 1
else
    log_msg -s "Specified stage ${_user_stage_} is a DB Expansion stage" -l "${LOGFILE}" 
fi
}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}

### Function: get_current_configuration_type ###
#
#   Check the current configuration type of the server from the attached luna dn size.
#
# Arguments:
#       none
# Return Values:
#       none
get_current_configuration_type()
{

#Get the current MainDb's from the config file
for _maindb_det_ in $(iniget DWH_DBSPACES_MAIN -f "${ENIQ_CONF_DIR}"/"${SYM_INI}"); do
    # Get the Lun ID 
    _disk_lun_id_=$(iniget "${_maindb_det_}" -f "${ENIQ_CONF_DIR}"/"${SYM_INI}" -v Lun_ID)
    if [ ! "${_disk_lun_id_}" ]; then
        _err_msg_="Could not read ${_maindb_det_}:LUN_ID param from ${SYM_INI}"
        abort_script "$_err_msg_" 
    fi
    if [ "${_disk_lun_id_}" == "local" ]; then
        continue
    fi
    $ECHO "${_disk_lun_id_}" >> "${TEM_DIR}"/disk_lun_id
done

#Get the current TempDb's from the config file

for _tempdb_det_ in $(iniget DWH_DBSPACES_TEMP -f "${ENIQ_CONF_DIR}"/"${SYM_INI}"); do
    # Get the Lun ID 
    _disk_lun_tmp_id_=$(iniget "${_tempdb_det_}" -f "${ENIQ_CONF_DIR}"/"${SYM_INI}" -v Lun_ID)
    if [ ! "${_disk_lun_tmp_id_}" ]; then
        _err_msg_="Could not read ${_tempdb_det_}:LUN_ID param from ${SYM_INI}"
        abort_script "$_err_msg_" 
    fi
    if [ "${_disk_lun_tmp_id_}" == "local" ]; then
        continue
    fi
    $ECHO "${_disk_lun_tmp_id_}" >> "${TEM_DIR}"/disk_tmp_lun_id
done

if [ "${server_count}" == "4" ]; then
    for _line_ in $($CAT "${_deployed_servers_}" | $EGREP -v 'stats_coordinator|stats_engine'); do
        local _ip_address_ _serv_hostname_ _serv_type_ _count_
        _count_=`$ECHO ${_line_} |$GREP -o "::" | $WC -l`
        if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
            _ip_address_=$($ECHO "${_line_}" | $GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}')
            _serv_hostname_=$($ECHO "${_line_}" | $AWK -F"::" '{print $3}')
            _serv_type_=$($ECHO "${_line_}" | $AWK -F"::" '{print $4}')
        else
            _ip_address_=$($ECHO "${_line_}" | $AWK -F"::" '{print $1}')
            _serv_hostname_=$($ECHO "${_line_}" | $AWK -F"::" '{print $2}')
            _serv_type_=$($ECHO "${_line_}" | $AWK -F"::" '{print $3}')
        fi
        if [ ! "${_ip_address_}" ] || [ ! "${_serv_hostname_}" ] || [ ! "${_serv_type_}" ]; then
            _err_msg_="Unable to retrieve IP or hostname or server type.\n"
            abort_script "${_err_msg_}"
        fi
        if [ "${_serv_type_}" == "dwh_reader_1" ]; then
            run_remote_cmd "${_serv_hostname_}" "source ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib;iniget DWH_DBSPACES_TEMP -f ${ENIQ_CONF_DIR}/${SYM_INI}" | $TR -d '\r'  >> "${TEM_DIR}"/disk_tmp_dwh_reader_1
            if [ ! -f "${TEM_DIR}"/disk_tmp_dwh_reader_1 ]; then
                _err_msg_="Could not get the list of blocks from ${ENIQ_CONF_DIR}/${SYM_INI}"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
            fi
            for _lun_id_ in $($CAT "${TEM_DIR}"/disk_tmp_dwh_reader_1); do
                _Lun_id_=$(run_remote_cmd "${_serv_hostname_}" "source ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib;iniget ${_lun_id_} -f ${ENIQ_CONF_DIR}/${SYM_INI} -v Lun_ID" | $TR -d '\r')
                if [ ! "${_Lun_id_}" ]; then
                    _err_msg_="Could not read ${_Lun_id_}:LUN_ID param from ${SYM_INI}"
                    abort_script "$_err_msg_" 
                fi
                if [ "${_Lun_id_}" == "local" ]; then
                    continue
                fi
                $ECHO "${_Lun_id_}" >> "${TEM_DIR}"/disk_tmp_lun_id_dwh_reader_1
            done
        fi
        if [ "${_serv_type_}" == "dwh_reader_2" ]; then
            run_remote_cmd "${_serv_hostname_}" "source ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib;iniget DWH_DBSPACES_TEMP -f ${ENIQ_CONF_DIR}/${SYM_INI}" | $TR -d '\r'  >> "${TEM_DIR}"/disk_tmp_dwh_reader_2
            if [ ! -f "${TEM_DIR}"/disk_tmp_dwh_reader_2 ]; then
                _err_msg_="Could not get the list of blocks from ${ENIQ_CONF_DIR}/${SYM_INI}"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
            fi
            for _lun_id_ in  $($CAT "${TEM_DIR}"/disk_tmp_dwh_reader_2); do
                _Lun_id_=$(run_remote_cmd "${_serv_hostname_}" "source ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib;iniget ${_lun_id_} -f ${ENIQ_CONF_DIR}/${SYM_INI} -v Lun_ID" | $TR -d '\r')
                if [ ! "${_Lun_id_}" ]; then
                    _err_msg_="Could not read ${_Lun_id_}:LUN_ID param from ${SYM_INI}"
                    abort_script "$_err_msg_" 
                fi
                if [ "${_Lun_id_}" == "local" ]; then
                    continue
                fi
                $ECHO "${_Lun_id_}" >> "${TEM_DIR}"/disk_tmp_lun_id_dwh_reader_2
            done
        fi
    done
fi

if [ "${SAN_DEVICE}" == "unity" ] || [ "${SAN_DEVICE}" == "unityXT" ]; then
    unitofMainDB_size=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v SizeofMainDB | $GREP -o '[[:alpha:]]*')
    if [ "$unitofMainDB_size" == "T" ]; then
        Unity_MainDB=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v SizeofMainDB | $TR -d "T")
        if [ -z "$Unity_MainDB" ]; then
            _err_msg_="Could not fetch the size of MainDB LUN in ${DB_CONF} file"
            abort_script "$_err_msg_"
        fi
        unity_maindb_size=$($ECHO "${Unity_MainDB} * 1099511627776" | $BC | $AWK -F\. '{print $1}')
    elif [ "$unitofMainDB_size" == "G" ]; then
        Unity_MainDB=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v SizeofMainDB | $TR -d "G")
        if [ -z "$Unity_MainDB" ]; then
            _err_msg_="Could not fetch the size of MainDB LUN in ${DB_CONF} file"
            abort_script "$_err_msg_"
        fi
        unity_maindb_size=$($ECHO "${Unity_MainDB} * 1073741824" | $BC | $AWK -F\. '{print $1}')
    else
        _err_msg_="Could not fetch the size unit for MainDB LUN in ${DB_CONF} file"
        abort_script "$_err_msg_"
    fi
    unity_main_lun_size="${unity_maindb_size}"
    current_maindb_count=$($CAT "${TEM_DIR}"/disk_lun_id | $WC -l)
    #Taking only lun Id from the current tmpdb luns
    current_tmpdb_count=$($CAT "${TEM_DIR}"/disk_tmp_lun_id | $WC -l)
    if [[ -s ${TEM_DIR}/disk_tmp_lun_id_dwh_reader_1 && -s ${TEM_DIR}/disk_tmp_lun_id_dwh_reader_2 ]]; then
        current_tmpdb_count_rd1=$($CAT "${TEM_DIR}"/disk_tmp_lun_id_dwh_reader_1 | $WC -l)
        current_tmpdb_count_rd2=$($CAT "${TEM_DIR}"/disk_tmp_lun_id_dwh_reader_2 | $WC -l)
    fi
    if [ "${current_maindb_count}" -le "0" ]; then
        _err_msg_="Present Count of MainDB's not as per minimum standard config for ${SAN_DEVICE} storage Type"
        abort_script "$_err_msg_" 
    else
        if [ "${CURR_SERVER_TYPE}" == "eniq_stats" ] || [ "${CURR_SERVER_TYPE}" == "stats_coordinator" ]; then
            #Taking luns ID details from SAN for standalone or CO
            $UEMCLI -d "${SPA_IP}" /remote/host show -filter "ID,Name,Accessible LUNs" | grep -C 1 "${HNAME}" | grep "Accessible"| cut -d '=' -f2 > "${TEM_DIR}"/san_details.txt
            _list_lun_co_exe_status_=$?
            if [ $_list_lun_co_exe_status_ -ne 0 ]; then
                _err_msg_="Could not fetched the list of LUNs and details  from the SAN"
                abort_script "$_err_msg_"
            fi
            if [ "${server_count}" == "4" ]; then
                #if deployment is multiblade or multirack then taking luns ID details from SAN for rd1/rd2
                for _line_ in $($CAT "${_deployed_servers_}" | $EGREP -v 'stats_coordinator|stats_engine'); do
                    local _serv_hostname_ _serv_type_ _count_
                    _count_=`$ECHO ${_line_} | $GREP -o "::" | $WC -l`
                    if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
                            _serv_hostname_=$($ECHO "${_line_}" | $AWK -F"::" '{print $3}')
                            _serv_type_=$($ECHO "${_line_}" | $AWK -F"::" '{print $4}')
                    else
                            _serv_hostname_=$($ECHO "${_line_}" | $AWK -F"::" '{print $2}')
                            _serv_type_=$($ECHO "${_line_}" | $AWK -F"::" '{print $3}')
                    fi
                    if [ "${_serv_type_}" == "dwh_reader_1" ]; then
                        $UEMCLI -d "${SPA_IP}" /remote/host show -filter "ID,Name,Accessible LUNs" | grep -C 1 "${_serv_hostname_}" | grep "Accessible"| $CUT -d '=' -f2 > "${TEM_DIR}"/san_details_RD1
                        _list_lun_rd1_exe_status_=$?
                        if [ $_list_lun_rd1_exe_status_ -ne 0 ]; then
                            _err_msg_="Could not fetched the list of LUNs and details from the SAN"
                            abort_script "$_err_msg_"
                        fi
                    elif [ "${_serv_type_}" == "dwh_reader_2" ]; then
                        $UEMCLI -d "${SPA_IP}" /remote/host show -filter "ID,Name,Accessible LUNs" | grep -C 1 "${_serv_hostname_}" | grep "Accessible" | $CUT -d '=' -f2 > "${TEM_DIR}"/san_details_RD2
                        _list_lun_rd2_exe_status_=$?
                        if [ $_list_lun_rd2_exe_status_ -ne 0 ]; then
                            _err_msg_="Could not fetched the list of LUNs and details from the SAN"
                            abort_script "$_err_msg_"
                        fi
                    fi
                done
            fi
        fi
        for _line_ in $($CAT "${TEM_DIR}"/disk_lun_id); do
            #grepping for maindb list from current symlink file into san details file
            $CAT "${TEM_DIR}"/san_details.txt | $GREP -w "${_line_}" >> /dev/null 2>&1
            _grep_lun_exe_status_=$?
            if [ $_grep_lun_exe_status_ -ne 0 ]; then
                _err_msg_="Could not find LUN ID:${_line_} from the SAN attached LUNs"
                abort_script "$_err_msg_"
            fi
            #For each matched maindb lun checking size from san
            current_maindb_size=`$UEMCLI -d "${SPA_IP}" /stor/prov/luns/lun -id "${_line_}" show -detail | grep "Size" | $CUT -d '=' -f2 | $AWK -F " " '{print $1}'`
            #checking size of maindb lun is as per standard vnx maindb lun size 
            $AWK 'BEGIN{if ('$current_maindb_size'>='$unity_main_lun_size') exit 1}'
            _lun_match_size_exe_status_=$?
            if [ $_lun_match_size_exe_status_ -eq 0 ]; then
                _err_msg_="Present Size of MainDB's with LUN ID:${_line_} is not as per minimum standard config for ${SAN_DEVICE} storage"
                abort_script "$_err_msg_" 
            fi
        done
        log_msg -s -q "\nMainDB LUNs size matching with the standard config for ${SAN_DEVICE} storage" -l "${LOGFILE}"
        if [[ -s ${TEM_DIR}/san_details_RD1 && -s ${TEM_DIR}/san_details_RD2 ]]; then
            #checking if maindb lun from CO present in rd1 and rd2 list from san
            for _line_ in $($CAT "${TEM_DIR}"/disk_lun_id); do
                $CAT "${TEM_DIR}"/san_details_RD1 | $GREP -w "${_line_}" >> /dev/null 2>&1
                _grep_lun_rd1_exe_status_=$?
                if [ $_grep_lun_rd1_exe_status_ -ne 0 ]; then
                    _err_msg_="Could not find LUN ID:${_line_} from the Reader-1 SAN attached LUNs"
                    abort_script "$_err_msg_"
                fi
                $CAT "${TEM_DIR}"/san_details_RD2 | $GREP -w "${_line_}" >> /dev/null 2>&1
                _grep_lun_rd2_exe_status_=$?
                if [ $_grep_lun_rd2_exe_status_ -ne 0 ]; then
                    _err_msg_="Could not find LUN ID:${_line_} from the Reader-2 SAN attached LUNs"
                    abort_script "$_err_msg_"
                fi
            done
        log_msg -s -q "\nSame Size MainDB LUNs found attached to both Reader's" -l "${LOGFILE}"
        fi
        if [ "${current_maindb_count}" -eq "8" ] && [ "${current_tmpdb_count}" -eq "5" ]; then
            current_config="C"
        fi
        if [ "${server_count}" == "4" ]; then
            if [ "${current_maindb_count}" -eq "13" ] && [ "${current_tmpdb_count}" -eq "1" ] && [ "${current_tmpdb_count_rd1}" -eq "3" ] && [ "${current_tmpdb_count_rd2}" -eq "2" ]; then
                current_config="D"
            elif [ "${current_maindb_count}" -eq "21" ] && [ "${current_tmpdb_count}" -eq "1" ] && [ "${current_tmpdb_count_rd1}" -eq "4" ] && [ "${current_tmpdb_count_rd2}" -eq "2" ]; then
                current_config="E"
            elif [ "${current_maindb_count}" -eq "33" ] && [ "${current_tmpdb_count}" -eq "1" ] && [ "${current_tmpdb_count_rd1}" -eq "6" ] && [ "${current_tmpdb_count_rd2}" -eq "2" ]; then
                current_config="F"
            elif [ "${current_maindb_count}" -eq "50" ] && [ "${current_tmpdb_count}" -eq "1" ]; then
                if [ "${SAN_DEVICE}" == "unity" ] && [ "${current_tmpdb_count_rd1}" -eq "8" ] && [ "${current_tmpdb_count_rd2}" -eq "3" ]; then
                    current_config="G"
                fi
                if [ "${SAN_DEVICE}" == "unityXT" ] && [ "${current_tmpdb_count_rd1}" -eq "11" ] && [ "${current_tmpdb_count_rd2}" -eq "4" ]; then
                    current_config="G"
                fi
            fi
        fi

        if [ -z "${current_config}" ]; then
            _err_msg_="Existing Configuration is not an standard for ${SAN_DEVICE} storage type"
            abort_script "$_err_msg_"
        else
            log_msg -s "\nCurrent configuration type is Config-${current_config}" -l "${LOGFILE}"
        fi
    fi
fi
}


### Function: get_server_type ###
#
#   Check the server type from present configuration files
#
# Arguments:
#       none
# Return Values:
#       none
get_server_type()
{
if [ -s "${CLI_CONF_DIR}/server_types" ]; then
    server_count=$($CAT "${CLI_CONF_DIR}"/server_types | $WC -l)
else
    server_count=$($CAT "${_deployed_servers_}" | $WC -l)
fi

if [ "${server_count}" == "4" ]; then 
    if [ "${SAN_DEVICE}" == "vnx" ] || [ "${SAN_DEVICE}" == "unity" ]; then
        server_type="MB"
        disp_server_type="Multi-Blade"
    elif [ "${SAN_DEVICE}" == "unityXT" ]; then
        server_type=MR
        disp_server_type="Multi-Rack"
    fi
elif [ "${server_count}" == "1" ]; then 
    if [ "${STORAGE_TYPE}" == "raw" ]; then
        server_type="SB"
        disp_server_type="Single Blade"
    else
        server_type="SR"
        disp_server_type="Simplex Rack"
    fi
else
    _err_msg_="Invalid ENIQ deployment"
    abort_script "$_err_msg_"
fi
if [ -s "${ENIQ_CONF_DIR}/extra_params/deployment" ]; then
    DEPLOYMENT=$($CAT "${ENIQ_CONF_DIR}"/extra_params/deployment)
fi
}



### Function: match_target_maindb_lun_count ###
#
#   Compare if current and new lun count matches with target Configuration type lun count
#
# Arguments:
# Return Values:
#   none
match_target_maindb_lun_count()
{

$RM -rf "${TEM_DIR}"/_new_maindb_ >> /dev/null 2>&1
#Compare the Main DB count of present and new with target configuration. 
target_maindb_count=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v NoofMainDB)
$ECHO "${_new_maindb_}" | $TR ',' '\n' > "${TEM_DIR}"/_new_maindb_
new_maindb_count=$($CAT "${TEM_DIR}"/_new_maindb_ | $WC -l)
total_maindb_count=$((current_maindb_count+new_maindb_count))
if [ "${total_maindb_count}" == "${target_maindb_count}" ]; then
    log_msg -s -q "\n\nTotal number of MainDB LUNs match with Target Expansion type ${_supported_config_}" -l "${LOGFILE}" 
elif [ "${total_maindb_count}" != "${target_maindb_count}" ]; then
    _err_msg_="\n\nTotal number of MainDB LUNs do not match with Target Config ${_supported_config_} type configuration" 
     abort_script "$_err_msg_"
fi
$ECHO "----------------------------------------" > "${CLI_CONF_DIR}"/expansion_info_file
$ECHO "\n target_maindb_count=${target_maindb_count}" >> "${CLI_CONF_DIR}"/expansion_info_file
$ECHO "\n total_maindb_count=${total_maindb_count}" >> "${CLI_CONF_DIR}"/expansion_info_file
}

### Function: match_target_tempdb2_lun_count ###
#
#   Compare if current and new lun count matches with target Configuration type lun count
#
# Arguments:
# Return Values:
#   none
match_target_tempdb2_lun_count()
{
#Compare the Temp DB count of present and new with target configuration for Multi Blade or Multi rack.
target_tmpdb_count_RD1=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v NoofTempDB_RD1)
target_tmpdb_count_RD2=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v NoofTempDB_RD2)
$RM -rf "${TEM_DIR}"/_new_tempdb_rd2_ >> /dev/null 2>&1
$RM -rf "${TEM_DIR}"/_new_tempdb_rd1_ >> /dev/null 2>&1

#Compare the Temp DB count of present and new with target configuration for Multi Blade or Multi rack.
if [ "${server_count}" == "4" ]; then
    if [ -n "$_new_tempdb_rd1_" ]; then
        $ECHO "${_new_tempdb_rd1_}" | $TR ',' '\n' > "${TEM_DIR}"/_new_tempdb_rd1_
        new_tmpdb_count_rd1=$($CAT "${TEM_DIR}"/_new_tempdb_rd1_ | $WC -l)
        total_tmpdb_count_rd1=$((current_tmpdb_count_rd1+new_tmpdb_count_rd1))
        if [ "${total_tmpdb_count_rd1}" == "${target_tmpdb_count_RD1}" ]; then
            log_msg -s -q "\n\nTotal number of TempDB LUNs, match with Target Expansion type ${_supported_config_} Configuration for Reader-1" -l "${LOGFILE}" 
        elif [ "${total_tmpdb_count_rd1}" != "${target_tmpdb_count_RD1}" ]; then
            _err_msg_="\n\nTotal number of TempDB LUNs do not match with Target Config ${_supported_config_} type configuration for Reader-1"
            abort_script "$_err_msg_"
        fi
    else
        total_tmpdb_count_rd1="${current_tmpdb_count_rd1}"
        if [ "${total_tmpdb_count_rd1}" == "${target_tmpdb_count_RD1}" ]; then
            log_msg -s -q "\n\nTotal number of TempDB LUNs, match with Target Expansion type ${_supported_config_} Configuration for Reader-1" -l "${LOGFILE}" 
        elif [ "${total_tmpdb_count_rd1}" != "${target_tmpdb_count_RD1}" ]; then
            _err_msg_="\n\nTotal number of TempDB LUNs do not match with Target Config ${_supported_config_} type configuration for Reader-1"
            abort_script "$_err_msg_"
        fi
    fi
fi
$ECHO "----------------------------------------" >> "${CLI_CONF_DIR}"/expansion_info_file
$ECHO "\n target_tmpdb_count_RD1=${target_tmpdb_count_RD1}" >> "${CLI_CONF_DIR}"/expansion_info_file
$ECHO "\n total_tmpdb_count_rd1=${total_tmpdb_count_rd1}" >> "${CLI_CONF_DIR}"/expansion_info_file

if [ "${server_count}" == "4" ]; then
    if [ -n "$_new_tempdb_rd2_" ]; then
        $ECHO "${_new_tempdb_rd2_}" | $TR ',' '\n' > "${TEM_DIR}"/_new_tempdb_rd2_
        new_tmpdb_count_rd2=$($CAT "${TEM_DIR}"/_new_tempdb_rd2_ | $WC -l)
        total_tmpdb_count_rd2=$((current_tmpdb_count_rd2+new_tmpdb_count_rd2))
        if [ "${total_tmpdb_count_rd2}" == "${target_tmpdb_count_RD2}" ]; then
            log_msg -s -q "\n\nTotal number of TempDB LUNs match with Target Expansion type ${_supported_config_} Configuration for Reader-2" -l "${LOGFILE}" 
        elif [ "${total_tmpdb_count_rd2}" != "${target_tmpdb_count_RD2}" ]; then
            _err_msg_="\n\nTotal number of TempDB LUNs do not match with Target Config ${_supported_config_} type configuration for Reader-2"
            abort_script "$_err_msg_"
        fi
    else
        total_tmpdb_count_rd2="${current_tmpdb_count_rd2}"
        if [ "${total_tmpdb_count_rd2}" == "${target_tmpdb_count_RD2}" ]; then
            log_msg -s -q "\n\nTotal number of TempDB LUNs match with Target Expansion type ${_supported_config_} Configuration for Reader-2" -l "${LOGFILE}" 
        elif [ "${total_tmpdb_count_rd2}" != "${target_tmpdb_count_RD2}" ]; then
            _err_msg_="\n\nTotal number of TempDB LUNs do not match with Target Config ${_supported_config_} type configuration for Reader-2"
            abort_script "$_err_msg_"
        fi
    fi
fi
$ECHO "----------------------------------------" >> "${CLI_CONF_DIR}"/expansion_info_file
$ECHO "\n target_tmpdb_count_RD2=${target_tmpdb_count_RD2}" >> "${CLI_CONF_DIR}"/expansion_info_file
$ECHO "\n total_tmpdb_count_rd2=${total_tmpdb_count_rd2}" >> "${CLI_CONF_DIR}"/expansion_info_file
}


### Function: luns_available_for_automation ###
#
#   Disaply the unallowcated luns and segregate the luns
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
luns_available_for_automation(){

    #Get all available lun details
    ${BLKCLI} | $AWK -F ";" '{print $2}' > "${VAR_TMP_DIR}"/Available_luns.txt
    if [ ! -s "${VAR_TMP_DIR}/Available_luns.txt" ]; then
        _err_msg_="Unable to list lun on Coordinator server"
        abort_script "$_err_msg_"
    fi
    #Get all available used lun details
    iniget DB_DISK_ALLOC -f "${ENIQ_INST_DIR}"/config/sym_links.ini -v MAINDB_DISKS |  $TR ' ' '\n' >> "${VAR_TMP_DIR}"/Allocated_luns.txt
    if [ ! -s "${VAR_TMP_DIR}/Allocated_luns.txt" ]; then
        _err_msg_="Unable to list allocated Maindb's on Coordinator server"
        abort_script "$_err_msg_"
    fi
    
    iniget DB_DISK_ALLOC -f "${ENIQ_INST_DIR}"/config/sym_links.ini -v TEMPDB_DISKS |  $TR ' ' '\n' >> "${VAR_TMP_DIR}"/Allocated_luns.txt
    _temp_lun_exe_status_=$?
    if [ $_temp_lun_exe_status_ -ne 0 ]; then
        _err_msg_="Unable to list allocated Tempdb's on Coordinator server"
        abort_script "$_err_msg_"
    fi
    
    iniget DB_DISK_ALLOC -f "${ENIQ_INST_DIR}"/config/sym_links.ini -v IQ_SYS_MAIN_DISKS |  $TR ' ' '\n' >> "${VAR_TMP_DIR}"/Allocated_luns.txt
    _sys_lun_exe_status_=$?
    if [ $_sys_lun_exe_status_ -ne 0 ]; then
        _err_msg_="Unable to list allocated Sysmaindb's on Coordinator server"
        abort_script "$_err_msg_"
    fi
    
    iniget SunOS_FS_POOL_1 -f "${ENIQ_INST_DIR}"/config/SunOS.ini -v disk_layout |  $TR ' ' '\n' >> "${VAR_TMP_DIR}"/Allocated_luns.txt
    _ext_lun_exe_status_=$?
    if [ $_ext_lun_exe_status_ -ne 0 ]; then
        _err_msg_="Unable to list EXT4 lun on Coordinator server"
        abort_script "$_err_msg_"
    fi
    #Get compare between available and allocated 
    $GREP -Fxvf "${VAR_TMP_DIR}"/Allocated_luns.txt "${VAR_TMP_DIR}"/Available_luns.txt > "${VAR_TMP_DIR}"/UnAllocated_luns_mpath.txt
    if [ ! -s "${VAR_TMP_DIR}/UnAllocated_luns_mpath.txt" ]; then
        _err_msg_="Could not find Unallocated LUNs for Expansion on Coordinator server"
        abort_script "$_err_msg_"
    else
        for line in $($CAT "${VAR_TMP_DIR}"/UnAllocated_luns_mpath.txt); do
           ${BLKCLI} | $GREP -w "$line" | $AWK -F ";" '{print $1}' >> "${VAR_TMP_DIR}"/lun_id.txt
        done

        if [ -s "${VAR_TMP_DIR}"/lun_id.txt ]; then
             for lun_id in $($CAT "${VAR_TMP_DIR}"/lun_id.txt); do
                 current_maindb_size=`$UEMCLI -d "${SPA_IP}" /stor/prov/luns/lun -id "${lun_id}" show -detail | $GREP "Size" | $CUT -d '=' -f2 | $AWK -F " " '{print $1}'`
                 if [ -z "$current_maindb_size" ]; then
                     _err_msg_="Not able to fetch Maindb lun size"
                     abort_script "$_err_msg_"
                 fi
                 $ECHO "${lun_id}" "${current_maindb_size}" >> "${VAR_TMP_DIR}"/lun_size.txt
             done
        else
             _err_msg_="Could not locate the ${VAR_TMP_DIR}/lun_id.txt file"
             abort_script "$_err_msg_"
        fi
        unitofMainDB=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v SizeofMainDB | $GREP -o '[[:alpha:]]*')
        if [ "$unitofMainDB" == "T" ]; then
            SizeofMainDB=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v SizeofMainDB | $TR -d "T")
            if [ -z "$SizeofMainDB" ]; then
                _err_msg_="Could not fetch the size of MainDB LUN in ${DB_CONF} file"
                abort_script "$_err_msg_"
            fi
            maindb_size=$($ECHO "${SizeofMainDB} * 1099511627776" | $BC | $AWK -F\. '{print $1}')
        elif [ "$unitofMainDB" == "G" ]; then
            SizeofMainDB=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v SizeofMainDB | $TR -d "G")
            if [ -z "$SizeofMainDB" ]; then
                _err_msg_="Could not fetch the size of MainDB LUN in ${DB_CONF} file"
                abort_script "$_err_msg_"
            fi
            maindb_size=$($ECHO "${SizeofMainDB} * 1073741824" | $BC | $AWK -F\. '{print $1}')
        else
            _err_msg_="Could not fetch the size unit for MainDB LUN in ${DB_CONF} file"
            abort_script "$_err_msg_"
        fi
        SizeofTempDB=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v SizeofTempDB | $TR -d "G")
        if [ -z "$SizeofTempDB" ]; then
            _err_msg_="Could not fetch the size of TempDB LUN in ${DB_CONF} file"
            abort_script "$_err_msg_"
        fi
        tempdb_size=$($ECHO "${SizeofTempDB} * 1073741824" | $BC | $AWK -F\. '{print $1}')

        SizeofSysmainDB=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v SizeofSysmainDB | $TR -d "G")
        if [ -z "$SizeofSysmainDB" ]; then
            _err_msg_="Could not fetch the size of SysMainDB LUN in ${DB_CONF} file"
            abort_script "$_err_msg_"
        fi
        sysmain_size=$($ECHO "${SizeofSysmainDB} * 1073741824" | $BC | $AWK -F\. '{print $1}')

        if [ -s "${VAR_TMP_DIR}"/lun_size.txt ]; then
            while read line; do
                check_lun=$($ECHO "$line" | $AWK -F " " '{print $1}')
                check_lun_size=$($ECHO "$line" | $AWK -F " " '{print $2}')
                if [ -z "$check_lun" ] || [ -z "$check_lun_size" ]; then
                    _err_msg_="Not able to fetch lun id or lun size"
                    abort_script "$_err_msg_"
                fi
                if [[ "$check_lun_size" -ge "${maindb_size}" ]]; then
                    $ECHO  "$check_lun" >> "${VAR_TMP_DIR}"/maindb_UnAllocated.txt
                elif [[ "$check_lun_size" -eq "${tempdb_size}" ]]; then
                    $ECHO "$check_lun" >> "${VAR_TMP_DIR}"/tmpdb_UnAllocated.txt
                elif [[ "$check_lun_size" -eq "${sysmain_size}" ]]; then
                    $ECHO "$check_lun" >> "${VAR_TMP_DIR}"/sys_maindb_UnAllocated.txt
                else
                    log_msg -s -q "$check_lun lun size is not a proper size" -l "${LOGFILE}"
                fi
            done < "${VAR_TMP_DIR}"/lun_size.txt
        else
            _err_msg_="Could not find the ${VAR_TMP_DIR}/lun_size.txt file"
            abort_script "$_err_msg_"
        fi

        if [ ! -s "${VAR_TMP_DIR}"/maindb_UnAllocated.txt ];  then
                    _err_msg_="Could not find the unallocated MainDBs on the server"
                    abort_script "$_err_msg_"
        fi
        
        if [ "${SAN_DEVICE}" == "unity" ]; then
            #checking the current config
            if [ "${current_config}" == "D" ] || [ "${current_config}" == "E" ]; then
                #checking Target configig
                if [ "${_target_conf_}" == "F" ] || [ "${_target_conf_}" == "G" ]; then
                    #checking the unallocated sys_maindb's are available on the server
                    if [ ! -s "${VAR_TMP_DIR}"/sys_maindb_UnAllocated.txt ];  then
                        _err_msg_="Could not find the unallocated SysMainDB on the server"
                        abort_script "$_err_msg_"
                    fi
                fi
            fi
        fi
        srvr_type=$($CAT "${ENIQ_INST_DIR}"/config/installed_server_type)
        if [ "${srvr_type}" == "stats_coordinator" ]; then
        
            for _line_ in $($CAT "${_deployed_servers_}" | $EGREP -v 'stats_coordinator|stats_engine'); do
                    local _count_
                    _count_=`$ECHO ${_line_} | $GREP -o "::" | $WC -l`
                    if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
                        _ip_address_=$($ECHO "${_line_}" | $GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}')
                        _serv_hostname_=$($ECHO "${_line_}" | $AWK -F"::" '{print $3}')
                        _serv_type_=$($ECHO "${_line_}" | $AWK -F"::" '{print $4}')
                    else
                        _ip_address_=$($ECHO "${_line_}" | $AWK -F"::" '{print $1}')
                        _serv_hostname_=$($ECHO "${_line_}" | $AWK -F"::" '{print $2}')
                        _serv_type_=$($ECHO "${_line_}" | $AWK -F"::" '{print $3}')
                    fi
                if [ -z "$_ip_address_" ] || [ -z "$_serv_hostname_" ] || [ -z "$_serv_type_" ]; then
                        _err_msg_="Not able to fetch Server host details"
                        abort_script "$_err_msg_"
                fi
                if [ "${_serv_type_}" == "dwh_reader_1" ]; then
                    #checking the indivual reader 1 tempdb lun are as per the count and size
                    `run_remote_cmd "${_serv_hostname_}" "${BLKCLI}" | $AWK -F ";" '{print $2}' > "${VAR_TMP_DIR}"/Available_luns_RD1.txt`
                    _get_rd1_lun_exe_status_=$?
                    if [ $_get_rd1_lun_exe_status_ -ne 0 ]; then
                        _err_msg_="Unable to list LUNs on Reader-1 server"
                        abort_script "$_err_msg_"
                    fi
                    `run_remote_cmd "${_serv_hostname_}" ". /eniq/installation/core_install/lib/common_functions.lib; iniget DB_DISK_ALLOC -f ${ENIQ_INST_DIR}/config/sym_links.ini -v TEMPDB_DISKS" "${LOGFILE}" root disable_tty | sed 's/ /\n/g' > "${VAR_TMP_DIR}"/Allocated_luns_mpath_RD1.txt`
                    _get_rd1_temp_lun_exe_status_=$?
                    if [ $_get_rd1_temp_lun_exe_status_ -ne 0 ]; then
                        _err_msg_="Unable to list allocated tempdb LUNs on Reader-1 server"
                        abort_script "$_err_msg_"
                    fi
                    `run_remote_cmd "${_serv_hostname_}" "${BLKCLI}" | $AWK -F ";" '{print $1}' > "${VAR_TMP_DIR}"/Available_Rd1_lun_id.txt`
                    _get_rd1_id_lun_exe_status_=$?
                    if [ $_get_rd1_id_lun_exe_status_ -ne 0 ]; then
                        _err_msg_="Unable to list available LUNs id's on Reader-1 server"
                        abort_script "$_err_msg_"
                    fi
                    `$GREP -Fxvf "${VAR_TMP_DIR}"/Allocated_luns_mpath_RD1.txt "${VAR_TMP_DIR}"/Available_luns_RD1.txt > "${VAR_TMP_DIR}"/UnAllocated_luns_mpath_RD1.txt`
                    _get_rd1_diff_lun_exe_status_=$?
                    if [ $_get_rd1_diff_lun_exe_status_ -ne 0 ]; then
                       _err_msg_="Could not find Unallocated Luns on Reader-1 server"
                       abort_script "$_err_msg_"
                    else
                        for line in $($CAT "${VAR_TMP_DIR}"/UnAllocated_luns_mpath_RD1.txt); do
                            `run_remote_cmd "${_serv_hostname_}" "${BLKCLI}" | $GREP -w "$line"  | $AWK -F ";" '{print $1}' >> "${VAR_TMP_DIR}"/alllun_id_RD1.txt`
                        done
        
                        if [ -s "${VAR_TMP_DIR}"/alllun_id_RD1.txt ]; then
                            for lun_id in $($CAT "${VAR_TMP_DIR}"/alllun_id_RD1.txt); do
                                current_tmpdb_size=$($UEMCLI -d "${SPA_IP}" /stor/prov/luns/lun -id "${lun_id}" show -detail | $GREP "Size" | $CUT -d '=' -f2 | $AWK -F " " '{print $1}')
                                if [ -z "$current_tmpdb_size" ]; then
                                    _err_msg_="Not able to fetch Tempdb size"
                                    abort_script "$_err_msg_"
                                fi
                                $ECHO "${lun_id}" "${current_tmpdb_size}" >> "${VAR_TMP_DIR}"/tmplun_size_RD1.txt
                            done
                        else
                            _err_msg_="Could not find the ${VAR_TMP_DIR}/alllun_id_RD1.txt file"
                            abort_script "$_err_msg_"
                        fi
                        
                        if [ -s "${VAR_TMP_DIR}"/tmplun_size_RD1.txt ]; then
                            while read line; do
                                check_lun=$($ECHO "${line}" | $AWK -F " " '{print $1}')
                                check_lun_size=$($ECHO "${line}" | $AWK -F " " '{print $2}')
                                if [ -z "$check_lun" ] || [ -z "$check_lun_size" ]; then
                                    _err_msg_="Not able to fetch LUN ID and Size for TempDB Reader-1"
                                    abort_script "$_err_msg_"
                                fi
        
                                if [[ "${check_lun_size}" -eq "${tempdb_size}" ]]; then
                                    $ECHO "${check_lun}" >> "${VAR_TMP_DIR}"/tmpdb_UnAllocated_RD1.txt
                                fi
        
                            done < "${VAR_TMP_DIR}"/tmplun_size_RD1.txt
                        else
                                _err_msg_="Could not find the ${VAR_TMP_DIR}/tmplun_size_RD1.txt file"
                                abort_script "$_err_msg_"
                        fi
                     #checking unallocated temdb's are present or not
                        if [ ! -s "${VAR_TMP_DIR}"/tmpdb_UnAllocated_RD1.txt ]; then
                            _err_msg_="Could not find the unallocated TempDBs LUNs on Reader-1 server."
                            abort_script "$_err_msg_"
                        fi
                    fi
                elif [ "${_serv_type_}" == "dwh_reader_2" ]; then
                    #checking the indivual reader 1 tempdb lun are as per the count and size
                    `run_remote_cmd "${_serv_hostname_}" "${BLKCLI}" | $AWK -F ";" '{print $2}' > "${VAR_TMP_DIR}"/Available_luns_RD2.txt`
                    _get_rd2_lun_exe_status_=$?
                    if [ $_get_rd2_lun_exe_status_ -ne 0 ]; then
                        _err_msg_="Unable to list available LUNs on Reader-2 server"
                        abort_script "$_err_msg_"
                    fi
                    
                    `run_remote_cmd "${_serv_hostname_}" ". /eniq/installation/core_install/lib/common_functions.lib; iniget DB_DISK_ALLOC -f ${ENIQ_INST_DIR}/config/sym_links.ini -v TEMPDB_DISKS" "${LOGFILE}" root disable_tty | sed 's/ /\n/g' > "${VAR_TMP_DIR}"/Allocated_luns_mpath_RD2.txt`
                    _get_rd2_temp_lun_exe_status_=$?
                    if [ $_get_rd2_temp_lun_exe_status_ -ne 0 ]; then
                        _err_msg_="Unable to list available Tempdb LUNs on Reader-2 server"
                        abort_script "$_err_msg_"
                    fi
                    
                    `run_remote_cmd "${_serv_hostname_}" "${BLKCLI}" | $AWK -F ";" '{print $1}' > "${VAR_TMP_DIR}"/Available_Rd2_lun_id.txt`
                    _get_rd2_id_lun_exe_status_=$?
                    if [ $_get_rd2_id_lun_exe_status_ -ne 0 ]; then
                        _err_msg_="Unable to list available LUNs id's on Reader-2 server"
                        abort_script "$_err_msg_"
                    fi
                    
                    `$GREP -Fxvf "${VAR_TMP_DIR}"/Allocated_luns_mpath_RD2.txt "${VAR_TMP_DIR}"/Available_luns_RD2.txt > "${VAR_TMP_DIR}"/UnAllocated_luns_mpath_RD2.txt`
                    _get_rd2_diff_lun_exe_status_=$?
                    if [ $_get_rd2_diff_lun_exe_status_ -ne 0 ]; then
                       _err_msg_="Could not find Unallocated Luns on Reader-2 server"
                       abort_script "$_err_msg_"
                    else
                        for line in $($CAT "${VAR_TMP_DIR}"/UnAllocated_luns_mpath_RD2.txt); do
                            `run_remote_cmd "${_serv_hostname_}" "${BLKCLI}" | $GREP -w "$line" | $AWK -F ";" '{print $1}' >> "${VAR_TMP_DIR}"/alllun_id_RD2.txt`
                        done
        
                        if [ -s "${VAR_TMP_DIR}"/alllun_id_RD2.txt ]; then 
                            for lun_id in $($CAT "${VAR_TMP_DIR}"/alllun_id_RD2.txt); do
                                current_tmpdb_size=$($UEMCLI -d "${SPA_IP}" /stor/prov/luns/lun -id "${lun_id}" show -detail | $GREP "Size" | $CUT -d '=' -f2 | $AWK -F " " '{print $1}')
                                if [ -z "$current_tmpdb_size" ]; then
                                    _err_msg_="Not able to fetch current TempDB LUN size."
                                    abort_script "$_err_msg_"
                                fi
                                $ECHO "${lun_id}" "${current_tmpdb_size}" >> "${VAR_TMP_DIR}"/tmplun_size_RD2.txt
                            done
                        else
                            _err_msg_="Could not find the ${VAR_TMP_DIR}/alllun_id_RD2.txt file"
                            abort_script "$_err_msg_"
                        fi
        
                        if [ -s "${VAR_TMP_DIR}"/tmplun_size_RD2.txt ]; then
                            while read line; do
                                check_lun=$($ECHO "${line}" | $AWK -F " " '{print $1}')
                                check_lun_size=$($ECHO "${line}" | $AWK -F " " '{print $2}')
                                if [ -z "$check_lun" ] || [ -z "$check_lun_size" ]; then
                                    _err_msg_="Not able to fetch LUN ID and Size for TempDB Reader-2"
                                    abort_script "$_err_msg_"
                                fi
        
                                if [[ "${check_lun_size}" -eq "${tempdb_size}" ]]; then
                                    $ECHO "${check_lun}" >> "${VAR_TMP_DIR}"/tmpdb_UnAllocated_RD2.txt
                                fi
        
                            done < "${VAR_TMP_DIR}"/tmplun_size_RD2.txt
                        else
                                _err_msg_="Could not find the ${VAR_TMP_DIR}/tmplun_size_RD2.txt file"
                                   abort_script "$_err_msg_"
                        fi
                        if [ "${SAN_DEVICE}" == "unity" ]; then
                          #checking the current config
                            if [ "${current_config}" == "D" ] || [ "${current_config}" == "E" ] || [ "${current_config}" == "F" ]; then
                                #checking Target configig
                                if [ "${_target_conf_}" == "G" ]; then
                                    #checking the unallocated sys_maindb's are available on the server
                                    if [ ! -s "${VAR_TMP_DIR}"/tmpdb_UnAllocated_RD2.txt ];  then
                                        _err_msg_="Could not find the unallocated TempDBs LUNs on Reader-2 server."
                                        abort_script "$_err_msg_"
                                    fi
                                fi
                            fi 
                        fi

                        if [ "${SAN_DEVICE}" == "unityXT" ]; then
                          #checking the current config
                            if [ "${current_config}" == "E" ] || [ "${current_config}" == "F" ]; then
                                #checking Target configig
                                if [ "${_target_conf_}" == "G" ]; then
                                    #checking the unallocated sys_maindb's are available on the server
                                    if [ ! -s "${VAR_TMP_DIR}"/tmpdb_UnAllocated_RD2.txt ];  then
                                        _err_msg_="Could not find the unallocated TempDBs LUNs on Reader-2 server."
                                        abort_script "$_err_msg_"
                                    fi
                                fi
                            fi 
                        fi
                    fi
                fi
            done
        
            if [[ -s ${VAR_TMP_DIR}/Available_Rd1_lun_id.txt && -s ${VAR_TMP_DIR}/Available_Rd2_lun_id.txt ]]; then
                #checking if maindb lun from CO present in rd1 and rd2 list from san
                for i in $($CAT "${VAR_TMP_DIR}"/maindb_UnAllocated.txt); do
                    $CAT "${VAR_TMP_DIR}"/Available_Rd1_lun_id.txt | $GREP -w "${i}" >> /dev/null 2>&1
                    _chk_mb_lun_rd1_exe_status_=$?
                    if [ $_chk_mb_lun_rd1_exe_status_ -eq 0 ]; then
                        log_msg -s -q "Same maindb lun ${i} found on Reader-1" -l "${LOGFILE}"
                    else
                        _err_msg_="Could not find LUN ID:${_line_} from the Reader-1 SAN attached LUNs"
                        abort_script "$_err_msg_"
                    fi
        
                    $CAT "${VAR_TMP_DIR}"/Available_Rd2_lun_id.txt | $GREP -w "${i}" >> /dev/null 2>&1
                    _chk_mb_lun_rd2_exe_status_=$?
                    if [ $_chk_mb_lun_rd2_exe_status_ -eq 0 ]; then
                        log_msg -s -q "Same maindb lun ${i} found on Reader2" -l "${LOGFILE}"
                    else
                        _err_msg_="Could not find LUN ID:${_line_} from the Reader-2 SAN attached LUNs"
                        abort_script "$_err_msg_"
                    fi
                    $ECHO "${i}" >> "${VAR_TMP_DIR}"/new_maindb_unallocated.txt
                done
            fi
            if [[ -s ${VAR_TMP_DIR}/new_maindb_unallocated.txt ]]; then
                log_msg -s -q "\nSame size MainDB LUNs found attched to both Readers" -l "${LOGFILE}"
                _new_maindb_=$(paste -sd, "${VAR_TMP_DIR}"/new_maindb_unallocated.txt)
            fi
            
            if [ -s  "${VAR_TMP_DIR}"/tmpdb_UnAllocated.txt ]; then 
                _new_tempdb_=$(paste -sd, "${VAR_TMP_DIR}"/tmpdb_UnAllocated.txt)
            fi
            
            if [ -s  "${VAR_TMP_DIR}"/sys_maindb_UnAllocated.txt ]; then
                _new_sysmaindb_=$(paste -sd, "${VAR_TMP_DIR}"/sys_maindb_UnAllocated.txt)
            fi
            
            if [ -s  "${VAR_TMP_DIR}"/tmpdb_UnAllocated_RD1.txt ]; then
                _new_tempdb_rd1_=$(paste -sd, "${VAR_TMP_DIR}"/tmpdb_UnAllocated_RD1.txt)
            fi
            
            if [ -s  "${VAR_TMP_DIR}"/tmpdb_UnAllocated_RD2.txt ]; then
                _new_tempdb_rd2_=$(paste -sd, "${VAR_TMP_DIR}"/tmpdb_UnAllocated_RD2.txt)
            fi
            
            ##Checking newly added maindb's are present or not
            if [ -n "${_new_maindb_}" ]; then
                match_target_maindb_lun_count
            fi
        
            ##Checking newly added tempdb's are present or not
            if [ -n "${_new_tempdb_rd1_}" ] || [ -n "${_new_tempdb_rd2_}" ]; then
                match_target_tempdb2_lun_count
            fi
        fi
    fi
}

### Function: lun_completion_check ###
#
#    check for successful mounting of luns
#
# Arguments:
#  none
# Return Values:
#
lun_completion_check()
{

maindb_status=`iniget status_maindb -f ${CLI_CONF_DIR}/expansion_disp_file -v maindb_status`
tmpdb_status=`iniget status_tempdb -f ${CLI_CONF_DIR}/expansion_disp_file -v tempdb_status`
sysmain_status=`iniget status_sysmaindb -f ${CLI_CONF_DIR}/expansion_disp_file -v sysmain_status`

if [[ "$get_server_type" != "MR" ]]; then
    if [[ $maindb_status && $tmpdb_status && $sysmain_status ]]; then
        $ECHO "db_exapansion_completion=1" >> ${CLI_CONF_DIR}/expansion_disp_file
        $ECHO "Database Expansion Completed Successfully." >> "${LOGFILE}"
    elif [[ ! $maindb_status && $tmpdb_status && $sysmain_status ]]; then
        $ECHO "db_exapansion_completion=0" >> ${CLI_CONF_DIR}/expansion_disp_file
        _err_msg_="Database Expansion Failure for MainDB Expansion"
        abort_script "${_err_msg_}"
    elif [[ ! $sysmain_status && $maindb_status && $tmpdb_status ]]; then
        $ECHO "db_exapansion_completion=0" >> ${CLI_CONF_DIR}/expansion_disp_file
        _err_msg_="Database Expansion Failure for SysMainDB Expansion"
        abort_script "${_err_msg_}"
    elif [[ ! $tmpdb_status && $maindb_status && $sysmain_status ]]; then
        $ECHO "db_exapansion_completion=0" >> ${CLI_CONF_DIR}/expansion_disp_file
        _err_msg_="Database Expansion Failure for TempDB Expansion"
        abort_script "${_err_msg_}"
    else
        $ECHO "db_exapansion_completion=0" >> ${CLI_CONF_DIR}/expansion_disp_file
        _err_msg_="Database Expansion Failure"
        abort_script "${_err_msg_}"
    fi
else
    if [[ $maindb_status && $tmpdb_status ]]; then
        $ECHO "db_exapansion_completion=1" >> ${CLI_CONF_DIR}/expansion_disp_file
        $ECHO "Database Expansion Completed Successfully." >> "${LOGFILE}"
    elif [[ ! $maindb_status && $tmpdb_status ]]; then
        $ECHO "db_exapansion_completion=0" >> ${CLI_CONF_DIR}/expansion_disp_file
        _err_msg_="Database Expansion Failure for MainDB Expansion"
        abort_script "${_err_msg_}"
    elif [[ ! $tmpdb_status && $maindb_status ]]; then
        $ECHO "db_exapansion_completion=0" >> ${CLI_CONF_DIR}/expansion_disp_file
        _err_msg_="Database Expansion Failure for TempDB Expansion"
        abort_script "${_err_msg_}"
    else
        $ECHO "db_exapansion_completion=0" >> ${CLI_CONF_DIR}/expansion_disp_file
        _err_msg_="Database Expansion Failure."
        abort_script "${_err_msg_}"
    fi
fi
touch /var/tmp/db_expansion_completed

}


### Function: get_user_inputs ###
#
#   Read server type from user
#
# Arguments:
#       none
# Return Values:
#       none
get_user_inputs()
{
log_msg -s -q "Getting Server Information" -l "${LOGFILE}"
#Removin tmp files
remove_tmp_file
#Get San details
while :; do
    
    if [ "${DEPLOYMENT}" != "ft" ]; then 
        log_msg -s "Current deployment configuration type check in progress.." -l "${LOGFILE}"
        get_current_configuration_type
    fi
     
    log_msg -s "\nSelected Target Configuration type is Config-${_supported_config_}" -l "${LOGFILE}"

    #Asking user input to disable OMBS Policies
    OMBS_Input=/var/tmp/input_file1.txt
    if [ -s $OMBS_Input ]; then
        _input_=$($CAT ${OMBS_Input} | $GREP -w "Disable_OMBS_Policy" | $AWK -F ":" '{print $3}')
        if [ -z "$_input_" ]; then
            _err_msg_="Could not read OMBS Policy Disable value from ${OMBS_Input}"
            abort_script "$_err_msg_" 
        else
            if [ "${_input_}" == "Y" ] || [ "${_input_}" == "N" ]; then
                OMBS_Policy=$($ECHO "$_input_")
            fi
        fi
    else
        _err_msg_="Could not read ${OMBS_Input} file"
        abort_script "$_err_msg_" 
    fi
    
    #get the list of luns for performing expansion
    log_msg -s "\nVerification of LUNs assignment for Config-${_supported_config_} in progress...." -l "${LOGFILE}"
    log_msg -s "Please wait, this could take a while....." -l "${LOGFILE}"
    luns_available_for_automation
    log_msg -s "\nVerification of LUNs assignment for Config-${_supported_config_} completed" -l "${LOGFILE}"
     _disp_file_=${CLI_CONF_DIR}/expansion_disp_file
     $RM -rf "${_disp_file_}" >> /dev/null 2>&1
     
    #Display user information
    $ECHO "------------------------------------------------------------------\n" > "${_disp_file_}" | $TEE -a "${LOGFILE}"
    $ECHO "ENIQ Server Type" " : ${disp_server_type}" >> "${_disp_file_}" | $TEE -a "${LOGFILE}"
    if [ "${server_type}" != "SR" ]; then
        $ECHO "SAN Device Type" " : ${SAN_DEVICE}" >> "${_disp_file_}"
        if [ "${DEPLOYMENT}" != "ft" ]; then 
            $ECHO "ENIQ Current Configuration Type" " : ${current_config}" >> "${_disp_file_}" | $TEE -a "${LOGFILE}"
            $ECHO "ENIQ Target Configuration Selected Type" " : ${_supported_config_}" >> "${_disp_file_}" | $TEE -a "${LOGFILE}"
            if [ -n "${_new_maindb_}" ]; then
                $ECHO "Available new MainDB LUN IDs for Co" " : ${_new_maindb_}" >> "${_disp_file_}" | $TEE -a "${LOGFILE}"
            fi
            if [ -n "${_new_sysmaindb_}" ]; then
                $ECHO "Available new Sysmaindb LUN IDs for Co" " : ${_new_sysmaindb_}" >> "${_disp_file_}" | $TEE -a "${LOGFILE}"
            fi
            if [ -n "${_new_tempdb_}" ]; then
                $ECHO "Available new TempDB LUN IDs for Co" " : ${_new_tempdb_}" >> "${_disp_file_}" | $TEE -a "${LOGFILE}"
            fi
            if [ -n "${_new_tempdb_rd1_}" ]; then
                $ECHO "Available new TempDB LUN IDs for Reader-1" " : ${_new_tempdb_rd1_}" >> "${_disp_file_}" | $TEE -a "${LOGFILE}"
            fi
            if [ -n "${_new_tempdb_rd2_}" ]; then
                $ECHO "Available new TempDB LUN IDs for Reader-2" " : ${_new_tempdb_rd2_}" >> "${_disp_file_}" | $TEE -a "${LOGFILE}"
            fi
            if [ -n "${OMBS_Policy}" ]; then
                $ECHO "Selected value to disable OMBS policies" " : ${OMBS_Policy}" >> "${_disp_file_}" | $TEE -a "${LOGFILE}"
            fi
        fi
    fi

    if [ -s "${_disp_file_}" ]; then
        log_msg -s  "\nSaving the ENIQ Configurartion details." -l "${LOGFILE}"
    else
        _err_msg_="Could not locate ${_disp_file_} file"
        abort_script "$_err_msg_" 
    fi
    break
 done
}

### Function: insert_header_footer ###
#
#   Insert a stage header/footer message
#
# Arguments:
#   $1 : head/foot
#   $2 : Message
#   $3 : Logfile
# Return Values:
#   none
insert_header_footer()
{
if [ $# -ne 3 ]; then
    _err_msg_="3 Parameters must be passed to header/footer function"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

if [ "$1" != "head" ] && [ "$1" != "foot" ]; then
    _err_msg_="Only Param of head/foot is allowed...exiting!"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi
_type_=$1

_msg_=$2

_logfile_=$3

_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`
if [ "$_type_" == "head" ]; then
    log_msg -s "\n----------------------------------------------------------------------------" -l "${LOGFILE}"
    log_msg -s "----------------------------------------------------------------------------" -l "${LOGFILE}"
    log_msg -s "$_time_ : $_msg_" -l "${LOGFILE}"
    log_msg -s "----------------------------------------------------------------------------" -l "${LOGFILE}"
fi

if [ "$_type_" == "foot" ]; then
    log_msg -s "\n----------------------------------------------------------------------------" -l "${LOGFILE}"
    log_msg -s "$_time_ : $_msg_" -l "${LOGFILE}"
    log_msg -s "----------------------------------------------------------------------------" -l "${LOGFILE}"
fi
}



### Function: set_next_stage ###
#
# Set up the stage to be run
#
# Arguments:
#   $1 : Stage to be set to. Either numeric value or 'cleanup'
# Return Values:
#   none
set_next_stage()
{
# Do I have to reset stage
if [ "${USER_STAGE}" -a "${NO_RESET_STAGE}" ]; then
    return 0
fi

_stage_time_=$($DATE '+%Y-%b-%d_%H.%M.%S')
$ECHO "# Setting new stage at $_stage_time_" > "${STAGEFILE}" | $TEE -a "${LOGFILE}"
$ECHO "${DB_EXP_STAGES[$1]}" > "${STAGEFILE}" | $TEE -a "${LOGFILE}"
stage_name=$($ECHO "${DB_EXP_STAGES[$1]}")
stage_num=$($GREP -n -F -w "$stage_name" /eniq/installation/core_install/etc/eniq_db_expansion_stagelist | $AWK -F ":" '{print $1}')
stage_num1=$(expr "${stage_num}" - 1)
if [ ! "$USER_STAGE" ]; then
    $ECHO "\nDatabase Expansion Stages Completed: ${stage_num1} of ${number_of_stages}" | $TEE -a "${LOGFILE}"
fi
}

### Function: get_array_element ###
#
# Get the current array element number
#
# Arguments:
#   none
# Return Values:
#   none
get_array_element()
{
_num_elements_=${#DB_EXP_STAGES[*]}
_array_length_=$(expr "${_num_elements_}" - 1)

for (( _elem_=0; _elem_<=${_array_length_}; _elem_++ )); do
    $ECHO "${DB_EXP_STAGES[${_elem_}]}" | $GREP -w "${NEXT_STAGE}" >> /dev/null 2>&1
    if [ $? -eq 0 ]; then
        ARRAY_ELEM=${_elem_}
        break
    fi
done
}

### Function: get_next_stage ###
#
# Get the stage to be run
#
# Arguments:
#   $1 : Stage to be set to. Either numeric value or 'done'
# Return Values:
#   none
get_next_stage()
{
ARRAY_ELEM=0
if [ -s "$STAGEFILE" ]; then
    NEXT_STAGE=$($CAT "$STAGEFILE" | $EGREP -v '^[[:blank:]]*#' | $SED -e 's| ||g')
    if [ ! "$NEXT_STAGE" ]; then
        _err_msg_="Failed to read stage from ${STAGEFILE}, exiting."
        abort_script "${_err_msg_}"
    fi

    if [ "$NEXT_STAGE" == "cleanup" ]; then
        return 0
    else
        $ECHO "${DB_EXP_STAGES[*]}" | $GREP -w "${NEXT_STAGE}" >> /dev/null 2>&1
        if [ $? -ne 0 ]; then
            _err_msg_="Specified stage ${NEXT_STAGE} is not a valid ENIQ DB Expansion stage"
            abort_script "${_err_msg_}"
        fi
    fi

    # Get the element number so we can move along the array
    get_array_element
else
    $MKDIR -p $($DIRNAME "$STAGEFILE")
    if [ $? -ne 0 ]; then
        _err_msg_="Failed to create directory $($DIRNAME "${STAGEFILE}"), exiting."
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
    fi
    
    NEXT_STAGE=${DB_EXP_STAGES[${ARRAY_ELEM}]}
fi
}

### Function: get_expansion_details ###
#
#   Check the current configuration type of the server from the attached luna dn size.
#
# Arguments:
#       none
# Return Values:
#       none
get_expansion_details()
{
insert_header_footer head "Entering DB Expansion stage - ${NEXT_STAGE} " "${LOGFILE}"

FILE=${CLI_CONF_DIR}/expansion_disp_file
$RM -rf "$FILE"
if [ "${DEPLOYMENT}" != "ft" ]; then 
    Input_file=/var/tmp/target_conf.txt
    if [ -s "$Input_file" ]; then
        _target_conf_=$($CAT $Input_file | $GREP -w 'E\|F\|G')
        _target_conf_exe_status_=$?
        if [ $_target_conf_exe_status_ -eq 0 ]; then
            _supported_config_=$_target_conf_

            #Executing get user input stage
            get_user_inputs
        else
            _err_msg_="Could not fetch the supported config type from $Input_file "
            abort_script "$_err_msg_"
        fi
    else
        _err_msg_="Could not fetch the supported config type from $Input_file "
        abort_script "$_err_msg_"
    fi
fi

insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}"
set_next_stage "$($EXPR "${ARRAY_ELEM}"+1)"
}


### Function: memory_expansion ###
#
#   Check the ram size and expan the re-allocated memory and reboot the servers.
#
# Arguments:
#       none
# Return Values:
#       none
memory_expansion()
{
insert_header_footer head "Entering ENIQ DB Expansion stage - ${NEXT_STAGE}" "${LOGFILE}"

if [ "${server_type}" == "MR" ]; then
    insert_header_footer foot "INFO: Skipping execution, as memory re-allocation not required for Multi-Rack Deployment." "${LOGFILE}" 
    set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
    return 0
fi

if [ "${current_config}" == "F" ] && [ "${_supported_config_}" == "G" ]; then
    insert_header_footer foot "INFO: Skipping Stage - ${NEXT_STAGE}. As memory re-allocation not required." "${LOGFILE}"
    set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
    return 0
fi

$RM -rf ${TEMP_DIR}/reader_server_ip
$RM -rf ${TEMP_DIR}/reader_server_host

if [ "${server_type}" == "MB" ] && [ "${SAN_DEVICE}" == "unity" ]; then
    if [ "${current_config}" == "D" ] || [ "${current_config}" == "E" ]; then
    
        if [ "${_supported_config_}" == "F" ] || [ "${_supported_config_}" == "G" ]; then
            if [ -s "${CLI_CONF_DIR}"/server_types ]; then
                for line in `$CAT ${CLI_CONF_DIR}/server_types | $GREP stats_iqr`; do
                    local _count_
                    _count_=`$ECHO ${line} |grep -o "::" | wc -l`
                    if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
                        reader_ip=$($ECHO ${line} | $GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}')
                        reader_host=$($ECHO ${line} | $AWK -F"::" '{print $3}')
                    else
                        reader_ip=$($ECHO ${line} | $AWK -F"::" '{print $1}')
                        reader_host=$($ECHO ${line} | $AWK -F"::" '{print $2}')
                    fi
                    $ECHO $reader_ip >> ${TEMP_DIR}/reader_server_ip
                    reader_server_ip=$( $CAT ${TEMP_DIR}/reader_server_ip)
                done
            else
                 for line in `$CAT "${_deployed_servers_}" | $GREP "dwh_reader"`; do
                    local _count_
                    _count_=`$ECHO ${line} |grep -o "::" | wc -l`
                    if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
                        reader_ip=$($ECHO ${line} | $GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}')
                        reader_host=$($ECHO ${line} | $AWK -F"::" '{print $3}')
                    else
                        reader_ip=$($ECHO ${line} | $AWK -F"::" '{print $1}')
                        reader_host=$($ECHO ${line} | $AWK -F"::" '{print $2}')
                    fi
                    $ECHO $reader_ip >> ${TEMP_DIR}/reader_server_ip
                    reader_server_ip=$( $CAT ${TEMP_DIR}/reader_server_ip)
                    $ECHO $reader_host >> ${TEMP_DIR}/reader_server_host
                    reader_server_host=$( ${TEMP_DIR}/reader_server_host)
                done
            fi
            
            if [[ -s ${reader_server_ip} ]]; then
                _err_msg_="Unable to get the reader servers ip."
                abort_script "${_err_msg_}"
            fi
            if [[ -s ${reader_server_host} ]]; then
                _err_msg_="Unable to get the reader servers hostname."
                abort_script "${_err_msg_}"
            fi
            
            for server_host in ${reader_server_host}; do
                local _count_
                _count_=`${CLI_CONF_DIR}/service_names | $GREP "${server_host}" | $GREP -o "::" | $WC -l`
                if [ "${_ip_type_}" == "IPv6" -a "${_count_}" == 3 ]; then
                    server_num=$($CAT "${CLI_CONF_DIR}"/service_names | $GREP "${server_host}" | $AWK -F"::" '{print $4}')
                else
                    server_num=$($CAT "${CLI_CONF_DIR}"/service_names | $GREP "${server_host}" | $AWK -F"::" '{print $3}')
                fi
                if [ -n "${server_num}" ]; then
                    _err_msg_="Could not get the server ip from ${CLI_CONF_DIR}/service_names"
                    abort_script "$_err_msg_"
                fi
                server_num_u=$($ECHO "$server_num" | $TR '[:lower:]' '[:upper:]')
                
                _generation_=$(dmidecode -s system-product-name | $AWK -F " " '{print $3}')
                if [ -n "${_generation_}" ]; then
                    _err_msg_="Could not determine the generation of ${server_num}"
                    abort_script "$_err_msg_"
                fi
                _req_memory_size_=$(iniget "${SAN_DEVICE}_Config${_supported_config_}_${server_type}" -f "${DB_CONF}" -v Memory_RD_"${_generation_}")
                if [ -n "${_req_memory_size_}" ]; then
                    _err_msg_="Could not get required RAM size for Config-${_supported_config_}"
                    abort_script "$_err_msg_"
                fi
                _memory_size_cmd_="free -g | $GREP -w Mem "
                _memory_size_=$(run_remote_cmd "${server_host}" "${_memory_size_cmd_}" | $AWK '{print $2}')
                if [ -n "${_memory_size_}" ]; then
                    _err_msg_="Could not get current allocated RAM for server ${server_host}"
                    abort_script "$_err_msg_"
                fi
                _req_memory_size_lower=$($EXPR "$_req_memory_size_" - 10)
                if [[ ("${_req_memory_size_lower}" -le "${_memory_size_}") && ("${_memory_size_}" -le "${_req_memory_size_}") ]]; then
                    
                    reader_command="$BASH ${ENIQ_CORE_INST_DIR}/bin/update_iq_mem_settings.bsh -p ${server_num_u} -d ${CLI_CONF_DIR} -r ${server_num} -N -l ${LOGFILE}" >> /dev/null 2>&1
                    
                    $ECHO "\n\nStarting to execute update_iq_mem_settings.bsh on ${server_host}\n" | $TEE -a "${LOGFILE}"
                    run_remote_cmd "${server_host}" "${reader_command}"
                    memory_cache_exe_check=$?
                    if [ $memory_cache_exe_check -ne 0 ]; then
                        log_msg -s -q -t  "\nReverting the files ${ENIQ_CONF_DIR}/niq.ini and ${CLI_CONF_DIR}/niq.ini " -l "${LOGFILE}"
                        run_remote_cmd "${server_host}" "$CP -rp ${ENIQ_CONF_DIR}/niq.ini_bkp ${ENIQ_CONF_DIR}/niq.ini"
                        run_remote_cmd "${server_host}" "$CP -rp ${ENIQ_CONF_DIR}/niq.ini_bkp ${CLI_CONF_DIR}/niq.ini"
                        _err_msg_="The execution of update_iq_mem_settings.bsh is not successful on ${server_num}\n\nCheck the logfile: ${LOGFILE} on ${server_num}"
                        abort_script "$_err_msg_"
                    fi
                
                    run_remote_cmd "${server_host}" "$CP -rp ${CLI_CONF_DIR}/niq.ini ${ENIQ_CONF_DIR}/niq.ini"
                    
                    $ECHO "The server ${server_host} had started reboot..... Please wait......" | $TEE -a "${LOGFILE}"
                    _trigger_reboot_=0
                    run_remote_cmd "${server_host}" "init 6" >/dev/null 2>&1
                    ((_trigger_reboot_="${_trigger_reboot_}" + 1 ))
                    $SLEEP 60
                    $PING -c 4 "${server_host}" >>/dev/null 2>&1
                    ping_cmd_exe_check=$?
                    if [ $ping_cmd_exe_check -eq 0 ]; then
                        $ECHO "Reboot was not initiated so re-intiating for ${server_ip}" | $TEE -a "${LOGFILE}"
                        run_remote_cmd "${server_host}" "init 6" >/dev/null 2>&1
                        ((_trigger_reboot_="${_trigger_reboot_}" + 1 ))
                        $SLEEP 30
                        $PING -c 4 "${server_host}" >>/dev/null 2>&1
                        ping_cmd_1_exe_check=$?
                        if [ $ping_cmd_1_exe_check -eq 0 ]; then
                            $ECHO "WARNING: Reboot was not initiated..... Reboot the ${server_host} server manually." | $TEE -a "${LOGFILE}"
                            ((_trigger_reboot_="${_trigger_reboot_}" + 1 ))
                            
                        fi
                    fi
                
        
                    _timeout_=0
                    while [ "${_timeout_}" -lt 20 ]; do
                        $PING -c 1 "${server_host}" >>/dev/null 2>&1
                        ping_cmd_2_exe_check=$?
                        if [ $ping_cmd_2_exe_check -ne 0 ]; then
                            $ECHO "Reboot of ${server_host} still in progress, Please wait for some more time...." | $TEE -a "${LOGFILE}"
                            (( _timeout_ = "${_timeout_}" + 1 ))
                            $SLEEP 30
                            continue
                        elif [ "${_trigger_reboot_}" -eq 3 ]; then
                            $ECHO "Reboot not successful..... Reboot the ${server_host} server manually." | $TEE -a "${LOGFILE}"
                            break
                        else
                            $ECHO "${server_host} server rebooted successfully." | $TEE -a "${LOGFILE}"
                            _timeout_=21
                        fi
                    done
                
                    if [ "${_timeout_}" == 20 ]; then
                        $ECHO "Max Timeout has reached for reboot on the ${server_host} server. Kindly check the state of server and try to check with \"last reboot\" command" | $TEE -a "${LOGFILE}"
                    fi
                else
                    $ECHO "Required RAM size is ${_req_memory_size_} \nSize of RAM connected to the server ${server_host} is ${_memory_size_}." | $TEE -a "${LOGFILE}"
                    $ECHO "WARNING: Available RAM size is not enough for config ${_supported_config_} on ${server_host}." | $TEE -a "${LOGFILE}"
                fi
            done
            
            #starting ENIQ services
            start_services
        
        else
            insert_header_footer foot "INFO: Skipping Stage - ${NEXT_STAGE}. As memory re-allocation not required." "${LOGFILE}" 
            set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
            return 0
        fi
    else
        insert_header_footer foot "INFO: Skipping Stage - ${NEXT_STAGE}. As memory expansion is not required." "${LOGFILE}" 
        set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
        return 0
    fi
fi

insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}"
set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
}

### Function: niqini_backup ###
#
#   To create backup files of niq.ini
#   
#
# Arguments:
#       none
# Return Values:
#
niqini_backup()
{
insert_header_footer head "Entering ENIQ DB Expansion stage - ${NEXT_STAGE}" "${LOGFILE}"
log_msg -s "\nTaking niq.ini config file backup " -l "${LOGFILE}"
$CP -p "${CLI_CONF_DIR}"/niq.ini "${CLI_CONF_DIR}"/niq.ini_bkp
if [ -s "${CLI_CONF_DIR}"/niq.ini_bkp ]; then 
    log_msg -s -q "\nThe niq.ini config file backup Completed on Coordinator" -l "${LOGFILE}"
else
    _err_msg_="Failed for taking ${ENIQ_CONF_PATH}/niq.ini Backup" | $TEE -a "${LOGFILE}"
    abort_script "$_err_msg_"  | $TEE -a "${LOGFILE}"
fi
run_remote_cmd "engine" "$CP -p ${CLI_CONF_DIR}/niq.ini ${CLI_CONF_DIR}/niq.ini_bkp"
if [ $? -eq 0 ]; then 
    log_msg -s -q "\nThe niq.ini config file backup Completed on Engine" -l "${LOGFILE}"
else
    _err_msg_="Failed for taking ${ENIQ_CONF_PATH}/niq.ini Backup" | $TEE -a "${LOGFILE}"
    abort_script "$_err_msg_"  | $TEE -a "${LOGFILE}"
fi
run_remote_cmd "dwh_reader_1" "$CP -p ${CLI_CONF_DIR}/niq.ini ${CLI_CONF_DIR}/niq.ini_bkp"
if [ $? -eq 0 ]; then 
    log_msg -s -q "\nThe niq.ini config file backup Completed on Dwh_reader_1" -l "${LOGFILE}"
else
    _err_msg_="Failed for taking ${ENIQ_CONF_PATH}/niq.ini Backup" | $TEE -a "${LOGFILE}"
    abort_script "$_err_msg_"  | $TEE -a "${LOGFILE}"
fi
run_remote_cmd "dwh_reader_2" "$CP -p ${CLI_CONF_DIR}/niq.ini ${CLI_CONF_DIR}/niq.ini_bkp"
if [ $? -eq 0 ]; then 
    log_msg -s -q "\nThe niq.ini config file backup Completed on Dwh_reader_2" -l "${LOGFILE}"
else
    _err_msg_="Failed for taking ${ENIQ_CONF_PATH}/niq.ini Backup" | $TEE -a "${LOGFILE}"
    abort_script "$_err_msg_"  | $TEE -a "${LOGFILE}"
fi
log_msg -s "\nBackup of niq.ini is completed." -l "${LOGFILE}"
insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}"
set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
}

### Function: output ###
#
#   Function for output structure
#
# Arguments:
#       none
# Return Values:
#       none
output()
{
if [ -s "${VAR_TMP_DIR}"/ram_check_output ]; then
ram_status=$($CAT "${VAR_TMP_DIR}"/ram_check_output | $GREP -w "0" | $WC -l)
    if [ "${ram_status}" -eq 0 ]; then 
        ram_i="1"
    else
        ram_i="0"
    fi
fi
if [[ -s ${VAR_TMP_DIR}/database_check_output ]]; then 
database_status=$($CAT "${VAR_TMP_DIR}"/database_check_output | $GREP -w "0" | $WC -l)
    if [ "${database_status}" -eq 0 ]; then 
        Lun_cnt_i="1"
    else
        Lun_cnt_i="0"
    fi
fi

$ECHO "\n\n===========================================================================" | $TEE -a "${LOGFILE}"
$ECHO "                       PRECHECK SUMMARY                                 " | $TEE -a "${LOGFILE}"
$ECHO "===========================================================================" | $TEE -a "${LOGFILE}"

i=1
$ECHO "No.    PRECHECK                          STATUS              LOGS" | $TEE -a "${LOGFILE}"
$ECHO "$i)    SAN POOL EXPANSION               $(if [ "$san_pool_exp_i" -eq 1 ]; then echo "| SUCCESS |"; elif [ "$san_pool_exp_i" -eq -1 ]; then echo "| FAILURE |"; else echo "| NO RUN |"; fi)        | $LOGFILE" | $TEE -a "${LOGFILE}"
((i++))
if [[ $server_type == "MB" ]]; then
    $ECHO "$i)    NAS POOL EXPANSION                   $(if [ "$nas_pool_exp_i" -eq 1 ]; then echo "| SUCCESS |"; elif [ "$nas_pool_exp_i" -eq -1 ]; then echo "| FAILURE |"; else echo "| NO RUN |"; fi)        | $LOGFILE" | $TEE -a "${LOGFILE}"
    ((i++))
fi
$ECHO "$i)    RAM REQUIREMENT                  $(if [ "$ram_i" -eq 1 ]; then echo "| SUCCESS |"; elif [ "$ram_i" -eq 0 ]; then echo "| FAILURE |"; else echo "| NO RUN |"; fi)        | $LOGFILE" | $TEE -a "${LOGFILE}"
((i++))
$ECHO "$i)    TARGET CONFIG LUNs CHECK         $(if [ "$Lun_match_i" -eq 1 ]; then echo "| SUCCESS |"; elif [ "$Lun_match_i" -eq -1 ]; then echo "| FAILURE |"; else echo "| NO RUN |"; fi)        | $LOGFILE" | $TEE -a "${LOGFILE}"
((i++))
$ECHO "$i)    PRESENT CONFIG LUNs CHECK        $(if [ "$Lun_cnt_i" -eq 1 ]; then echo "| SUCCESS |"; elif [ "$Lun_cnt_i" -eq 0 ]; then echo "| FAILURE |"; else echo "| NO RUN |"; fi)        | $LOGFILE" | $TEE -a "${LOGFILE}"
failure_chk=true
$ECHO "\n"
$ECHO "===========================================================================" | $TEE -a "${LOGFILE}"


if [[ $san_pool_exp_i -eq -1 ]]; then
    failure_chk=false
fi
if [ -n "$nas_pool_exp_i" ]; then 
    if [[ $nas_pool_exp_i -eq -1 ]]; then
        failure_chk=false
    fi
fi
if [[ $ram_i -eq 0 ]]; then
    failure_chk=false
fi
if [[ $Lun_match_i -eq -1 ]]; then
    failure_chk=false
fi
if [[ $Lun_cnt_i -eq 0 ]]; then
    failure_chk=false
fi
if [[ "${failure_chk}" == "true" ]]; then
    insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}"
    set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
else
    $ECHO "Checks failed, Verify the logs" | $TEE -a "${LOGFILE}"
    _err_msg_="Prerequisite validation Check Failed"
    abort_script "$_err_msg_" 
fi
$RM -rf "${VAR_TMP_DIR}"/ram_check_output >> /dev/null 2>&1
$RM -rf "${VAR_TMP_DIR}"/count.txt >> /dev/null 2>&1
$RM -rf "${VAR_TMP_DIR}"/count.txt >> /dev/null 2>&1
$RM -rf "${VAR_TMP_DIR}"/database_check_output >> /dev/null 2>&1

}

### Function: post_expansion_configuration ###
#
# Perform Post Expansion Configuration changes
#
# Arguments:
#    none
# Return Values:
#     none
post_expansion_configuration(){

insert_header_footer head "Entering ENIQ DB Expansion stage - ${NEXT_STAGE}" "${LOGFILE}"


## Traget Deployment Type
_targeted_config_=`$GREP "ENIQ Target Configuration Selected Type" ${CLI_CONF_DIR}/expansion_disp_file | $AWK -F ":" '{print $2}' | $TR -d ' '`

target_deployed=`iniget "${SAN_DEVICE}_Config${_targeted_config_}_${server_type}" -f "${DB_CONF}" -v DeploymentType`
    if [ -z "${target_deployed}" ]; then
       _err_msg_="Could not read Target Deployment param from ${DB_CONF}" | $TEE -a "${LOGFILE}"
        abort_script "$_err_msg_"  | $TEE -a "${LOGFILE}"
    fi
    ## get the IP address of RD1 and RD2
    $PERL ${ENIQ_LIB_DIR}/get_ip_order.pl -f ${TEMP_DIR}/perl.txt
    _perl_script_exe_status_=$?
    if [ $_perl_script_exe_status_ -ne 0 ]; then
       _err_msg_="Unbale to create server list"  | $TEE -a "${LOGFILE}"
        abort_script "$_err_msg_"  | $TEE -a "${LOGFILE}"
    fi
    local _count_
	_count_=`$CAT ${TEMP_DIR}/perl.txt |$GREP dwh_reader_1| $GREP -o "::" | $WC -l`
	if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
	    _reader1_ip_=`$GREP dwh_reader_1 ${TEMP_DIR}/perl.txt | $GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}'`
		_reader1_host_=`$GREP dwh_reader_1 ${TEMP_DIR}/perl.txt |  $AWK -F:: '{print $3}'`
	else
        _reader1_ip_=`$GREP dwh_reader_1 ${TEMP_DIR}/perl.txt |  $AWK -F:: '{print $1}'`
		_reader1_host_=`$GREP dwh_reader_1 ${TEMP_DIR}/perl.txt |  $AWK -F:: '{print $2}'`
	fi
    _rd1_script_exe_status_=$?
    if [ $_rd1_script_exe_status_ -ne 0 ]; then
       _err_msg_="Could not get RD1 Server IP address" | $TEE -a "${LOGFILE}"
        abort_script "$_err_msg_"  | $TEE -a "${LOGFILE}"
    fi
    _count_=`$CAT ${TEMP_DIR}/perl.txt |$GREP dwh_reader_2| grep -o "::" | wc -l`
	if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
	    _reader2_ip_=`$GREP dwh_reader_2 ${TEMP_DIR}/perl.txt | $GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}'` 
	    _reader2_host_=`$GREP dwh_reader_2 ${TEMP_DIR}/perl.txt |  $AWK -F:: '{print $3}'`
	else
        _reader2_ip_=`$GREP dwh_reader_2 ${TEMP_DIR}/perl.txt |  $AWK -F:: '{print $1}'`
		_reader2_host_=`$GREP dwh_reader_2 ${TEMP_DIR}/perl.txt |  $AWK -F:: '{print $2}'`
    fi
    _rd2_script_exe_status_=$?
    if [ $_rd2_script_exe_status_ -ne 0 ]; then
       _err_msg_="Could not get RD2 Server IP address" | $TEE -a "${LOGFILE}"
        abort_script "$_err_msg_"  | $TEE -a "${LOGFILE}"
    fi
    _count_=`$CAT ${TEMP_DIR}/perl.txt | $GREP engine | grep -o "::" | wc -l`
	if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
	   _engine_ip_=`$GREP stats_engine ${TEMP_DIR}/perl.txt | $GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}'`  
	   _engine_host_=`$GREP stats_engine ${TEMP_DIR}/perl.txt |  $AWK -F:: '{print $3}'`
	else
       _engine_ip_=`$GREP stats_engine ${TEMP_DIR}/perl.txt |  $AWK -F:: '{print $1}'`
	   _engine_host_=`$GREP stats_engine ${TEMP_DIR}/perl.txt |  $AWK -F:: '{print $2}'`
	fi
    _engine_script_exe_status_=$?
    if [ $_engine_script_exe_status_ -ne 0 ]; then
       _err_msg_="Could not get Engine Server IP address" | $TEE -a "${LOGFILE}"
        abort_script "$_err_msg_"  | $TEE -a "${LOGFILE}"
    fi

# Confirm if coordinator MB (or MB) or SB, 
     case `$GREP -qx 'stats_coordinator\|eniq_stats' ${INSTALLED_SERVER_TYPE} >/dev/null; echo $?` in
    0)
    update_deployment_type
    stop_services
    raw_registration
    ;;
    1)
    # code if not found
    _err_msg_="You must be on stats_coordinator or eniq_stats to run this script" | $TEE -a "${LOGFILE}"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}" | $TEE -a "${LOGFILE}"
    ;;
  *)
    # code if an error occurred
    _err_msg_="Execution failed" | $TEE -a "${LOGFILE}"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}" | $TEE -a "${LOGFILE}"
    ;;
    esac

#Check all expansion flags are present
lun_completion_check

#Start the ENIQ services
log_msg -h -s "Starting ENIQ services" -l "${LOGFILE}"

local _check_command_="${ENIQ_ADMIN_BIN_DIR}/manage_deployment_services.bsh"

log_msg -s "Starting to run $BASH ${_check_command_} -a start -s ALL -N" -l "${LOGFILE}"
$BASH "${_check_command_}" -a start -s ALL -N
strt_eniq_service_exe_check=$?
if [ $strt_eniq_service_exe_check -ne 0 ]; then
    _err_msg_="Exiting... Unable to start ENIQ services \n"
    abort_script "$_err_msg_"
fi
log_msg -q -s "Successfully started ENIQ services" -l "${LOGFILE}"

insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}" | $TEE -a "${LOGFILE}"
set_next_stage `$EXPR ${ARRAY_ELEM}+1`
}

### Function: pre_checks ###
#
#   To perform pre_checks
#   
#
# Arguments:
#       none
# Return Values:
#
pre_checks()
{
insert_header_footer head "Entering ENIQ DB Expansion stage - ${NEXT_STAGE}" "${LOGFILE}"



log_msg -s "\nExecution for $BASH ${ENIQ_CHECKS_PATH}/eniq_checks.bsh in progress......" -l "${LOGFILE}"

$BASH "${ENIQ_CHECKS_PATH}"/eniq_checks.bsh  >>/dev/null
_precheck_exe_status_=$?
if [[ $_precheck_exe_status_ -ne 0 ]];then
    _err_msg_="Pre-Checks Execution failed."
    abort_script "$_err_msg_"
fi

_last_summary_file_=$($LS -rt "${HEALTH_SUMMARY_DIR}" | $TAIL -1)
if [ -z "{_last_summary_file_}" ]; then
    _err_msg_="Could not find latest precheck summry file under "${HEALTH_SUMMARY_DIR}""
    abort_script "$_err_msg_" 
fi

# Check for failures in health check summary file
failure_chk=$($CAT "${HEALTH_SUMMARY_DIR}"/"${_last_summary_file_}" | $GREP -v "TOTAL CHECKS" | $GREP "FAILURE" | $WC -l)
if [ "$failure_chk" -gt 0 ]; then
    log_msg -s "\nHealth Checks with FAILURE: " -l "${LOGFILE}"  
    $CAT "${HEALTH_SUMMARY_DIR}"/"${_last_summary_file_}" | $GREP -v "TOTAL CHECKS" | $GREP "FAILURE" | $AWK -F "|" '{print $1,"\t" "REMARK:"$3 "\t" "Log:" $4}' > /var/tmp/pre_check
    $SED 's/^ *//' /var/tmp/pre_check | cut -d" " -f2-
fi
# Check for warning in health check summary file
warning_chk=$($CAT "${HEALTH_SUMMARY_DIR}"/"${_last_summary_file_}" | $GREP -v "TOTAL CHECKS" | $GREP "WARNING" | $WC -l)
if [ "$warning_chk" -gt 0 ]; then
    log_msg -s "\nHealth Checks with WARNING: " -l "${LOGFILE}"  
    $CAT "${HEALTH_SUMMARY_DIR}"/"${_last_summary_file_}" | $GREP -v "TOTAL CHECKS" | $GREP "WARNING" | $AWK -F "|" '{print $1,"\t" "REMARK:"$3 "\t" "Log:" $4}' > /var/tmp/pre_check
    $SED 's/^ *//' /var/tmp/pre_check | cut -d" " -f2-
fi

if [[ $failure_chk -gt 0 ]]; then
    _err_msg_="Aborting the execution, as failure for ENIQ pre-checks found. Resolve the issue(s) and re-run the script again. "
    abort_script "$_err_msg_"
elif [[ ( $failure_chk == 0 ) && ( $warning_chk -gt 0 ) ]]; then
    $ECHO "Do you want to continue with current state of pre_checks? (yes/no)"
    read pre_check_flow
    if [[ $pre_check_flow == "no" || $pre_check_flow == "NO" || $pre_check_flow == "No" || $pre_check_flow == "n" || $pre_check_flow == "N" ]]; then
        _err_msg_="Aborting the execution, as eniq checks are failed. Resolve the issue(s) and re-run the script again."
        abort_script "$_err_msg_"
    fi
elif [[ ( $failure_chk == 0 ) && ( $warning_chk == 0 ) ]]; then
    $ECHO "\nAll ENIQ pre-checks execution status is sucessfull" | $TEE -a "${LOGFILE}"
fi

log_msg -s "Prechecks Execution Completed Successfully" -l "${LOGFILE}"

$RM -rf /var/tmp/pre_check
$RM -rf /var/tmp/precheck
insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}"
set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
}

### Function: prerequisite_validation ###
#
#   Checks for the RAM and LUN requirements
#
# Arguments:
#       none
# Return Values:
#       none
prerequisite_validation()
{
insert_header_footer head "Entering ENIQ DB Expansion stage - ${NEXT_STAGE}" "${LOGFILE}"

target_text="${SAN_DEVICE}_Config${_supported_config_}_${server_type}"
san_pool_exp_i=0
nas_pool_exp_i=0

if [[ "$server_type" == "MR" || "$server_type" == "MB" ]]; then
    log_msg -s -q "Executing SAN POOL Expansion Check " -l "${LOGFILE}"
    san_val=$(iniget "$target_text" -f "${DB_CONF}" -v SAN_Pool | $GREP -oE '[0-9.]+')
    if [ -n $san_val ]; then
        san_val=$($ECHO "scale=1; $san_val * 1024" | bc)
        san_range=$($ECHO "scale=1; $san_val - 10" | bc)
        server_san_value
        $AWK 'BEGIN{if ('$san_v'>='$san_range'||'$san_v'>='$san_val') exit 1}'
        if [ $? -eq 1 ]; then
            san_pool_exp_i="1"
        else
            san_pool_exp_i="-1"
        fi
    fi
    log_msg -s -q "SAN POOL Expansion Check Execution Completed" -l "${LOGFILE}"
fi

if [[ $server_type == "MB" ]]; then
    log_msg -s -q "\n\nExecuting NAS POOL Expansion Check" -l "${LOGFILE}"
    nas_val=$(iniget "$target_text" -f "${DB_CONF}" -v NAS_Pool | $GREP -oE '[0-9.]+')
    if [ -n $nas_val ]; then
        nas_val=$($ECHO "scale=1; $nas_val * 1024" | bc)
        nas_range=$($ECHO "scale=1; $nas_val - 10" | bc)
        server_nas_value
        $AWK 'BEGIN{if ('$nas_v'>='$nas_range'||'$nas_v'=='$nas_val') exit 1}'
        if [ $? -eq 1 ]; then
            nas_pool_exp_i="1"
        else
            nas_pool_exp_i="-1"
        fi
    fi
    log_msg -s -q "NAS POOL Expansion Check Execution Completed" -l "${LOGFILE}"
fi
if [[ "$server_type" == "MR" ]]; then
    log_msg -s -q "\n\nExecuting Ram Requirement Check " -l "${LOGFILE}"
    ###checking coordinator ram###
    type="CO_RAM"
    condition="Coordinator"
    ram_check $type $condition "$target_text" "$server_type"
    
    ###checking engine ram###
    type="ENG_RAM"
    condition="engine"
    ram_check $type $condition "$target_text" "$server_type"
    
    ###checking reader 1 ram###
    type="RD1_RAM"
    condition="dwh_reader_1"
    ram_check $type $condition "$target_text" "$server_type"
    
    ###checking reader 2 ram###
    type="RD2_RAM"
    condition="dwh_reader_2"
    ram_check $type $condition "$target_text" "$server_type"
    log_msg -s -q "Ram Requirement Check Execution Completed " -l "${LOGFILE}"
fi
if [[ "$server_type" == "MB" ]]; then
    if [[ $_supported_config_ == "D" || $_supported_config_ == "E" || $_supported_config_ == "F" || $_supported_config_ == "G" ]]; then
        log_msg -s -q "\n\nExecuting RAM Requirement Check " -l "${LOGFILE}"
        ###checking coordinator ram###
        type="CO_RAM_Gen"
        condition="Coordinator"
        ram_check $type $condition "$target_text" "$server_type"
    
        ###checking engine ram###
        type="ENG_RAM_Gen"
        condition="engine"
        ram_check $type $condition "$target_text" "$server_type"
    
        ###checking reader 1 ram###
        type=RD1_RAM_Gen
        condition="dwh_reader_1"
        ram_check $type $condition "$target_text" "$server_type"
    
        ###checking reader 2 ram###
        type=RD2_RAM_Gen
        condition="dwh_reader_2"
        ram_check $type $condition "$target_text" "$server_type"
        log_msg -s -q "Ram Requirement Check Execution Completed " -l "${LOGFILE}"
    fi
fi
#Checking whether LUNs are Present as per target Config
log_msg -s -q "\n\nExecuting Target Config LUNs Check " -l "${LOGFILE}"
display_target_configuration
log_msg -s -q "Target Config LUNs Check Execution Completed" -l "${LOGFILE}"


#Checking whether Luns present in symlink.ini file are attached to database
log_msg -s -q "\n\nExecuting Present Config LUNs Check " -l "${LOGFILE}"
###coordinator###
DATABASE_QUERY="select DBFileName, RWMode, Online from sp_iqfile();"
_serv_type_="dwhdb"
check_status "$DATABASE_QUERY" "$_serv_type_" >> /dev/null 2>&1
count=$($CAT /eniq/sw/conf/status_file.txt | $GREP -i "T" | $WC -l)
$RM -rf "${VAR_TMP_DIR}"/count.txt
iniget DB_DISK_ALLOC -f "${ENIQ_CONF_DIR}"/sym_links.ini -v MAINDB_DISKS | tr ' ' '\n' >> "${VAR_TMP_DIR}"/count.txt
iniget DB_DISK_ALLOC -f "${ENIQ_CONF_DIR}"/sym_links.ini -v TEMPDB_DISKS | tr -d ' ' | tr ' ' '\n' >> "${VAR_TMP_DIR}"/count.txt
iniget DB_DISK_ALLOC -f "${ENIQ_CONF_DIR}"/sym_links.ini -v IQ_SYS_MAIN_DISKS | tr ' ' '\n' >> "${VAR_TMP_DIR}"/count.txt

sym_link_count_coor=$($CAT "${VAR_TMP_DIR}"/count.txt | $WC -l)
if [[ "$count" == "$sym_link_count_coor" ]]; then
    $ECHO "dwhdb_count=1" >> "${VAR_TMP_DIR}"/database_check_output
else
    $ECHO "dwhdb_count=0" >> "${VAR_TMP_DIR}"/database_check_output
fi

###reader_1###
_serv_type_="dwh_reader_1"
check_status "$DATABASE_QUERY" "$_serv_type_" >> /dev/null 2>&1
count_rd1=$($CAT /eniq/sw/conf/status_file.txt | $GREP -i "T" | $WC -l)
$RM -rf "${VAR_TMP_DIR}"/count.txt
run_remote_cmd "${_serv_type_}" "(. ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib; iniget DB_DISK_ALLOC -f ${ENIQ_CONF_DIR}/sym_links.ini -v TEMPDB_DISKS | tr ' ' '\n' )" >> "${VAR_TMP_DIR}"/count.txt
run_remote_cmd "${_serv_type_}" "(. ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib; iniget DB_DISK_ALLOC -f ${ENIQ_CONF_DIR}/sym_links.ini -v MAINDB_DISKS | tr ' ' '\n' )" >> "${VAR_TMP_DIR}"/count.txt
run_remote_cmd "${_serv_type_}" "(. ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib; iniget DB_DISK_ALLOC -f ${ENIQ_CONF_DIR}/sym_links.ini -v IQ_SYS_MAIN_DISKS | tr ' ' '\n' )" >> "${VAR_TMP_DIR}"/count.txt
rd_1_count=$($CAT "${VAR_TMP_DIR}"/count.txt | $WC -l)

if [[ "$count_rd1" == "$rd_1_count" ]]; then
    $ECHO "dwh_reader_1_count=1" >> "${VAR_TMP_DIR}"/database_check_output
else
    $ECHO "dwh_reader_1_count=0" >> "${VAR_TMP_DIR}"/database_check_output
fi


###reader_2###
_serv_type_="dwh_reader_2"
check_status "$DATABASE_QUERY" "$_serv_type_" >> /dev/null 2>&1
count_rd2=$($CAT /eniq/sw/conf/status_file.txt | $GREP -i "T" | $WC -l)
$RM -rf "${VAR_TMP_DIR}"/count.txt
run_remote_cmd "${_serv_type_}" "(. ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib; iniget DB_DISK_ALLOC -f ${ENIQ_CONF_DIR}/sym_links.ini -v TEMPDB_DISKS | tr ' ' '\n' )" >> "${VAR_TMP_DIR}"/count.txt
run_remote_cmd "${_serv_type_}" "(. ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib; iniget DB_DISK_ALLOC -f ${ENIQ_CONF_DIR}/sym_links.ini -v MAINDB_DISKS | tr ' ' '\n' )" >> "${VAR_TMP_DIR}"/count.txt
run_remote_cmd "${_serv_type_}" "(. ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib; iniget DB_DISK_ALLOC -f ${ENIQ_CONF_DIR}/sym_links.ini -v IQ_SYS_MAIN_DISKS | tr ' ' '\n' )" >> "${VAR_TMP_DIR}"/count.txt
rd_2_count=$($CAT "${VAR_TMP_DIR}"/count.txt | $WC -l)

if [[ "$count_rd2" == "$rd_2_count" ]]; then
    $ECHO "dwh_reader_2_count=1" >> "${VAR_TMP_DIR}"/database_check_output
else
    $ECHO "dwh_reader_2_count=0" >> "${VAR_TMP_DIR}"/database_check_output
fi
log_msg -s -q "Present Config LUNs Check Execution Completed" -l "${LOGFILE}"
output
}



### Function: ram_checks ###
#
#   Checks for the RAM requirements
#
# Arguments:
#       none
# Return Values:
#       none
ram_check()
{
if [[ $2 == "Coordinator" ]]; then
    ram=$(free -g | $GREP -w Mem | $AWK '{print $2}')
else
    ram=$(run_remote_cmd "$2" "( free -g | $GREP -w Mem )" | $AWK '{print $2}')
fi
if [[ $4 == "MB" ]]; then
    gen_val=$(dmidecode -s system-product-name | $AWK -F " " '{print $3}' | $GREP -oP '[0-9.]+')
    server_tp=$1$gen_val
elif [[ $4 == "MR" ]]; then
    server_tp=$1
fi

server_ram_range=$(iniget "$3" -f "${DB_CONF}" -v "$server_tp" | $GREP -oP '[0-9.]+')
server_ram_alp=$(iniget "$3" -f "${DB_CONF}" -v "$server_tp" | $GREP -o '[[:alpha:]]*')

if [[ $server_ram_alp == "T" ]]; then
    server_ram_range=$($ECHO "scale=1; $server_ram_range * 1024" | bc)
fi
if [ "$server_type" == "MR" ];then
    dimm="64"
    server_ram_range_dimm=$($ECHO "scale=1; $server_ram_range / $dimm" | bc)
    actual_server_ram_range_dimm=$($ECHO "scale=1; $ram / $dimm" | bc)
    server_ram_range_dimm_min=$($ECHO "scale=1; $server_ram_range_dimm - 0.5" | bc)
    _range_=$($ECHO "scale=1; $server_ram_range - 64" | bc)
    
    $AWK 'BEGIN{if ('$actual_server_ram_range_dimm'>='$server_ram_range_dimm_min'||'$actual_server_ram_range_dimm'>='$server_ram_range_dimm') exit 1}'
    if [ $? -eq 1 ]; then
        $ECHO "${2}_RAM=1" >> "${VAR_TMP_DIR}"/ram_check_output
    else
        $ECHO "Insufficient ram on $2(Required RAM: $_range_ GB - $server_ram_range GB, Present RAM: $ram GB)" | $TEE -a "${LOGFILE}"
        $ECHO "${2}_RAM=0" >> "${VAR_TMP_DIR}"/ram_check_output
    fi
fi
if [ "$server_type" == "MB" ];then
    _range_=$($ECHO "scale=1; $server_ram_range - 25" | bc)
    $AWK 'BEGIN{if ('$ram'>='$_range_'||'$ram'>='$server_ram_range') exit 1}'
    if [ $? -eq 1 ]; then
        $ECHO "${2}_RAM=1" >> "${VAR_TMP_DIR}"/ram_check_output
    else
        $ECHO "Insufficient ram on $2(Required RAM: $_range_ GB - $server_ram_range GB, Present RAM: $ram GB)" | $TEE -a "${LOGFILE}"
        $ECHO "${2}_RAM=0" >> "${VAR_TMP_DIR}"/ram_check_output
    fi
fi
}

### Function: raw_registration ###
#
# Update Symlink.ini with the changes
#
# Arguments:
#    none
# Return Values:
#     none
raw_registration()
{

$ECHO "------------------------------------------------------------------\n" | $TEE -a "${LOGFILE}"
bash /eniq/admin/bin/manage_deployment_services.bsh -a list -s ALL >> /var/tmp/all_service_status
service_stop_exe_check=$?
if [ $service_stop_exe_check -ne 0 ]; then
    _err_msg_="Failed to list ENIQ Services" | $TEE -a "${LOGFILE}"
    abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
else
    active_count=$($GREP -w "active" /var/tmp/all_service_status | wc -l)
    inactive_count=$($GREP -w "inactive" /var/tmp/all_service_status | wc -l)
    failed_count=$($GREP -w "failed" /var/tmp/all_service_status | wc -l)
    if [ "${active_count}" -eq 0 ] && [ "${inactive_count}" -gt 0 ] && [ "${failed_count}" -eq 0 ]; then
        $ECHO "All ENIQ Services are stopped correctly" | $TEE -a "${LOGFILE}"
    elif [ "${active_count}" -gt 0 ] || [ "${failed_count}" -gt 0 ]; then
        _err_msg_="All ENIQ Services are not stopped correctly" | $TEE -a "${LOGFILE}"
        abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
    fi
fi

$ECHO "RAW Device Registration\n" | $TEE -a "${LOGFILE}"
# Raw registatartion and symlink update on CO Server
$BASH ${ENIQ_CORE_INST_DIR}/bin/get_cell_count.bsh -d ${ENIQ_CONF_DIR}/ -g ${VAR_TMP_DIR}/ -t raw -e stats -l /tmp/get_cell_count.log 
get_cell_count_co_exe_check=$?
if [ $get_cell_count_co_exe_check -ne 0 ]; then
    _err_msg_="Adding LUN details failed on Coordinator Server" | $TEE -a "${LOGFILE}"
    abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
else
    $ECHO "Successfully updated LUN details on Coordinator Server" | $TEE -a "${LOGFILE}"
fi

$BASH ${ENIQ_CORE_INST_DIR}/bin/eniq_core_install.bsh -M -s create_db_sym_links -n -R -l /tmp/create_db_sym_links.log >> /dev/null 2>&1
crt_db_sym_co_exe_check=$?
if [ $crt_db_sym_co_exe_check -ne 0 ]; then
    _err_msg_="Updating LUN details in ${SYM_INI} failed on Coordinator Server" | $TEE -a "${LOGFILE}"
    abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
else
    $ECHO "Successfully updated Symlink file with the new LUN details on Coordinator Server" | $TEE -a "${LOGFILE}"
fi

if [ "${CURR_SERVER_TYPE}" == "stats_coordinator" ]; then
    if [ "${_user_root}" == 1 ]; then

       # Raw registatartion and symlink update on RD1 Server
        run_remote_cmd "${_reader1_host_}" "$BASH ${ENIQ_CORE_INST_DIR}/bin/get_cell_count.bsh -d ${ENIQ_CONF_DIR}/ -g ${VAR_TMP_DIR}/ -t raw -e stats -l /tmp/get_cell_count.log"
        get_cell_count_rd1_exe_check=$?
        if [ $get_cell_count_rd1_exe_check -ne 0 ]; then
            _err_msg_="Adding LUN details failed on Reader-1 Server" | $TEE -a "${LOGFILE}"
            abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        else
            $ECHO "\nSuccessfully updated LUN details on Reader-1 Server" | $TEE -a "${LOGFILE}"
        fi

        run_remote_cmd "${_reader1_host_}" "$BASH ${ENIQ_CORE_INST_DIR}/bin/eniq_core_install.bsh -M -s create_db_sym_links -n -R -l /tmp/create_db_sym_links.log" >> /dev/null 2>&1
        crt_db_sym_rd1_exe_check=$?
        if [ $crt_db_sym_rd1_exe_check -ne 0 ]; then
            _err_msg_="Updating LUN details in ${SYM_INI} failed on Reader-1 Server" | $TEE -a "${LOGFILE}"
            abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        else
            $ECHO "Successfully updated Symlink file with the new LUN details on Reader-1 Server" | $TEE -a "${LOGFILE}"
        fi

        # Raw registatartion and symlink update on RD2 Server
        run_remote_cmd "${_reader2_host_}" "$BASH ${ENIQ_CORE_INST_DIR}/bin/get_cell_count.bsh -d ${ENIQ_CONF_DIR}/ -g ${VAR_TMP_DIR}/ -t raw -e stats -l /tmp/get_cell_count.log"
        get_cell_count_rd2_exe_check=$?
        if [ $get_cell_count_rd2_exe_check -ne 0 ]; then
            _err_msg_="Adding LUN details failed on Reader-2 Server" | $TEE -a "${LOGFILE}"
            abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        else
            $ECHO "\nSuccessfully updated LUN details on Reader-2 Server" | $TEE -a "${LOGFILE}"
        fi

        run_remote_cmd "${_reader2_host_}" "$BASH ${ENIQ_CORE_INST_DIR}/bin/eniq_core_install.bsh -M -s create_db_sym_links -n -R -l /tmp/create_db_sym_links.log" >> /dev/null 2>&1
        crt_db_sym_rd2_exe_check=$?
        if [ $crt_db_sym_rd2_exe_check -ne 0 ]; then
            _err_msg_="Updating LUN details in ${SYM_INI} failed on Reader-2 Server" | $TEE -a "${LOGFILE}"
            abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        else
            $ECHO "Successfully updated Symlink file with the new LUN details on Reader-2 Server" | $TEE -a "${LOGFILE}"
        fi
    else
       # Raw registatartion and symlink update on RD1 blade
        run_remote_cmd "${_reader1_host_}" "$SUDO $BASH ${ENIQ_CORE_INST_DIR}/bin/get_cell_count.bsh -d ${ENIQ_CONF_DIR}/ -g ${VAR_TMP_DIR}/ -t raw -e stats -l /tmp/get_cell_count.log" "" "$_get_id_"
        get_cell_count_rd1_exe_check=$?
        if [ $get_cell_count_rd1_exe_check -ne 0 ]; then
            _err_msg_="Adding LUN details failed on Reader-1 Server" | $TEE -a "${LOGFILE}"
            abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        else
           $ECHO "\nSuccessfully updated LUN details on Reader-1 Server" | $TEE -a "${LOGFILE}"
        fi
        
        run_remote_cmd "${_reader1_host_}" "$SUDO $BASH ${ENIQ_CORE_INST_DIR}/bin/eniq_core_install.bsh -M -s create_db_sym_links -n -R -l /tmp/create_db_sym_links.log" "" "$_get_id_" >> /dev/null 2>&1
        crt_db_sym_rd1_exe_check=$?
        if [ $crt_db_sym_rd1_exe_check -ne 0 ]; then
            _err_msg_="Updating LUN details in ${SYM_INI} failed on Reader-1 Server" | $TEE -a "${LOGFILE}"
            abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        else
            $ECHO "Successfully updated Symlink file with the new LUN details on Reader-1 Server" | $TEE -a "${LOGFILE}"
        fi

        # Raw registatartion and symlink update on RD2 blade
        run_remote_cmd "${_reader2_host_}" "$SUDO $BASH ${ENIQ_CORE_INST_DIR}/bin/get_cell_count.bsh -d ${ENIQ_CONF_DIR}/ -g ${VAR_TMP_DIR}/ -t raw -e stats -l /tmp/get_cell_count.log" "" "$_get_id_"
        get_cell_count_rd2_exe_check=$?
        if [ $get_cell_count_rd2_exe_check -ne 0 ]; then
            _err_msg_="Adding LUN details failed on Reader-2 Server" | $TEE -a "${LOGFILE}"
            abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        else
            $ECHO "\nSuccessfully updated LUN details on Reader-2 Server" | $TEE -a "${LOGFILE}"
        fi

        run_remote_cmd "${_reader2_host_}" "$SUDO $BASH ${ENIQ_CORE_INST_DIR}/bin/eniq_core_install.bsh -M -s create_db_sym_links -n -R -l /tmp/create_db_sym_links.log" "" "$_get_id_" >> /dev/null 2>&1
        crt_db_sym_rd2_exe_check=$?
        if [ $crt_db_sym_rd2_exe_check -ne 0 ]; then
            _err_msg_="Updating LUN details in ${SYM_INI} failed on Reader-2 Server" | $TEE -a "${LOGFILE}"
            abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        else
            $ECHO "Successfully updated Symlink file with the new LUN details on Reader-2 Server" | $TEE -a "${LOGFILE}"
        fi
    fi
fi

}


### Function: rollback_tempdb ###
#
# Rollback the tempdb that are added in case of failure
#
# Arguments:
#    server name
# Return Values:
#     none
rollback_tempdb(){
TEM=/tmp
CONF_DIR=/eniq/installation/config
ENIQ_INI=niq.ini
READER_DIR=/eniq/database/dwh_reader
IQDIR=/eniq/sybase_iq/IQ-16_1
DBISQL=/eniq/sybase_iq/IQ-16_1/bin64/dbisql
ENIQ_ADMIN_DIR=/eniq/admin
ENIQ_ADMIN_BIN_DIR=/eniq/admin/bin
reader_number=$1
_reader_="DWH_READER_${reader_number}"
DATABASE_QUERY="select DBFileName from sp_iqfile() where DBFileName like 'reader%';"

DWH_ENG=dwh_reader_${reader_number}
DWH_PORT=`iniget DWH_READER_SETTINGS -v PortNumber -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! "${DWH_ENG}" -o ! "${DWH_PORT}" ] ; then
    _err_msg_="Could not get DBA info"
    abort_script "$_err_msg_"
fi

DBA_PASSWORD=`inigetpassword DB -v DBAPassword -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${DBA_PASSWORD} ]; then
    if [ -f ${ENIQ_BASE_DIR}/sw/installer/dbusers ]; then
        DBA_PASSWORD=`${ENIQ_BASE_DIR}/sw/installer/dbusers dba dwh`
        if [ ! "${DBA_PASSWORD}" ] ; then
             _err_msg_="Could not get DBA Password"
            abort_script "$_err_msg_"
        fi
    else
        _err_msg_="Could not get DBA Password"
        abort_script "$_err_msg_"
    fi
fi

MAINCACHE=`iniget ${_reader_} -v MainCache -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${MAINCACHE} ]; then
    _err_msg_="Could not read MainCache param from ${CONF_DIR}/${ENIQ_INI}"
    abort_script "$_err_msg_"
fi

TEMPCACHE=`iniget ${_reader_} -v TempCache -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! "${MAINCACHE}" -o ! "${TEMPCACHE}" ] ; then
    _err_msg_="Could not get cache settings"
    abort_script "$_err_msg_"
fi

LARGEMEMORY=`iniget ${_reader_} -v LargeMemory -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${LARGEMEMORY} ]; then
    _err_msg_="Could not read LargeMemory param from ${CONF_DIR}/${ENIQ_INI}"
    abort_script "$_err_msg_"
fi

#CATALOGCACHE=`iniget DWH -v CatalogCache -f ${CONF_DIR}/${ENIQ_INI}`
CATALOGCACHE=`iniget ${_reader_} -v CatalogCache -f ${CONF_DIR}/${ENIQ_INI}`
if [ ${CATALOGCACHE} ]; then
    CC="-c ${CATALOGCACHE}m"
fi

CATALOG_CACHE_UPPER_MEM_LIMIT_RESERVE=`iniget DWH -v CatalogCacheUpperMemLimitReserve -f ${CONF_DIR}/${ENIQ_INI}`
if [ ! ${CATALOG_CACHE_UPPER_MEM_LIMIT_RESERVE} ]; then
    _err_msg_="Could not read CatalogCacheUpperLimitReserve param from ${CONF_DIR}/${ENIQ_INI}"
    abort_script "$_err_msg_"
else
    _dwh_catalog_cache_upper_limit_=`$EXPR ${CATALOGCACHE} + ${CATALOG_CACHE_UPPER_MEM_LIMIT_RESERVE}`
    CH="-ch ${_dwh_catalog_cache_upper_limit_}m"
fi

#start_string=`${IQDIR}/bin64/start_iq @${READER_DIR}/dwhdb.cfg ${CC} ${CH} -n ${DWH_ENG} -iqmc ${MAINCACHE} -iqtc ${TEMPCACHE} -iqlm ${LARGEMEMORY} -x tcpip{port=${DWH_PORT}} -iqnotemp 100`

#Connection string for reader balde
conn_str_reader="-nogui -onerror exit -c \"eng=${DWH_ENG};links=tcpip{host=${DWH_ENG};port=${DWH_PORT}};uid=dba;pwd=${DBA_PASSWORD}\""
conn_str_reader_enc_=${TEM}/_conn_str_idle_encrypt.`uuidgen`
# encrypt the connection string for reader 1.
get_encrypt_file "${conn_str_reader}" "${conn_str_reader_enc_}"
su - dcuser -c "$DBISQL @${conn_str_reader_enc_} \"${DATABASE_QUERY}OUTPUT TO /var/tmp/tempdb_luns.txt"\" >> /dev/null 2>&1

# Getting entries from original symlink file
"run_remote_cmd" "dwh_reader_${reader_number}" ". /eniq/installation/core_install/lib/common_functions.lib; iniget DWH_DBSPACES_TEMP -f /eniq/installation/config/sym_links.ini_tmp_bkp" > /var/tmp/tempdb

#Calulating the number of luns added before failure
old_luns=$(wc -l < /var/tmp/tempdb | cut -d "" -f 1)
#echo old_luns=${old_luns}
filename=/var/tmp/tempdb_luns.txt
last_lun=$(grep -o "temp_" $filename | wc -l)
#echo last_lun=${last_lun}
new_luns=$((last_lun - old_luns))
#echo added_luns=${new_luns}
file=/var/tmp/tempdb
tail -n ${new_luns} /var/tmp/tempdb_luns.txt > /var/tmp/tempdb
#stopping reader services
"run_remote_cmd" "dwh_reader_${reader_number}" "bash ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh -a stop -s dwh_reader -N"

#Starting reader services with no temp
"run_remote_cmd" "dwh_reader_${reader_number}" "su - dcuser -c '${IQDIR}/bin64/start_iq @${READER_DIR}/dwhdb.cfg ${CC} ${CH} -n ${DWH_ENG} -iqmc ${MAINCACHE} -iqtc ${TEMPCACHE} -iqlm ${LARGEMEMORY} -x tcpip{port=${DWH_PORT}} ${READER_DIR}/dwhdb.db -iqnotemp 100'" >> /dev/null 2>&1
if [ -f "$file" ]; then
    for line in `cat ${file}`; do
        db_line=$line
        line=${line##*([[:space:]])}
        line=${line%%*([[:space:]])}
        line="${line//\'/}"
        $ECHO "alter dbspace IQ_SYSTEM_TEMP" > ${ENIQ_ADMIN_DIR}/sql/remove_temp_dbspace.sql
        $ECHO "drop file ${line}" >> ${ENIQ_ADMIN_DIR}/sql/remove_temp_dbspace.sql
        su - dcuser -c "${IQDIR}/bin64/dbisql @${conn_str_reader_enc_} -q ${ENIQ_ADMIN_DIR}/sql/remove_temp_dbspace.sql" >> /dev/null 2>&1
    done
fi

"run_remote_cmd" "dwh_reader_${reader_number}" "su - dcuser -c 'stop_iq -stop all'" >> /dev/null 2>&1
"run_remote_cmd" "dwh_reader_${reader_number}" "bash ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh -a start -s dwh_reader -N"
rm -rf ${conn_str_reader_enc_}
}

### Function: update_deployment_type ###
#
#   Change the Deployment Type file
#   
#
# Arguments:
#       $1 : Error message from Deployment chnage function
# Return Values:
#       none
update_deployment_type(){

blade_change_flag=0

## Make backup of deployment file on CO blade
if ! $SUDO $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment ${ENIQ_CONF_DIR}/extra_params/deployment.bkp; then
     _err_msg_="Could not make backup of ${ENIQ_CONF_DIR}/extra_params/deployment file" | $TEE -a "${LOGFILE}"
     abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
fi


$ECHO "------------------------------------------------------------------\n" | $TEE -a "${LOGFILE}"
$ECHO "Updating the Deployment Type File\n" | $TEE -a "${LOGFILE}"
$ECHO "Target Deployment Type: ${target_deployed}\n" | $TEE -a "${LOGFILE}"

## Change the deployment type to target on CO
if ! $ECHO "${target_deployed}" | $SUDO $TEE ${ENIQ_CONF_DIR}/extra_params/deployment >> /dev/null; then
    blade_change_flag=0
    update_deployment_type_failed
fi
$ECHO "Successfully updated deployment type file to "${target_deployed}" on Coordinator Server" | $TEE -a "${LOGFILE}"
$RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp  >> /dev/null 2>&1

if [ "${CURR_SERVER_TYPE}" == "stats_coordinator" ]; then
    if [ "${_user_root}" == 1 ]; then
    ## Make backup of deployment file on RD1 blade
        if ! run_remote_cmd "${_reader1_host_}" "$CP -p ${ENIQ_CONF_DIR}/extra_params/deployment ${ENIQ_CONF_DIR}/extra_params/deployment.bkp"; then
            _err_msg_="Could not make backup of ${ENIQ_CONF_DIR}/extra_params/deployment on Reader 1 Server" | $TEE -a "${LOGFILE}"
            abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        fi
    ## Change the deployment type to target on RD1
        if ! run_remote_cmd "${_reader1_host_}" "$ECHO "${target_deployed}" > ${ENIQ_CONF_DIR}/extra_params/deployment" >> /dev/null; then
            blade_change_flag=1
            update_deployment_type_failed
        fi
        $ECHO "Successfully updated deployment type file to "${target_deployed}" on Reader-1 Server" | $TEE -a "${LOGFILE}"
        run_remote_cmd "${_reader1_host_}" "$RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp"  >> /dev/null 2>&1
    ## Make backup of deployment file on RD2 blade
        if ! run_remote_cmd "${_reader2_host_}" "$CP -p ${ENIQ_CONF_DIR}/extra_params/deployment ${ENIQ_CONF_DIR}/extra_params/deployment.bkp"; then 
            _err_msg_="Could not make backup of ${ENIQ_CONF_DIR}/extra_params/deployment on Reader-2 Server" | $TEE -a "${LOGFILE}"
             abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        fi
    ## Change the deployment type to target on RD2
        if ! run_remote_cmd "${_reader2_host_}" "$ECHO "${target_deployed}" > ${ENIQ_CONF_DIR}/extra_params/deployment" >> /dev/null; then
            blade_change_flag=2
            update_deployment_type_failed
        fi
        $ECHO "Successfully updated deployment type file to "${target_deployed}" on Reader-2 Server" | $TEE -a "${LOGFILE}"
        run_remote_cmd "${_reader2_host_}" "$RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp"  >> /dev/null 2>&1
    ## Make backup of deployment file on Engine blade
        if ! run_remote_cmd "${_engine_host_}" "$CP -p ${ENIQ_CONF_DIR}/extra_params/deployment ${ENIQ_CONF_DIR}/extra_params/deployment.bkp"; then 
            _err_msg_="Could not make backup of ${ENIQ_CONF_DIR}/extra_params/deployment on Engine Server" | $TEE -a "${LOGFILE}"
             abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        fi
    ## Change the deployment type to target on Engine
        if ! run_remote_cmd "${_engine_host_}" "$ECHO "${target_deployed}" > ${ENIQ_CONF_DIR}/extra_params/deployment" >> /dev/null; then
            blade_change_flag=3
            update_deployment_type_failed
        fi
        $ECHO "Successfully updated deployment type file to "${target_deployed}" on Engine Server" | $TEE -a "${LOGFILE}"
        run_remote_cmd "${_engine_host_}" "$RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp"  >> /dev/null 2>&1
    else
    ## Make backup of deployment file on RD1 blade
        if ! run_remote_cmd "${_reader1_host_}" "$SUDO $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment ${ENIQ_CONF_DIR}/extra_params/deployment.bkp" "" "$_get_id_"; then
            _err_msg_="Could not make backup of ${ENIQ_CONF_DIR}/extra_params/deployment on Reader-1 Server" | $TEE -a "${LOGFILE}"
            abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        fi
    ## Change the deployment type to target on RD1
        if ! run_remote_cmd "${_reader1_host_}" "$ECHO "${target_deployed}" | $SUDO $TEE ${ENIQ_CONF_DIR}/extra_params/deployment" "" "$_get_id_"; then
            blade_change_flag=1
            update_deployment_type_failed
        fi
        $ECHO "Successfully updated deployment type file to "${target_deployed}" on Reader-1 Server" | $TEE -a "${LOGFILE}"
        run_remote_cmd "${_reader1_host_}" "$SUDO $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp" "" "$_get_id_" >> /dev/null 2>&1
    ## Make backup of deployment file on RD2 blade
        if ! run_remote_cmd "${_reader2_host_}" "$SUDO $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment ${ENIQ_CONF_DIR}/extra_params/deployment.bkp" "" "$_get_id_"; then 
            _err_msg_="Could not make backup of ${ENIQ_CONF_DIR}/extra_params/deployment on Reader-2 Server" | $TEE -a "${LOGFILE}"
             abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        fi
    ## Change the deployment type to target on RD2
        if ! run_remote_cmd "${_reader2_host_}" "$ECHO "${target_deployed}" | $SUDO $TEE ${ENIQ_CONF_DIR}/extra_params/deployment" "" "$_get_id_"; then
            blade_change_flag=2
            update_deployment_type_failed
        fi
        $ECHO "Successfully updated deployment type file to "${target_deployed}" on Reader-2 Server" | $TEE -a "${LOGFILE}"
        run_remote_cmd "${_reader2_host_}" "$SUDO $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp" "" "$_get_id_" >> /dev/null 2>&1
    ## Make backup of deployment file on Engine blade
        if ! run_remote_cmd "${_engine_host_}" "$SUDO $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment ${ENIQ_CONF_DIR}/extra_params/deployment.bkp" "" "$_get_id_"; then 
            _err_msg_="Could not make backup of ${ENIQ_CONF_DIR}/extra_params/deployment on Engine Server" | $TEE -a "${LOGFILE}"
             abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
        fi
    ## Change the deployment type to target on Engine
        if ! run_remote_cmd "${_engine_host_}" "$ECHO "${target_deployed}" | $SUDO $TEE ${ENIQ_CONF_DIR}/extra_params/deployment" "" "$_get_id_"; then
            blade_change_flag=3
            update_deployment_type_failed
        fi
        $ECHO "Successfully updated deployment type file to "${target_deployed}" on Engine Server" | $TEE -a "${LOGFILE}"
        run_remote_cmd "${_engine_host_}" "$SUDO $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp" "" "$_get_id_" >> /dev/null 2>&1
	fi
fi

}

### Function: update_deployment_type_failed ###
#
#   Revert configurattion file when Deplyoment
#   Change fails
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
update_deployment_type_failed(){

if [ $blade_change_flag == 0 ]; then
# If Deployment file update failed on CO, revert all the changes
    $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment
    $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp  >> /dev/null 2>&1
    _err_msg_="Reverting to ${ENIQ_CONF_DIR}/extra_params/deployment.bkp to ${ENIQ_CONF_DIR}/extra_params/deployment on "${CURR_SERVER_TYPE}"" | $TEE -a "${LOGFILE}"
    abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
elif [ $blade_change_flag == 1 ]; then
# If Deployment file update failed on RD1, revert all the changes
    $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment
    $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp  >> /dev/null 2>&1
    _err_msg_="${ENIQ_CONF_DIR}/extra_params/deployment reverted back on "${CURR_SERVER_TYPE}"" | $TEE -a "${LOGFILE}"
    _err_msg_="Reverting the ${ENIQ_CONF_DIR}/extra_params/deployment from RD1..." | $TEE -a "${LOGFILE}"
    if [ "${_user_root}" == 1 ]; then
        run_remote_cmd "${_reader1_host_}" "$CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment"
        run_remote_cmd "${_reader1_host_}" "$RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp"  >> /dev/null 2>&1
    else
        run_remote_cmd "${_reader1_host_}" "$SUDO $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment" "" "$_get_id_"
        run_remote_cmd "${_reader1_host_}" "$SUDO $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp" "" "$_get_id_"  >> /dev/null 2>&1
    fi
    abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
elif [ $blade_change_flag == 2 ]; then
# If Deployment file update failed on RD2, revert all the changes
    $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment
    $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp  >> /dev/null 2>&1
    _err_msg_="${ENIQ_CONF_DIR}/extra_params/deployment reverted back on CO" | $TEE -a "${LOGFILE}"
    if [ "${_user_root}" == 1 ]; then
        run_remote_cmd "${_reader1_host_}" "$CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment"
        run_remote_cmd "${_reader1_host_}" "$RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp"  >> /dev/null 2>&1
    else
        run_remote_cmd "${_reader1_host_}" "$SUDO $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment" "" "$_get_id_"
        run_remote_cmd "${_reader1_host_}" "$SUDO $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp" "" "$_get_id_"  >> /dev/null 2>&1
    fi
    _err_msg_="${ENIQ_CONF_DIR}/extra_params/deployment reverted back on RD1" | $TEE -a "${LOGFILE}"
    if [ "${_user_root}" == 1 ]; then
        run_remote_cmd "${_reader2_host_}" "$CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment"
        run_remote_cmd "${_reader2_host_}" "$RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp"  >> /dev/null 2>&1
    else
        run_remote_cmd "${_reader2_host_}" "$SUDO $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment" "" "$_get_id_"
        run_remote_cmd "${_reader2_host_}" "$SUDO $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp" "" "$_get_id_"  >> /dev/null 2>&1
    fi
    _err_msg_="${ENIQ_CONF_DIR}/extra_params/deployment reverted back on RD2" | $TEE -a "${LOGFILE}"
    abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
elif [ $blade_change_flag == 3 ]; then
# If Deployment file update failed on Engine, revert all the changes
    $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment
    $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp  >> /dev/null 2>&1
    _err_msg_="${ENIQ_CONF_DIR}/extra_params/deployment reverted back on CO" | $TEE -a "${LOGFILE}"
    if [ "${_user_root}" == 1 ]; then
        run_remote_cmd "${_reader1_host_}" "$CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment"
        run_remote_cmd "${_reader1_host_}" "$RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp"  >> /dev/null 2>&1
    else
        run_remote_cmd "${_reader1_host_}" "$SUDO $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment" "" "$_get_id_"
        run_remote_cmd "${_reader1_host_}" "$SUDO $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp" "" "$_get_id_"  >> /dev/null 2>&1
    fi
    _err_msg_="${ENIQ_CONF_DIR}/extra_params/deployment reverted back on RD1" | $TEE -a "${LOGFILE}"
    if [ "${_user_root}" == 1 ]; then
        run_remote_cmd "${_reader2_host_}" "$CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment"
        run_remote_cmd "${_reader2_host_}" "$RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp"  >> /dev/null 2>&1
    else
        run_remote_cmd "${_reader2_host_}" "$SUDO $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment" "" "$_get_id_"
        run_remote_cmd "${_reader2_host_}" "$SUDO $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp" "" "$_get_id_"  >> /dev/null 2>&1
    fi
    _err_msg_="${ENIQ_CONF_DIR}/extra_params/deployment reverted back on RD2" | $TEE -a "${LOGFILE}"
    if [ "${_user_root}" == 1 ]; then
        run_remote_cmd "${_engine_host_}" "$CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment"
        run_remote_cmd "${_engine_host_}" "$RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp"  >> /dev/null 2>&1
    else
        run_remote_cmd "${_engine_host_}" "$SUDO $CP -p ${ENIQ_CONF_DIR}/extra_params/deployment.bkp ${ENIQ_CONF_DIR}/extra_params/deployment" "" "$_get_id_"
        run_remote_cmd "${_engine_host_}" "$SUDO $RM -rf ${ENIQ_CONF_DIR}/extra_params/deployment.bkp" "" "$_get_id_"  >> /dev/null 2>&1
    fi
    _err_msg_="${ENIQ_CONF_DIR}/extra_params/deployment reverted back on Engine" | $TEE -a "${LOGFILE}"
    abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
else
    _err_msg_="Deployment file update failed with unknown error" | $TEE -a "${LOGFILE}"
    abort_script "$_err_msg_" | $TEE -a "${LOGFILE}"
fi
}

### Function: snapshot_creation ###
#
#   To create snapshot
#   
#
# Arguments:
#       none
# Return Values:
#
snapshot_creation()
{
insert_header_footer head "Entering ENIQ DB Expansion stage - ${NEXT_STAGE}" "${LOGFILE}"

log_msg -q -s "Starting to Create Snapshot" -l "${LOGFILE}"
if [ ! -f "${ENIQ_BKUP_BIN_DIR}"/prep_eniq_snapshots.bsh ]; then
    _err_msg_ "Could not find prep_eniq_snapshots.bsh"
    abort_script "$_err_msg_"
fi
$BASH "${ENIQ_BKUP_BIN_DIR}"/prep_eniq_snapshots.bsh -N
snapshot_done_exe_check=$?
if [ $snapshot_done_exe_check -ne 0 ]; then
    _err_msg_="ERROR: Could not create snapshot."
    abort_script "$_err_msg_"
else
    log_msg -s  "Successfully created snapshot." -l "${LOGFILE}"

fi
insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}"
set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
}

### Function: server_nas_value ###
#
#   Checks for tNAS value on server
#
# Arguments:
#       none
# Return Values:
#       none
server_nas_value()
{
server_nas_v=`. ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib; iniget NAS_DETAILS -f ${ENIQ_CONF_DIR}/SunOS.ini -v NAS_Primary_Storage_Pool`
nas_v=$( /ericsson/storage/bin/nascli filestore_cmd storage pool free | $GREP "$server_nas_v" | $AWK '{print$3}' | $GREP -oE '[0-9.]+')
nas_v=$($ECHO "scale=1; $nas_v * 1024" | bc)
}

### Function: server_san_value ###
#
#   Checks for SAN value on server
#
# Arguments:
#       none
# Return Values:
#       none
server_san_value()
{
mpath_val=$(iniget SunOS_FS_POOL_1 -f "${ENIQ_CONF_DIR}"/SunOS.ini -v disk_layout)
_mpath_lun_san_exe_status_=$?
if [ $_mpath_lun_san_exe_status_ -ne 0 ]; then
    _err_msg_="Unable to get allocated EXt4 LUN on Coordinator server"
    abort_script "$_err_msg_"
fi
lunid=$($BLKCLI | $GREP -w "$mpath_val" | $AWK -F ";" '{print $1}')
_mpath_lun_san_id_exe_status_=$?
if [ $_mpath_lun_san_id_exe_status_ -ne 0 ]; then
    _err_msg_="Unable to get allocated EXt4 LUN ID on Coordinator server"
    abort_script "$_err_msg_"
fi
en=$(uemcli -d "$SPA_IP" /stor/prov/luns/lun -id "$lunid" show -detail | $GREP -w "Storage pool" | tail -1 | $AWK -F "= " '{print $2}')
_mpath_lun_san_id_pool_exe_status_=$?
if [ $_mpath_lun_san_id_pool_exe_status_ -ne 0 ]; then
    _err_msg_="Unable to get allocated Pool for EXt4 LUN"
    abort_script "$_err_msg_"
fi
san_v=$(uemcli -d "$SPA_IP" /stor/config/pool -name "$en" show -detail | $GREP -i "Total space" | $AWK '{print$5}' | $GREP -oP '[0-9.]+')
_space_pool_exe_status_=$?
if [ $_space_pool_exe_status_ -ne 0 ]; then
    _err_msg_="Unable to get allocated $en Pool size"
    abort_script "$_err_msg_"
fi
san_v=$($ECHO "scale=1; $san_v * 1024" | bc)
}

### Function: start_services ###
#
# To enable the ENIQ services across the deployment
#
# Arguments:
#    none
# Return Values:
#     none
start_services()
{
log_msg -q -h -s "Starting ENIQ services" -l "${LOGFILE}"
local _check_command_="${ENIQ_ADMIN_BIN_DIR}/manage_deployment_services.bsh"
check_for_file -s "${_check_command_}"

log_msg -q -s "Starting to run $BASH ${_check_command_} -a start -s ALL -N" -l "${LOGFILE}"
$BASH "${_check_command_}" -a start -s ALL -N
if [ $? -ne 0 ]; then
    _err_msg_="Exiting... Unable to start services \n"
    abort_script "$_err_msg_"
fi

log_msg -q -s "Successfully started ENIQ services" -l "${LOGFILE}"
}

### Function: stop_eniq_services ###
#
# To disable the ENIQ services across the deployment
#
# Arguments:
# none
# Return Values:
#  none
stop_eniq_services(){
insert_header_footer head "Entering ENIQ DB Expansion stage - ${NEXT_STAGE}" "${LOGFILE}"

#Function call for stopping eniq services
stop_services

insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}" | $TEE -a "${LOGFILE}"
set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
}

### Function: stop_services ###
#
# To disable the ENIQ services across the deployment
#
# Arguments:
# none
# Return Values:
#  none
stop_services()
{
log_msg -q -h -s "Stopping ENIQ services" -l "${LOGFILE}"

local _check_command_="${ENIQ_ADMIN_BIN_DIR}/manage_deployment_services.bsh"
check_for_file -s "${_check_command_}"

log_msg -q -s "Starting to run $BASH ${_check_command_} -a stop -s ALL -N" -l "${LOGFILE}"
$BASH "${_check_command_}" -a stop -s ALL -N
stp_eniq_service_exe_check=$?
if [ $stp_eniq_service_exe_check -ne 0 ]; then
    _err_msg_="Exiting... Unable to stop services \n"
    abort_script "$_err_msg_"
fi

log_msg -q -s "Successfully stopped ENIQ services" -l "${LOGFILE}"
}

### Function: stop_rollsnap_services ###
#
# To stop the ENIQ rollsnap services across the deployment
#
# Arguments:
#    none
# Return Values:
#     none
stop_rollsnap_services()
{
insert_header_footer head "Entering ENIQ DB Expansion stage - ${NEXT_STAGE}" "${LOGFILE}"
log_msg -q -h -s "Stopping ROLL-SNAP services" -l "${LOGFILE}"

local _check_command_="${ENIQ_ADMIN_BIN_DIR}/manage_deployment_services.bsh"
check_for_file -s "${_check_command_}"

log_msg -q -s "Starting to run $BASH ${_check_command_} -a stop -s roll-snap" -l "${LOGFILE}"
$BASH "${_check_command_}" -a stop -s roll-snap -N
roll_snap_down_exe_check=$?
if [ $roll_snap_down_exe_check -ne 0 ]; then
    _err_msg_="Exiting... Unable to stop services \n"
    abort_script "$_err_msg_"
fi

log_msg -q -s "Successfully stopped ROLL-SNAP services" -l "${LOGFILE}"
insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}" | $TEE -a "${LOGFILE}"
set_next_stage $($EXPR "${ARRAY_ELEM}"+1)
}

### Function: remove_tmp_file ###
#
#   Check the current configuration type of the server from the attached luna dn size.
#
# Arguments:
#       none
# Return Values:
#       none
remove_tmp_file()
{
_temp_files_="${TEM_DIR}/san_details.txt
${TEM_DIR}/main_lun
${TEM_DIR}/san_details_RD1
${TEM_DIR}/san_details_RD2
${TEM_DIR}/san_details_alu.txt
${TEM_DIR}/disk_lun_id
${TEM_DIR}/disk_tmp_lun_id
${TEM_DIR}/tmp_lun
${VAR_TMP_DIR}/Available_luns.txt
${VAR_TMP_DIR}/Allocated_luns.txt
${VAR_TMP_DIR}/maindb_UnAllocated.txt
${VAR_TMP_DIR}/UnAllocated_luns_mpath.txt
${VAR_TMP_DIR}/lun_id.txt
${VAR_TMP_DIR}/lun_size.txt
${VAR_TMP_DIR}/sys_maindb_UnAllocated.txt
${VAR_TMP_DIR}/tmpdb_UnAllocated.txt
${VAR_TMP_DIR}/UnAllocated_luns_mpath_RD2.txt
${VAR_TMP_DIR}/UnAllocated_luns_mpath_RD1.txt
${VAR_TMP_DIR}/alllun_id_RD1.txt
${VAR_TMP_DIR}/alllun_id_RD2.txt
${VAR_TMP_DIR}/Available_luns_RD1.txt
${VAR_TMP_DIR}/Available_luns_RD2.txt
${VAR_TMP_DIR}/Allocated_luns_mpath_RD1.txt
${VAR_TMP_DIR}/Allocated_luns_mpath_RD2.txt
${VAR_TMP_DIR}/tmplun_size_RD1.txt
${VAR_TMP_DIR}/tmplun_size_RD2.txt
${VAR_TMP_DIR}/tmpdb_UnAllocated_RD1.txt
${VAR_TMP_DIR}/tmpdb_UnAllocated_RD2.txt
${VAR_TMP_DIR}/Available_Rd1_lun_id.txt
${VAR_TMP_DIR}/Available_Rd2_lun_id.txt
${VAR_TMP_DIR}/new_maindb_unallocated.txt
${VAR_TMP_DIR}/ram_check_output
${VAR_TMP_DIR}/count.txt
${VAR_TMP_DIR}/database_check_output
/var/tmp/hostnames.txt
/var/tmp/tmp.txt"

for _file_ in ${_temp_files_}; do
    if [ -f "${_file_}" ]; then
        log_msg -t -q -s "Deleting ${_file_} file" -l "${LOGFILE}"
        $RM -rf ${_file_} >> /dev/null 2>&1
    fi
done
}

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{

if [ ! "${ENIQ_BASE_DIR}" ]; then
    # Directory on the root filesystem
    ENIQ_BASE_DIR=/eniq
fi

# ENIQ ADMIN Directory
ENIQ_ADMIN_DIR=${ENIQ_BASE_DIR}/admin

# ENIQ ADMIN Directory
ENIQ_ADMIN_BIN_DIR=${ENIQ_ADMIN_DIR}/bin

# ENIQ Log Directory
ENIQ_LOG_DIR=${ENIQ_BASE_DIR}/local_logs


# ENIQ SW conf
CLI_CONF_DIR=${ENIQ_BASE_DIR}/sw/conf

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

#ENIQ_CONF_DIR
ENIQ_CONFIG_DIR=${ENIQ_INST_DIR}/config

# Main Directory for the Core Installation SW
ENIQ_CORE_INST_DIR=${ENIQ_INST_DIR}/core_install

# ENIQ Config Directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

#ENIQ DATABASE directory
ENIQ_DB_DIR=${ENIQ_BASE_DIR}/database

#ENIQ_SW_CONF_DIR
ENIQ_SW_CONF_DIR=${ENIQ_BASE_DIR}/sw/conf

#ENIQ_bakup_bin_DIR
ENIQ_BKUP_BIN_DIR=/eniq/bkup_sw/bin/

server_type=$($CAT /eniq/installation/config/installed_server_type)
ENIQ_LIB_DIR=/eniq/installation/core_install/lib
TEMP_DIR=/var/tmp
INSTALLED_SERVER_TYPE=/eniq/installation/config/installed_server_type

# File containing the type of OSS installation. Eg. events or statistics
INST_TYPE_FILE=${ENIQ_CONF_DIR}/ericsson_use_config
if [ ! -s "${INST_TYPE_FILE}" ]; then
    _err_msg_="ENIQ install type not defined in ${INST_TYPE_FILE}"
    abort_script "${_err_msg_}"  "${EXEC_SHELL_CMD}"
fi

# Var Tem dir
VAR_TMP_DIR=/var/tmp

CURR_SERVER_TYPE=$($CAT "$ENIQ_CONF_DIR"/installed_server_type | $EGREP -v '^[[:blank:]]*#' | $SED -e 's/ //g')
if [ ! "${CURR_SERVER_TYPE}" ]; then
    _err_msg_="Could not determine which server type this is"
    abort_script "$_err_msg_"
fi

PORT_PING=${ENIQ_CORE_INST_DIR}/lib/port_ping.pl
if [ ! -x "$PORT_PING" ]; then
    _err_msg_="$PORT_PING not found or not executable"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi


#san details file 
SAN_DETAILS=${ENIQ_CONF_DIR}/san_details
STORAGE_TYPE=$($CAT "$SAN_DETAILS" | $EGREP "STORAGE_TYPE=" | $CUT -d "=" -f2)
if [ "${STORAGE_TYPE}" != "fs" ]; then 
    SAN_DEVICE=$($CAT "$SAN_DETAILS" | $EGREP "SAN_DEVICE=" | $CUT -d "=" -f2)
fi

# Source the common functions
if [ -s "${ENIQ_CORE_INST_DIR}"/lib/common_functions.lib ]; then
    . "${ENIQ_CORE_INST_DIR}"/lib/common_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/lib/common_functions.lib not found"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

if [ -s "${ENIQ_CORE_INST_DIR}"/lib/common_core_install_functions.lib ]; then
    . "${ENIQ_CORE_INST_DIR}"/lib/common_core_install_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/lib/common_core_install_functions.lib not found"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

if [ -s "${ENIQ_CORE_INST_DIR}"/lib/common_inirator_functions.lib ]; then
    . "${ENIQ_CORE_INST_DIR}"/lib/common_inirator_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/lib/common_inirator_functions.lib not found"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi


#DB Expansion conf file
ENIQ_TEMP_STATS=${ENIQ_CORE_INST_DIR}/templates/stats
DB_CONF=${ENIQ_TEMP_STATS}/db_exp.conf

HNAME=$(${MYHOSTNAME})

_sysuser_=$(iniget ENIQ_INSTALL_CONFIG -f "${ENIQ_CONF_DIR}"/SunOS.ini -v ENIQ_SYSUSER)

# Has debug flag been used?
if [ -s "${ENIQ_CONF_DIR}"/extra_params/debug ]; then
    set -xv
    BASH="/usr/bin/bash -xv"
fi


#Script check
if [ -s "${ENIQ_CORE_INST_DIR}"/lib/get_ip_order.pl ]; then
    GET_IP_ORDER_SCRIPT=${ENIQ_CORE_INST_DIR}/lib/get_ip_order.pl
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/lib/get_ip_order.pl not found"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi
# Get an ordered list of servers based on the server_list file to reallocate the memory:
_deployed_servers_="${TEM_DIR}/deployed_servers.$$.tmp"
$PERL "${GET_IP_ORDER_SCRIPT}" -f "${_deployed_servers_}"

#Forming connection string
DBISQL="$(ls /eniq/sybase_iq/IQ-*/bin64/dbisql)"
if [ ! -x "$DBISQL" ]; then
    _err_msg_="$DBISQL commands not found or not executable."
    abort_script "${_err_msg_}"
fi

# Get DBA Password
DBA_PASSWORD=$(inigetpassword DB -f "${CLI_CONF_DIR}"/"${ENIQ_INI}" -v DBAPassword)
if [ ! "${DBA_PASSWORD}" ]; then
    _err_msg_="Could not get DBA Password"
    abort_script "${_err_msg_}"
fi

# Get RepDB Port and ServerName Password
DB_PORT=$(iniget DWH -v PortNumber -f "${CLI_CONF_DIR}"/niq.ini)
DB_ENG=$(iniget DWH -v ServerName -f "${CLI_CONF_DIR}"/niq.ini)
if [ ! "${DB_PORT}" ] || [ ! "${DB_ENG}" ]; then
    _err_msg_="Could not read db values from ${CLI_CONF_DIR}/${ENIQ_INI}"
    abort_script "$_err_msg_"
fi

#Initialising the connection string for dwhdb
db_connection_string="-c \"eng=${DB_ENG};links=tcpip{host=localhost;port=${DB_PORT}};uid=dba;pwd=${DBA_PASSWORD}\""
db_connection_string_enc=${VAR_TMP_DIR}/con_str_encrypt.txt.$$

# encrypt the connection string.
get_encrypt_file "${db_connection_string}" "${db_connection_string_enc}" >> /dev/null 2>&1 

#SAN commands
VNX_CRED=/ericsson/storage/san/plugins/vnx/cred

#blkcli command
BLKCLI="/ericsson/storage/san/bin/blkcli --action listluns"

#Precheck script
ENIQ_CHECKS_PATH=${ENIQ_CORE_INST_DIR}/eniq_checks/bin
HEALTHCHECK_SCRIPT=${ENIQ_CORE_INST_DIR}/eniq_checks/bin/eniq_checks.bsh
HEALTH_SUMMARY_DIR=${ENIQ_BASE_DIR}/log/precheck/summary

#fetch target config selected
if [ -s "${CLI_CONF_DIR}"/expansion_disp_file ]; then
    _supported_config_=$($CAT "${CLI_CONF_DIR}"/expansion_disp_file | $GREP -w "ENIQ Target Configuration Selected Type" | $AWK -F ": " '{print $2}')
fi
number_of_stages=$($CAT /eniq/installation/core_install/etc/eniq_db_expansion_stagelist | wc -w)

#check ip type of the server
check_ip_type
if [ ! "${_ip_type_}" ]; then
    _err_msg_="Could not read parameter _ip_type_ from file ${ENIQ_CONF_DIR}/${IPMP_INI}"
    abort_script "$_err_msg_"
fi

#Fetch ping command based on ip type
PING=$( check_ping)

}




check_sysmain_addition_status()
{
   status_file=/eniq/sw/conf/status_file.txt
   $SED -i s/"'"/""/g $status_file
   if [ -s ${status_file} ]; then
    sys_main_entry=`$CAT $status_file | grep -i "iq_system_main"`
    mode=`$ECHO $sys_main_entry | $AWK -F "," '{print $2}'`
        status=`$ECHO $sys_main_entry | $AWK -F "," '{print $3}'`
    
        if [[ "$mode" == "RW"  &&  "$status" == "T" ]]; then
           log_msg -s "RW mode and online status of ${sys_main_entry} is RW and T" -l "${LOGFILE}"
        else
           log_msg -s "RW mode and online status of ${sys_main_entry} is not RW and T" -l "${LOGFILE}"
        fi

   fi

}

add_sysmainDb()
{
insert_header_footer head "Entering ENIQ DB Expansion stage - ${NEXT_STAGE}" "${LOGFILE}"

if [ "${SAN_DEVICE}" == "unityXT" ]; then
    log_msg -s "Skipping execution, as not required for Multi-Rack Deployment" -l "${LOGFILE}"
elif [ "${SAN_DEVICE}" == "unity" ]; then
    log_msg -s "Replacing existing SysMain LUN on the server" -l "${LOGFILE}"
    DATABASE_QUERY="select DBFileName, RWMode, Online from sp_iqfile();"
    if [[ "$server_type" == "stats_coordinator" || "$server_type" == "eniq_stats" ]]; then
    #$ECHO "stats_coordinator"
    $BASH ${ENIQ_ADMIN_BIN_DIR}/manage_deployment_services.bsh -a stop -s ALL -N
    if [ "$server_type" == "stats_coordinator" ]; then
        log_msg -s "Changing database mode from multiplex to simplex" -l "${LOGFILE}"
        $CP -p ${ENIQ_DB_DIR}/dwh_main/dwhdb.cfg /var/tmp/dwh_main/dwhdb.cfg.exporig
        if [ $? -ne 0 ]; then
            _err_msg_="Unable to copy file /eniq/database/dwh_main/dwhdb.cfg"
            abort_script "$_err_msg_"
        fi
        $ECHO "-iqmpx_sn 1" | $TEE -a ${ENIQ_DB_DIR}/dwh_main/dwhdb.cfg
        $ECHO "-gm 1" | $TEE -a ${ENIQ_DB_DIR}/dwh_main/dwhdb.cfg
        $ECHO "-gd DBA" | $TEE -a ${ENIQ_DB_DIR}/dwh_main/dwhdb.cfg
    fi

    if [ ! -f ${ENIQ_ADMIN_BIN_DIR}/add_sysmain_successful ]; then
        $CP -p ${ENIQ_CONFIG_DIR}/sym_links.ini /var/tmp/sym_links.ini_exporig
        if [ $? -ne 0 ]; then
            _err_msg_="Could not copy ${ENIQ_CONFIG_DIR}/sym_links.ini file"
            abort_script "$_err_msg_"
        fi
        $CP -p /etc/udev/rules.d/99-iq-raw-devs.rules /var/tmp/99-iq-raw-devs.rules_orig
        if [ $? -ne 0 ]; then
            _err_msg_="Could not copy /etc/udev/rules.d/99-iq-raw-devs.rules file"
            abort_script "$_err_msg_"
        fi
        $BASH ${ENIQ_ADMIN_BIN_DIR}/exp_add_sysmain.bsh -c /eniq/installation/config -d ${ENIQ_CONFIG_DIR}/niq.ini -a automation
        if [ $? -eq 0 ]; then
            log_msg -s "Successfully replaced existing IQ SysMainDB on Coordinator Server." -l "${LOGFILE}"
            $TOUCH ${ENIQ_ADMIN_BIN_DIR}/add_sysmain_successful
        else
            if [ $server_type == "stats_coordinator" ]; then
                $CP -p /var/tmp/dwh_main/dwhdb.cfg.exporig /eniq/database/dwh_main/dwhdb.cfg
                $RM -rf /var/tmp/dwh_main/dwhdb.cfg.exporig
                $CP -p /var/tmp/sym_links.ini_exporig ${ENIQ_CONFIG_DIR}/sym_links.ini
                $RM -rf /var/tmp/sym_links.ini_exporig
                $CP -p /etc/udev/rules.d/99-iq-raw-devs.rules_orig /etc/udev/rules.d/99-iq-raw-devs.rules
                if [ $? -ne 0 ]; then
                    _err_msg_="Could not restore /etc/udev/rules.d/99-iq-raw-devs.rules file"
                    abort_script "$_err_msg_"
                fi
            fi
            _err_msg_="Failed to replace existing sysmain on the server, for more details referr ${LOG_DIR}/expansion/exp_add_sysmain.log"
            abort_script "$_err_msg_"
        fi
    fi
    
    if [ $server_type == "stats_coordinator" ]; then
        $CP -p /var/tmp/dwh_main/dwhdb.cfg.exporig ${ENIQ_DB_DIR}/dwh_main/dwhdb.cfg
        if [ $? -ne 0 ]; then
            _err_msg_="Unable to copy file ${ENIQ_DB_DIR}/dwh_main/dwhdb.cfg.exporing to ${ENIQ_DB_DIR}/dwh_main/dwhdb.cfg"
            abort_script "$_err_msg_"
        fi
        $RM -rf /var/tmp/dwh_main/dwhdb.cfg.exporig
    fi
    
    $BASH ${ENIQ_ADMIN_BIN_DIR}/manage_eniq_services.bsh -a start -s eniq-dwhdb -N
    Path=`iniget DWH_SYSTEM_MAIN_1 -f ${ENIQ_CONFIG_DIR}/sym_links.ini -v Path`
    Lun_ID=`iniget DWH_SYSTEM_MAIN_1 -f ${ENIQ_CONFIG_DIR}/sym_links.ini -v Lun_ID`
    Type=`iniget DWH_SYSTEM_MAIN_1 -f ${ENIQ_CONFIG_DIR}/sym_links.ini -v Type`
    Link=`iniget DWH_SYSTEM_MAIN_1 -f ${ENIQ_CONFIG_DIR}/sym_links.ini -v Link`
    WWN=`iniget DWH_SYSTEM_MAIN_1 -f ${ENIQ_CONFIG_DIR}/sym_links.ini -v WWN`
    
    if [ -z $Path ] || [ -z $Lun_ID ] || [ -z $Type ] || [ -z $Link ] || [ -z $WWN ]; then
         _err_msg_="Could not get required details from ${ENIQ_CONFIG_DIR}/sym_links.ini"
         abort_script "$_err_msg_"
    fi
    #Replace Existing IQ_SYSTEM_MAIN on Reader Server
    $PERL ${ENIQ_LIB_DIR}/get_ip_order.pl -f ${TEMP_DIR}/perl.txt
    for line in `$CAT ${TEMP_DIR}/perl.txt`;do 
        local _count_
        _count_=`$ECHO ${line} |$GREP -o "::" | $WC -l`
        if [ "${_ip_type_}" == "IPv6" ] && [ "${_count_}" == 3 ]; then
            _ip_address_=`$ECHO ${line}| $GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}'`
            _server_name_=`$ECHO $line | $AWK -F:: '{print $3}'`
            _server_type_=`$ECHO $line | $AWK -F:: '{print $4}'`
        else
            _ip_address_=`$ECHO $line | $AWK -F:: '{print $1}'`
            _server_name_=`$ECHO $line | $AWK -F:: '{print $2}'`
            _server_type_=`$ECHO $line | $AWK -F:: '{print $3}'`	
        fi
        if [ "${_server_type_}" == "dwh_reader_1" ] || [ "${_server_type_}" == "dwh_reader_2" ]; then
            $PING -c1 ${_ip_address_} > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                $ECHO "Executing on ${_server_type_}"
                run_remote_cmd "${_server_name_}" "cp -p ${ENIQ_CONFIG_DIR}/coordinator_sym_links.ini /var/tmp/coordinator_sym_links.ini.exporig"
                if [ $? -ne 0 ]; then
                    _err_msg_="Unable to copy ${ENIQ_CONFIG_DIR}/coordinator_sym_links.ini file"
                    abort_script "$_err_msg_"
                fi
                run_remote_cmd "${_server_name_}" "cp ${ENIQ_SW_CONF_DIR}/coordinator_sym_links.ini ${ENIQ_CONFIG_DIR}/coordinator_sym_links.ini"
                if [ $? -ne 0 ]; then
                    _err_msg_="Unable to copy ${ENIQ_SW_CONF_DIR}/coordinator_sym_links.ini file"
                    abort_script "$_err_msg_"
                fi
                run_remote_cmd "${_server_name_}" "cp -p ${ENIQ_CONFIG_DIR}/sym_links.ini /var/tmp/sym_links.ini.exporig"
                if [ $? -ne 0 ]; then
                    _err_msg_="Unable to copy ${ENIQ_CONFIG_DIR}/sym_links.ini file"
                    abort_script "$_err_msg_"
                fi
                run_remote_cmd "${_server_name_}" "source ${ENIQ_LIB_DIR}/common_functions.lib; iniset DWH_SYSTEM_MAIN_1 -f ${ENIQ_CONFIG_DIR}/sym_links.ini Lun_ID=${Lun_ID}"
                if [ $? -ne 0 ]; then
                    _err_msg_="Unable to update Lun_ID of DWH_SYSTEM_MAIN_1 in /eniq/installation/config/sym_links.ini file"
                    abort_script "$_err_msg_"
                fi
                run_remote_cmd "${_server_name_}" "source ${ENIQ_LIB_DIR}/common_functions.lib; iniset DWH_SYSTEM_MAIN_1 -f ${ENIQ_CONFIG_DIR}/sym_links.ini Path=${Path}"
                if [ $? -ne 0 ]; then
                    _err_msg_="Unable to update Path of DWH_SYSTEM_MAIN_1 in ${ENIQ_CONFIG_DIR}/sym_links.ini file"
                    abort_script "$_err_msg_"
                fi
                Disk=`run_remote_cmd "${_server_name_}" "/ericsson/storage/san/bin/blkcli --action listluns" | grep "$Lun_ID" | awk -F ";" '{print $2}'`
                mpath=`$ECHO $Disk"1"`
                run_remote_cmd "${_server_name_}" "source ${ENIQ_LIB_DIR}/common_functions.lib; iniset DWH_SYSTEM_MAIN_1 -f ${ENIQ_CONFIG_DIR}/sym_links.ini Disk=${mpath}"
                if [ $? -ne 0 ]; then
                    _err_msg_="Unable to update Disk of DWH_SYSTEM_MAIN_1 in ${ENIQ_CONFIG_DIR}/sym_links.ini file"
                    abort_script "$_err_msg_"
                fi
                run_remote_cmd "${_server_name_}" "source ${ENIQ_LIB_DIR}/common_functions.lib; iniset DWH_SYSTEM_MAIN_1 -f ${ENIQ_CONFIG_DIR}/sym_links.ini Link=${Link}"
                if [ $? -ne 0 ]; then
                    _err_msg_="Unable to update Link of DWH_SYSTEM_MAIN_1 in ${ENIQ_CONFIG_DIR}/sym_links.ini file"
                    abort_script "$_err_msg_"
                fi
                run_remote_cmd "${_server_name_}" "source ${ENIQ_LIB_DIR}/common_functions.lib; iniset DWH_SYSTEM_MAIN_1 -f ${ENIQ_CONFIG_DIR}/sym_links.ini Type=${Type}"
                if [ $? -ne 0 ]; then
                    _err_msg_="Unable to update Type of DWH_SYSTEM_MAIN_1 in ${ENIQ_CONFIG_DIR}/sym_links.ini file"
                    abort_script "$_err_msg_"
                fi
                run_remote_cmd "${_server_name_}" "source ${ENIQ_LIB_DIR}/common_functions.lib; iniset DWH_SYSTEM_MAIN_1 -f ${ENIQ_CONFIG_DIR}/sym_links.ini WWN=${WWN}"
                if [ $? -ne 0 ]; then
                    _err_msg_="Unable to update WWN of DWH_SYSTEM_MAIN_1 in ${ENIQ_CONFIG_DIR}/sym_links.ini file"
                    abort_script "$_err_msg_"
                fi
                run_remote_cmd "${_server_name_}" "source ${ENIQ_LIB_DIR}/common_functions.lib; iniset  DB_DISK_ALLOC -f ${ENIQ_CONFIG_DIR}/sym_links.ini IQ_SYS_MAIN_DISKS=${Disk}"
                if [ $? -ne 0 ]; then
                    _err_msg_="Unable to update IQ_SYS_MAIN_DISKS in ${ENIQ_CONFIG_DIR}/sym_links.ini file"
                    abort_script "$_err_msg_"
                fi
                run_remote_cmd "${_server_name_}" "bash /eniq/installation/core_install/bin/eniq_core_install.bsh -s create_db_sym_links -n" >> /dev/null 2>&1
                if [ $? -ne 0 ]; then
                    _err_msg_="Unable to create db symlinks"
                    abort_script "$_err_msg_"
                fi
                count=`run_remote_cmd "${_server_name_}" "ls -lart ${ENIQ_DB_DIR}/dwh_main_dbspace/" | grep "iq_system_main" | wc -l`
                if [ $count -ge 2 ]; then
                    sysmain_link=`run_remote_cmd "${_server_name_}" "ls -lart ${ENIQ_DB_DIR}/dwh_main_dbspace/" | grep "iq_system_main" | awk '{print $9}' | tail -1`
                    run_remote_cmd "${_server_name_}" "find ${ENIQ_DB_DIR}/dwh_main_dbspace/" | grep "iq_system_main" | grep -v $sysmain_link > /var/tmp/file_list.txt
                    $CAT /var/tmp/file_list.txt |  tr -d '\r' > /var/tmp/file_list_final.txt                  
                    for line1 in `cat /var/tmp/file_list_final.txt`; do
                        run_remote_cmd "${_server_name_}" "rm -rf $line1"
                        if [ $? -eq 0 ]; then
                            log_msg -s "Successfully deleted DB file $line1" -l "${LOGFILE}"
                        else
                            log_msg -s "Could not delete DB file $line1" -l "${LOGFILE}"
                        fi
                    done
                fi
            else
                    _err_msg_="Ping failed to ${_ip_address_}"
                    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
            fi
        fi
    done
fi
fi
# Add flag
$ECHO "\n[status_sysmaindb]" >> "${CLI_CONF_DIR}"/expansion_disp_file
$ECHO "sysmain_status=1" >> "${CLI_CONF_DIR}"/expansion_disp_file
insert_header_footer foot "Successfully completed - ${NEXT_STAGE}." "${LOGFILE}"
set_next_stage `$EXPR "${ARRAY_ELEM}"+1`

}

# ********************************************************************
#
#   Main body of program
#
# ********************************************************************
#

RUN_TIME=`$DATE '+%Y-%b-%d_%H.%M.%S'`

# Determine absolute path to software
get_absolute_path

# Set up environment variables for script.
setup_env

# Check that the effective id of the user is root
check_id 


while getopts ":l:s:n:" arg; do
  case $arg in
    l) LOGFILE="$OPTARG"
       ;;
    s) USER_STAGE="$OPTARG"
       ;;
    n) NO_RESET_STAGE="YES"
       ;;
   \?) _err_msg_="$($BASENAME "$0") -s <stage>"
       abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
       ;;
  esac
done
shift $(expr $OPTIND - 1)


# Log file
if [ ! "${LOGFILE}" ]; then
    $MKDIR -p "${ENIQ_LOG_DIR}"/expansion
    LOGFILE="${ENIQ_LOG_DIR}/expansion/${HNAME}_expansion.log"
fi

# If log file doesn't exist, create log file
if [ ! -f "${LOGFILE}" ]; then
    $TOUCH "${LOGFILE}"
    if [ $? -ne 0 ]; then
        _err_msg_="Could not make log file"
        abort_script "$_err_msg_"
    fi


    $ECHO "Changing permission of the ${LOGFILE} to 644" | $TEE -a "${LOGFILE}"
    $CHMOD 644 "${LOGFILE}"
    if [ $? -ne 0 ]; then
        _err_msg_="Could not change ${LOGFILE} file permissions to 644"
        abort_script "$_err_msg_"
    fi
fi

$ECHO "\n===================================" | $TEE -a "${LOGFILE}"
$ECHO "${RUN_TIME} - Executing DB Expansion " | $TEE -a "${LOGFILE}"
$ECHO "=====================================\n" | $TEE -a "${LOGFILE}"


# Create a temporary Directory
TEM_DIR=/tmp/expansion.$$.$$
if [ -d ${TEM_DIR} ]; then
    $RM -rf ${TEM_DIR}
    if [ $? -ne 0 ]; then
        _err_msg_="Could not delete directory $TEM_DIR. Please delete it manually."
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
    fi
fi

$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory $TEM_DIR"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

Var_TEM_DIR=/var/tmp/expansion.$$.$$
if [ -d ${Var_TEM_DIR} ]; then
    $RM -rf ${Var_TEM_DIR}
    if [ $? -ne 0 ]; then
        _err_msg_="Could not delete directory $TEM_DIR. Please delete it manually."
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
    fi
fi

$MKDIR -p ${Var_TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory $TEM_DIR"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi


#Code for san rollback
Rollback_EXP=/var/tmp/rollback_expansion
if [ -d ${Rollback_EXP} ]; then
    $RM -rf ${Rollback_EXP}
    if [ $? -ne 0 ]; then
        _err_msg_="Could not delete directory $TEM_DIR. Please delete it manually."
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
    fi
fi

$MKDIR -p ${Rollback_EXP}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory $TEM_DIR"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi
$CP  /eniq/installation/config/sym_links.ini ${Rollback_EXP}

#Fetch type of server
get_server_type

#Fetch SAN IP of server
if [ "${server_type}" != "SR" ]; then
    SPA_IP=$($CAT "${ENIQ_CONF_DIR}"/"$BLK_STOR_INI" | $GREP  "BLK_STORAGE_IP_SPA=" | $AWK -F "=" '{print $2}')
    if [ ! "${SPA_IP}" ]; then
        _err_msg_="Could not read ${BLK_STORAGE_IP_SPA} param from ${BLK_STOR_INI}"
        abort_script "$_err_msg_" 
    fi
fi
    
# File to hold current stage information
STAGEFILE=/eniq/installation/core_install/etc/current_eniq_db_expansion_stage

# Create a stage array
db_expansion_build_stage_array 
if [ $? -ne 0 ]; then
    _err_msg_="Could not build a stage array for ENIQ DB Expansion"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

# If specific stage specified, check if it is in the stage list for DB Expansion
if [ "$USER_STAGE" ]; then
    db_expansion_check_user_stage "${USER_STAGE}"
    if [ $? -ne 0 ]; then
       _err_msg_="The specified stage ${USER_STAGE} is not in the stage list for ENIQ DB Expansion"
       abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
    fi
fi

# Get the element number and next stage function so we can move along the array
if [ "$USER_STAGE" ]; then
    NEXT_STAGE="${USER_STAGE}"
    get_array_element
else
    get_next_stage
fi

# If we read cleanup from the stagefile
if [ "$NEXT_STAGE" == "cleanup" ]; then
    # We exit unless the user specified that the stage be run again
    if [ ! "$USER_STAGE" ]; then
        log_msg -s "All Stages are already completed" -l "${LOGFILE}"
        exit 0
    fi
fi

# Loop through the stages for DB Expansion
while :; do
    _nxt_stage_="${NEXT_STAGE}"
    $_nxt_stage_
    if [ $? -ne 0 ]; then
        _err_msg_="Error in Stage ${NEXT_STAGE}"
        abort_script "${_err_msg_}"
    fi

    # Exit if the user specified to run a specific stage only
    if [ "$USER_STAGE" ]; then
        break
    fi

    # If we read cleanup from the stagefile
    if [ "$NEXT_STAGE" == "cleanup" ]; then
        break
    fi

    get_next_stage
done

$RM -rf ${TEM_DIR}

exit 0



