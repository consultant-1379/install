#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2022 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : update_passwords.bsh
# Date    : 07/04/2022
# Revision: main/04
# Purpose : This script will specifically update the passwords of repdb users to default.
#
# Usage   : bash update_passwords.bsh
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************

AWK=/usr/bin/awk
BASH=/usr/bin/bash
CP=/usr/bin/cp
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO='/usr/bin/echo -e'
ENV=/usr/bin/env
ID=/usr/bin/id
LS=/usr/bin/ls
MKDIR=/usr/bin/mkdir
PWD=/usr/bin/pwd
RM=/usr/bin/rm
TEE=/usr/bin/tee
BASENAME=/usr/bin/basename
CAT=/usr/bin/cat
CLEAR=/usr/bin/clear
CP=/usr/bin/cp
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO=/usr/bin/echo
GREP=/usr/bin/grep
HEAD=/usr/bin/head
MYHOSTNAME=/usr/bin/hostname
GETENT=/usr/bin/getent
MKDIR=/usr/bin/mkdir
RM=/usr/bin/rm
SED=/usr/bin/sed
SORT=/usr/bin/sort
SLEEP=/usr/bin/sleep
SU=/usr/bin/su
SYSTEMCTL=/usr/bin/systemctl
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
TR=/usr/bin/tr
UNIQ=/usr/bin/uniq
# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************
# Name of SunOS & ENIQ ini Files
BLK_STOR_INI=block_storage.ini
ENIQ_ENV=niq.rc
ENIQ_INI=niq.ini
LUN_MAP_INI=lun_map.ini
RBAC_INI=RBAC.ini
SUNOS_INI=SunOS.ini
SENTINEL_INI=sentinel.ini
STORAGE_INI=storage.ini
TP_INI=input_parameters.ini
SYM_LINK_INI=sym_links.ini
IPMP_INI=ipmp.ini

# DVD LABEL or Jumpstart Directory where all ENIQ SW will reside
ENIQ_BASE_SW=eniq_base_sw

# String denoting the start of an OSS reference name. Appended
# to this will be the next available number
OSS_REF_STR=eniq_oss_

# String denoting the start of a reader reference name. Appended
# to this will be the next available number
READER_STR=dwh_reader_

# Default user
DEFAULT_USER=root

# Directory on the root filesystem
ENIQ_ROOT_DIR=/eniq


### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   error signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO "\n$_err_msg_\n"|$TEE -a ${LOGFILE}
else
    $ECHO "\n$_err_msg_\n"
fi

cd $SCRIPTHOME

$RM -rf ${TEM_DIR} 

if [ "$2" ]; then
    exit ${2}
else
   exit 1
fi
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi
}

### Function: check_params ###
#
# Check Input Params
#
# Arguments:
#    none
# Return Values:
#    none
check_params()
{
# Check that we got the required action type
if [ -z "${DBUSER}" ]; then
    usage_msg
    $ECHO "\nERROR: User is not provided."
    exit 1
fi
}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}

### Function: setup_env ###
#
# Setup up path environment etc
#
# Arguments:
#   none
# Return Values:
#   none
setup_env()
{

# Source the common functions library
if [ ! -s $SCRIPTHOME/../lib/common_functions.lib ]; then
    _err_msg_="Cannot locate $SCRIPTHOME/../lib/common_functions.lib"
    abort_script "$_err_msg_"
else
   . $SCRIPTHOME/../lib/common_functions.lib
fi

# Source the common inirator library
if [ ! -s $SCRIPTHOME/../lib/common_inirator_functions.lib ]; then
    _err_msg_="Cannot locate $SCRIPTHOME/../lib/common_inirator_functions.lib"
    abort_script "$_err_msg_"
else
   . $SCRIPTHOME/../lib/common_inirator_functions.lib
fi




# ENIQ sw directory
ENIQ_BASE_DIR=/eniq

ENIQ_CONF_DIR=${ENIQ_BASE_DIR}/installation/config

ENIQ_INST=${ENIQ_BASE_DIR}/installation

ENIQ_CORE_INST=${ENIQ_INST}/core_install

ENIQ_TEMPLATE_DIR=${ENIQ_CORE_INST}/templates

ENIQ_STATS_TEMPLATES=${ENIQ_TEMPLATE_DIR}/stats

ENIQ_CLI_SW_DIR=${ENIQ_BASE_DIR}/sw

CLI_CONF_DIR=${ENIQ_CLI_SW_DIR}/conf

ENIQ_LOG_DIR=${ENIQ_BASE_DIR}/local_logs

GET_IP_ORDER_SCRIPT=${ENIQ_CORE_INST}/lib/get_ip_order.pl

ENIQ_SW_PF_DIR=${ENIQ_BASE_DIR}/sw/platform

# Hostname Information
HNAME=`${MYHOSTNAME}`
HOST_IP=`$GETENT hosts ${HNAME} | $AWK '{print $1}' | $HEAD -1` 

# Get the System User.
_sysuser_=`iniget ENIQ_INSTALL_CONFIG -f ${ENIQ_CONF_DIR}/${SUNOS_INI} -v ENIQ_SYSUSER`
if [ ! "${_sysuser_}" ]; then
    _err_msg_="Could not read parameter ENIQ_SYSUSER from ${ENIQ_CONF_DIR}/${SUNOS_INI} file"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

# Get server type
CURR_SERVER_TYPE=`$CAT ${ENIQ_CONF_DIR}/installed_server_type`
if [ ! "${CURR_SERVER_TYPE}" ]; then
    _err_msg_="Could not read ${ENIQ_CONF_DIR}/installed_server_type"
    abort_script "${_err_msg_}" 
fi


# Create a temporary Directory
TEM_DIR=/tmp/create_eniq_ini.$$.$$
$RM -rf ${TEM_DIR}
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory ${TEM_DIR}"
    abort_script "$_err_msg_"
fi

    if [ -s ${CLI_CONF_DIR}/${ENIQ_INI} ]; then
        $CP ${CLI_CONF_DIR}/${ENIQ_INI} ${TEM_DIR}/${ENIQ_INI}
        if [ $? -ne 0 ]; then
            _err_msg_="Could not copy ${CLI_CONF_DIR}/${ENIQ_INI} to ${TEM_DIR}/${ENIQ_INI}"
            abort_script "$_err_msg_"
        fi
    fi
    
}

### Function: user_confirm_default ###
#
#   Take user confirmation
#
# Arguments:
#   $1 : User display message
# Return Values:
#   User response : YES/NO
user_confirm_default()
{
_usr_msg_="\n\nDo you want to set default passwords for given RepDB users ? (Yy/Nn)"
unset _response_

while [ 1 ]
do
    $ECHO ${_usr_msg_}
    read ans

    case $ans in
      Y|y|YES|Yes|yes) _response_="YES"
                       break
                       ;;
      N|n|NO|No|no) _response_="NO"
                    break
                    ;;
      *) $ECHO "Invalid input. Enter again."
         ;;
    esac
done

if [ "${_response_}" == "YES" ]; then
    # Create a temporary Directory
    Tem_DIR=/tmp/eniq_ini.$$.$$
    $RM -rf ${Tem_DIR}
    $MKDIR -p ${Tem_DIR}
    if [ $? -ne 0 ]; then
        _err_msg_="Could not create directory ${Tem_DIR}"
        abort_script "$_err_msg_"
    fi
$CP -rp ${ENIQ_CONF_DIR}/${ENIQ_INI} ${Tem_DIR}/${ENIQ_INI}    
fi    
 
}

### Function: usage_msg ###
#
#   Print out the usage message
#
# Arguments:
#   none
# Return Values:
#   none
usage_msg()
{
$CLEAR
$ECHO "
Usage: `$BASENAME $0` -u <user_name> [ -l <path_to_logfile> ]
options:
-u  : Parameter specifying the user for which password needs to be updated. Should be either of the following:
      etlrep or ETLREP or Etlrep                      : To update default password for etlrep.
      dwhrep or DWHREP or Dwhrep                      : To update default password for dwhrep.
"
}


### Function: repdb_password_rollback ###
# Revert the old passwords in case of failure 
#
# Arguments:
#   _revert_user_= Repdb User for which password needs to be reverted
#   _revert_new_rep_pwd_= Repdb User current set password
#   _revert_old_rep_pwd_= Repdb User old set password
# Return Values:
#   none
repdb_password_rollback()
{

_revert_user_=$1
_revert_new_rep_pwd_=$2
_revert_old_rep_pwd_=$3


if [ ! $1 $2 ]; then
    _err_msg_="Either $1 or $2 does not exist"
    abort_script "$_err_msg_"
fi

if [[ ${iq_cmd_status} -eq 1 ]] && [[  ${REPDB_PASSWORD_ROLLBACK_CALL} -eq 0 ]]; then
    # Update the password in niq.ini file 
    BLOCKS_TO_BE_PROCESSED_ARRAY="REP"
    _revert_new_enc_rep_pwd_=`$ECHO "${_revert_new_rep_pwd_}" | openssl enc -base64 -e`
    log_msg -s -q "Reverting the password of ${_revert_user_} in config files." -l ${LOGFILE}
    iniset ${BLOCKS_TO_BE_PROCESSED_ARRAY} -f ${CLI_CONF_DIR}/${ENIQ_INI} ${_revert_user_}Password=${_revert_new_enc_rep_pwd_}
    if [ $? -ne 0 ]; then
        _err_msg_="Could not revert ${CLI_CONF_DIR}/${ENIQ_INI} with ${_revert_user_}Password"
        abort_script "$_err_msg_"
    fi
    iniset DB -f ${CLI_CONF_DIR}/${ENIQ_INI} ${_revert_user_}Password_Encrypted=Y
    if [ $? -ne 0 ]; then
        _err_msg_="Could notrevert ${CLI_CONF_DIR}/${ENIQ_INI} with ${_revert_user_}Password_Encrypted"
        abort_script "$_err_msg_"
    fi

    R_STATE=`cat ${ENIQ_SW_PF_DIR}/../installer/versiondb.properties | $GREP -w repository | $AWK -F "=" '{print $2}'`
    # Get system user (dcuser)
    _sysuser_=`iniget ENIQ_INSTALL_CONFIG -f ${ENIQ_CONF_DIR}/SunOS.ini -v ENIQ_SYSUSER`

  $CHMOD +x ${ENIQ_SW_PF_DIR}/repository-${R_STATE}/bin/ChangeUserPasswordsInRepdb
  if [ $? -ne 0 ]; then
      _err_msg_="Could not change permission for ${ENIQ_SW_PF_DIR}/repository-${R_STATE}/bin/ChangeUserPasswordsInRepdb."
      abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
  fi

    log_msg -s "Executing $SU - ${_sysuser_} -c $BASH ${ENIQ_SW_PF_DIR}/repository-${R_STATE}/bin/ChangeUserPasswordsInRepdb to revert the ${_revert_user_} user password in Repdb meta database\n" -l ${LOGFILE}
    _rep_revert_user_=`$ECHO ${_revert_user_} | $TR '[:upper:]' '[:lower:]'`
    $SU - ${_sysuser_} -c "$BASH ${ENIQ_SW_PF_DIR}/repository-${R_STATE}/bin/ChangeUserPasswordsInRepdb -u ${_revert_user_} -o ${_revert_new_rep_pwd_} -p ${_repdb_PWD_} -r ${_repdb_PWD_}"
    if [ $? -ne 0 ]; then
        _err_msg_="Failed to revert password of ${_revert_user_} in REPDB meta.database"
        abort_script "$_err_msg_"
    fi
    _revert_old_enc_rep_pwd_=`$ECHO "${_revert_old_rep_pwd_}" | openssl enc -base64 -e`
    iniset ${BLOCKS_TO_BE_PROCESSED_ARRAY} -f ${CLI_CONF_DIR}/${ENIQ_INI} ${_revert_user_}Password=${_revert_old_enc_rep_pwd_}
    if [ $? -ne 0 ]; then
        _err_msg_="Could not revert ${CLI_CONF_DIR}/${ENIQ_INI} with ${_revert_user_}Password"
        abort_script "$_err_msg_"
    fi
    log_msg -s "Password rolled back successfully for ${_revert_user_} User." -l ${LOGFILE}
    exit 0
fi

}

# ********************************************************************
#
#   Main body of program
#
# ********************************************************************
#
RUN_TIME=`$DATE '+%Y-%b-%d_%H.%M.%S'`

# Determine absolute path to software
get_absolute_path

while getopts ":l:u:" arg; do
  case $arg in
    l) LOGFILE="$OPTARG"
       ;;
    u) DBUSER="$OPTARG"
       ;;
   \?) usage_msg
       exit 1
       ;;
  esac
done
shift `expr $OPTIND - 1`

#Check parameter
check_params

# setup environment
setup_env

# Only run on the coordinator or standalone
if [ "${CURR_SERVER_TYPE}" == "stats_engine" -o "${CURR_SERVER_TYPE}" == "stats_iqr" ] ; then
    _err_msg_="$0 can not be executed on ${CURR_SERVER_TYPE} server types"
    abort_script "${_err_msg_}"
fi

# Log file
if [ ! "${LOGFILE}" ]; then
    LOGFILE="${ENIQ_LOG_DIR}/password_update.log"
fi
$ECHO -e "\n=======================================================" >> ${LOGFILE}
$ECHO "${RUN_TIME} - Updating REPDB user Passwords" >> ${LOGFILE}
$ECHO -e "=======================================================\n" >> ${LOGFILE}


# confirmation to set default passwords.
user_confirm_default

REPDB_PASSWORD_ROLLBACK_CALL=0
iq_cmd_status=0

DBISQL="$(ls /eniq/sybase_iq/IQ-*/bin64/dbisql)"
if [ ! -x "$DBISQL" ]; then
    _err_msg_="$DBISQL commands not found or not executable."
    abort_script "${_err_msg_}"
fi


DWH_PORT=`iniget DWH -f ${ENIQ_CONF_DIR}/${ENIQ_INI} -v PortNumber`
if [ -z "${DWH_PORT}" ]; then
    _err_msg_="Could not read ${DWH_PORT} from ${ENIQ_CONF_DIR}/${ENIQ_INI}"
    abort_script "${_err_msg_}"
fi
DBA_password=`iniget DB -f ${ENIQ_CONF_DIR}/${ENIQ_INI} -v DBAPassword`
if [ -z "${DBA_password}" ]; then
    _err_msg_="Could not read ${DBA_password} from ${ENIQ_CONF_DIR}/${ENIQ_INI}"
    abort_script "${_err_msg_}"
fi
DBAPassword_Encrypted=`iniget DB -f ${ENIQ_CONF_DIR}/${ENIQ_INI} -v DBAPassword_Encrypted`
if [ -z "${DBAPassword_Encrypted}" ]; then
    _err_msg_="Could not read ${DBAPassword_Encrypted} from ${ENIQ_CONF_DIR}/${ENIQ_INI}"
    abort_script "${_err_msg_}"
fi
if [ "${DBAPassword_Encrypted}" == "Y" ]; then
    DBA_password=`$ECHO ${DBA_password} | openssl enc -base64 -d`
fi
#Initialising the connection string for dwhdb
DWH_CONN_STR_FOR_REPDB_USER_DBA="-c \"eng=repdb;links=tcpip{host=dwhdb;port=${DWH_PORT}};uid=dba;pwd=${DBA_password}\""
DWH_CONN_STR_FOR_REPDB_USER_DBA_ENC=${VAR_TMP_DIR}/con_str_repdb_encrypt.txt.$$

# encrypt the connection string.
get_encrypt_file "${DWH_CONN_STR_FOR_REPDB_USER_DBA}" "${DWH_CONN_STR_FOR_REPDB_USER_DBA_ENC}"

if [ "${_response_}" == "YES" ]; then
    $ECHO ${DBUSER^^} | $SED -n 1'p' | $TR ',' '\n' > ${Tem_DIR}/repdb_users.txt
    for db_user in `$CAT ${Tem_DIR}/repdb_users.txt`;do
        if [ "${db_user}" == "ETLREP" -o "${db_user}" == "DWHREP" ]; then

            #Check the username of REPdb
            _for_repdb_user_=`iniget REP -f ${CLI_CONF_DIR}/${ENIQ_INI} -v ${db_user}Username`
            if [ -z "${_for_repdb_user_}" ]; then
                _err_msg_="Could not read ${db_user} username from ${CLI_CONF_DIR}/${ENIQ_INI}"
                abort_script "${_err_msg_}" 
            fi
		    
            #Check the current password of REPdb
            _current_repdb_pass_=`iniget REP -f ${CLI_CONF_DIR}/${ENIQ_INI} -v ${db_user}Password`
            if [ -z "${_current_repdb_pass_}" ]; then
                _err_msg_="Could not read present ${db_user} password from ${CLI_CONF_DIR}/${ENIQ_INI}"
                abort_script "${_err_msg_}" 
            fi
		    
            #Check if the current password is encrypted or not
            _pass_repdb_encrypt_=`iniget DB -f ${ENIQ_CONF_DIR}/${ENIQ_INI} -v ${db_user}Password_Encrypted`
            if [ -z "${_pass_repdb_encrypt_}" ]; then
                _err_msg_="Could not read ${db_user} password encryption status from ${ENIQ_CONF_DIR}/${ENIQ_INI}"
                abort_script "${_err_msg_}"
            fi
            if [ ${_pass_repdb_encrypt_} == Y ];then
            _current_repdb_pass_=`$ECHO "${_current_repdb_pass_}" | openssl enc -base64 -d`
            fi
		    
            #Check the default password to set
            _default_pass_repdb=`iniget REP -f ${ENIQ_STATS_TEMPLATES}/${ENIQ_INI} -v ${db_user}Password`
            if [ ! ${_default_pass_repdb} ]; then
                _err_msg_="Failed to get default password of ${db_user} user"
                abort_script "$_err_msg_" 
            else
                #Check the default password encryption
                _default_pass_repdb_encryp=`iniget DB -f ${ENIQ_STATS_TEMPLATES}/${ENIQ_INI} -v ${db_user}Password_Encrypted`
                if [ -z "${_default_pass_repdb_encryp}" ]; then
                    _err_msg_="Could not read ${db_user} password encryption status from ${ENIQ_STATS_TEMPLATES}/${ENIQ_INI}"
                    abort_script "${_err_msg_}"
                fi
                if [ "${_default_pass_repdb_encryp}" == "N" ];then
                    _default_enc_pass_repdb=`$ECHO "${_default_pass_repdb}" | openssl enc -base64 -e`
                else 
                    _default_enc_pass_repdb=`$ECHO "${_default_pass_repdb}"`
                fi
		#Set the default password to in the niq.ini
                log_msg -s "setting the default password of ${db_user} user in config files." -l ${LOGFILE}
                iniset REP -f ${Tem_DIR}/${ENIQ_INI} ${db_user}Password="${_default_enc_pass_repdb}"
                if [ $? -ne 0 ]; then
                    _err_msg_="Could not update ${TEM_DIR}/${ENIQ_INI} with ${_user_}Password_Encrypted"
                    abort_script "$_err_msg_"
                fi
                iniset DB -f ${Tem_DIR}/${ENIQ_INI} ${db_user}Password_Encrypted=Y
                if [ $? -ne 0 ]; then
                    _err_msg_="Could not update ${TEM_DIR}/${ENIQ_INI} with ${_user_}Password_Encrypted"
                    abort_script "$_err_msg_"
                fi

                # Get R_State of repository package
                R_STATE=`$CAT ${ENIQ_SW_PF_DIR}/../installer/versiondb.properties | $GREP -w repository | $AWK -F "=" '{print $2}'`
                # Get system user (dcuser)
                _sysuser_=`iniget ENIQ_INSTALL_CONFIG -f ${ENIQ_CONF_DIR}/SunOS.ini -v ENIQ_SYSUSER`

                $CHMOD +x ${ENIQ_SW_PF_DIR}/repository-${R_STATE}/bin/ChangeUserPasswordsInRepdb
                if [ $? -ne 0 ]; then
                    _err_msg_="Could not change permission for ${ENIQ_SW_PF_DIR}/repository-${R_STATE}/bin/ChangeUserPasswordsInRepdb."
                    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
                fi
		if [ "${_default_pass_repdb_encryp}" == "Y" ];then
                    _default_dec_pass_repdb=`$ECHO "${_default_pass_repdb}" | openssl enc -base64 -d`
                else 
                    _default_dec_pass_repdb=`$ECHO "${_default_pass_repdb}"`
                fi
		        # Update the in RepDB meta database and alter password for the specific user
                log_msg -s "Executing $SU - ${_sysuser_} -c $BASH ${ENIQ_SW_PF_DIR}/repository-${R_STATE}/bin/ChangeUserPasswordsInRepdb to update the ${_user_} user password in Repdb\n" -l ${LOGFILE}
                 $SU - ${_sysuser_} -c "$BASH ${ENIQ_SW_PF_DIR}/repository-${R_STATE}/bin/ChangeUserPasswordsInRepdb -u ${_for_repdb_user_} -o ${_current_repdb_pass_} -p ${_default_dec_pass_repdb} -r ${_default_dec_pass_repdb}"
                if [ $? -ne 0 ]; then
                    REPDB_PASSWORD_ROLLBACK_CALL=1
                    _err_msg_="Failed to set password of ${_for_user_} in REPDB meta.database"
                    abort_script "$_err_msg_"
                
                fi

                # For updating password to able to login
                change_pwd_cmd="ALTER USER ${_for_repdb_user_} IDENTIFIED BY '${_default_dec_pass_repdb}';"
                log_msg -s "Executing $SU - ${_sysuser_} -c $DBISQL -nogui to update the ${_for_repdb_user_} user password in Repdb\n" -l ${LOGFILE}
                $SU - ${_sysuser_} -c "$DBISQL -nogui -onerror exit @${DWH_CONN_STR_FOR_REPDB_USER_DBA_ENC} ${change_pwd_cmd} >> /dev/null 2>&1"
                if [ $? -ne 0 ]; then
                    log_msg -s "Failed to alter the password of ${_for_user_} in REPDB" -l ${LOGFILE}
                    iq_cmd_status=1
                    log_msg -s "Reverting the password for ${_for_user_} in REPDB" -l ${LOGFILE}
                    repdb_password_rollback ${db_user} ${_default_dec_pass_repdb} ${_current_repdb_pass_}
                fi
            fi
        else
            _err_msg_="Please enter the correct Repdb Username"
            usage_msg
            abort_script "${_err_msg_}"
        fi
    done
    RepDB_password=`$CAT ${ENIQ_CONF_DIR}/${ENIQ_INI} | $GREP -iw "RepDB_users_password_change_indicator"` >> /dev/null 2>&1
    if [ ${RepDB_password} ]; then
        $SED -i '/RepDB_users_password_change/d' ${Tem_DIR}/${ENIQ_INI} >> /dev/null 2>&1
        if [ $? -ne 0 ]; then
            _err_msg_="Could not remove the flag from ${Tem_DIR}/${ENIQ_INI}"
            abort_script "$_err_msg_"
        fi
    fi

    ## Copy the content in ini files.
    $CP ${Tem_DIR}/${ENIQ_INI} ${CLI_CONF_DIR}/${ENIQ_INI}
    if [ $? -ne 0 ]; then
        _err_msg_="Could not copy ${Tem_DIR}/${ENIQ_INI} to ${CLI_CONF_DIR}/${ENIQ_INI}"
        abort_script "$_err_msg_"
    fi
    
    _new_etlrep_pwd_=`iniget REP -f ${CLI_CONF_DIR}/${ENIQ_INI} -v ETLREPPassword`
    _new_dwhrep_pwd_=`iniget REP -f ${CLI_CONF_DIR}/${ENIQ_INI} -v DWHREPPassword`
    
    # Get an ordered list of servers based on the server_list file:
    _deployed_servers_="${TEM_DIR}/deployed_servers.$$.tmp"
    $PERL ${GET_IP_ORDER_SCRIPT} -f ${_deployed_servers_}
    if [ ! -s "${_deployed_servers_}" ]; then
        _err_msg_="Unable to retrieve deployed servers list.\n"
        abort_script "${_err_msg_}"
    fi
    
    for _line_ in `$CAT ${_deployed_servers_}`; do
         _ip_address_=`$ECHO ${_line_} | $AWK -F"::" '{print $1}'`
         _serv_hostname_=`$ECHO ${_line_} | $AWK -F"::" '{print $2}'`
         _serv_type_=`$ECHO ${_line_} | $AWK -F"::" '{print $3}'`
        if [ ! "${_ip_address_}" -o ! "${_serv_hostname_}" -o ! "${_serv_type_}" ]; then
            _err_msg_="Unable to retrieve IP or hostname or server type.\n"
            abort_script "${_err_msg_}"
        fi
        
        # If the IP found in the order file matches my IP, run locally
        if [ "${_ip_address_}" == "${HOST_IP}" ]; then
            $CP ${Tem_DIR}/${ENIQ_INI} ${ENIQ_CONF_DIR}/${ENIQ_INI}
            if [ $? -ne 0 ]; then
                _err_msg_="Could not copy ${Tem_DIR}/${ENIQ_INI} to ${ENIQ_CONF_DIR}/${ENIQ_INI} in ${_ip_address_}"
                abort_script "$_err_msg_"
            fi
        else
            run_remote_cmd "${_ip_address_}" ". ${ENIQ_CORE_INST}/lib/common_functions.lib;iniset REP -f ${ENIQ_CONF_DIR}/${ENIQ_INI} ETLREPPassword=${_new_etlrep_pwd_}" >> /dev/null 2>&1
            if [ $? -ne 0 ]; then
                _err_msg_="Could not set to ETLREPPassword ${ENIQ_CONF_DIR}/${ENIQ_INI} in ${_ip_address_}"
                abort_script "$_err_msg_"
            fi
            run_remote_cmd "${_ip_address_}" ". ${ENIQ_CORE_INST}/lib/common_functions.lib;iniset REP -f ${ENIQ_CONF_DIR}/${ENIQ_INI} DWHREPPassword=${_new_dwhrep_pwd_}" >> /dev/null 2>&1
            if [ $? -ne 0 ]; then
                _err_msg_="Could not set to DWHREPPassword to ${ENIQ_CONF_DIR}/${ENIQ_INI} in ${_ip_address_}"
                abort_script "$_err_msg_"
            fi
            run_remote_cmd "${_ip_address_}" ". ${ENIQ_CORE_INST}/lib/common_functions.lib;iniset DB -f ${ENIQ_CONF_DIR}/${ENIQ_INI} ETLREPPassword_Encrypted=Y" >> /dev/null 2>&1
            if [ $? -ne 0 ]; then
                _err_msg_="Could not cset ETLREPPassword_Encrypted to ${ENIQ_CONF_DIR}/${ENIQ_INI} in ${_ip_address_}"
                abort_script "$_err_msg_"
            fi
            run_remote_cmd "${_ip_address_}" ". ${ENIQ_CORE_INST}/lib/common_functions.lib;iniset DB -f ${ENIQ_CONF_DIR}/${ENIQ_INI} DWHREPPassword_Encrypted=Y" >> /dev/null 2>&1
            if [ $? -ne 0 ]; then
                _err_msg_="Could not set DWHREPPassword_Encrypted to ${ENIQ_CONF_DIR}/${ENIQ_INI} in ${_ip_address_}"
                abort_script "$_err_msg_"
            fi
            run_remote_cmd "${_ip_address_}" "$SED -i '/RepDB_users_password_change/d' ${ENIQ_CONF_DIR}/${ENIQ_INI}" >> /dev/null 2>&1
            if [ $? -ne 0 ]; then
                _err_msg_="Could not remove RepDB indicator from ${ENIQ_CONF_DIR}/${ENIQ_INI} in ${_ip_address_}"
                abort_script "$_err_msg_"
            fi
        fi
    done
elif [ "${_response_}" == "NO" ]; then
    log_msg -s "User entered response is no.. hence exiting" -l ${LOGFILE}
    $RM -rf TEM_DIR=/tmp/create_eniq_ini*
    $RM -rf Tem_DIR=/tmp/eniq_ini.*
    exit 0
else
$ECHO "Please enter a valid response"
fi

log_msg -s "Successfully updated the default passwords for RepDB user in config files and in Repdb\n" -l ${LOGFILE}

$RM -rf TEM_DIR=/tmp/create_eniq_ini*
$RM -rf Tem_DIR=/tmp/eniq_ini.*

exit 0

