#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2022 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used 
# and/or copied only with the written permission from Ericsson Radio 
# Systems AB or in accordance with the terms and conditions stipulated 
# in the agreement/contract under which the program(s) have been 
# supplied.
#
# ********************************************************************
# Name    : remote_privileged_users.bsh
# Date    : 19/1/2023
# Revision: main\08
# Purpose : This file contains a set of functions that can be sourced from the bash
#           shell. 
#           NOTE : THESE FUNCTIONS ARE FOR ENIQ INSTALLATION ONLY AND THEREFORE IF 
#                  THEY NEED TO BE CHANGED ONLY THE ENIQ INSTALLATION SCRIPTS WILL
#                  BE CONSIDERED.
#
# Usage   : Eniq_Privileged_User_Support
#
# ********************************************************************
#
#     Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
BASH=/usr/bin/bash
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CP=/usr/bin/cp
CUT=/usr/bin/cut
GETENT=/usr/bin/getent
GPASSWD=/usr/bin/gpasswd
GROUPADD=/usr/sbin/groupadd
GROUPDEL=/usr/sbin/groupdel
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO='/usr/bin/echo -e'
EGREP=/usr/bin/egrep
GREP=/usr/bin/grep
HOSTNAME=/usr/bin/hostname
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
PWD=/usr/bin/pwd
PYTHON=/usr/bin/python
RESTORECON=/usr/sbin/restorecon
RM=/usr/bin/rm
SED=/usr/bin/sed
TEE=/usr/bin/tee
USERADD=/usr/sbin/useradd
USERMOD=/usr/sbin/usermod
UNAME=/usr/bin/uname


# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************

# Default user
DEFAULT_USER=root

# Cmd to exec a shell and drop user to it in case of an error
EXEC_SHELL_CMD="exec /bin/bash -o emacs"

# Name of Files
SUDOERS=/etc/sudoers
ENIQ_BASE_DIR=/eniq

# Name of SunOS & ENIQ ini Files
SUNOS_INI=SunOS.ini


# ********************************************************************
#
#   Functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_time_=`${DATE} '+%Y-%b-%d_%H.%M.%S'`

if [ "$1" ]; then
    _err_msg_="${_err_time_} - $1"
else
    _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
    $ECHO -e "\nERROR : ${_err_msg_}\n" | $TEE -a "${LOGFILE}"
else
    $ECHO -e "\nERROR : ${_err_msg_}\n"
fi

$RM -rf "${TEM_DIR}"

exit 1

}

### Function: ask_for_input ###
#
#   Common function to ask for user input
#   and stores user input in USER_VALUE
#
# Arguments:
#       $1 : User message
# Return Values:
#       none
ask_for_input()
{
_msg_=$*
unset USER_VALUE

while true ; do
    log_msg -s  "\n\nPlease enter ${_msg_}" -l "${LOGFILE}" 
    read -r USER_VALUE

    if [ ! "${USER_VALUE}" ]; then
        log_msg -s  "\nPlease enter a valid input" -l "${LOGFILE}"
        continue
    else
        break
    fi
done
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
check_id()
{
_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi
}


### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}

### Function: setup_env ###
#
# Set up environment variables for script.
#
# Arguments:
#   none
# Return Values:
#   none

setup_env()
{
# Templates Directory
ENIQ_TEMPL_DIR="`$DIRNAME ${SCRIPTHOME}`/templates/${INSTALL_TYPE}"

# File containing the list of server types
SERVER_TYPE_LIST_FILE=${ENIQ_CORE_INST_DIR}/etc/${INSTALL_TYPE}_server_list

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# Main Directory for the Core Installation SW
ENIQ_CORE_INST_DIR=${ENIQ_INST_DIR}/core_install

# ENIQ Admin Directory
ENIQ_ADMIN_DIR=${ENIQ_BASE_DIR}/admin

# ENIQ Config Directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

# ENIQ Log Directory
ENIQ_LOG_DIR=${ENIQ_BASE_DIR}/local_logs

# Source the common functions
if [ -s ${SCRIPTHOME}/../lib/common_functions.lib ]; then
    . ${SCRIPTHOME}/../lib/common_functions.lib
else
    _err_msg_="File ${SCRIPTHOME}/../lib/common_functions.lib not found"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

if [ -s ${SCRIPTHOME}/../lib/common_core_install_functions.lib ]; then
    . ${SCRIPTHOME}/../lib/common_core_install_functions.lib
else
    _err_msg_="File ${SCRIPTHOME}/../lib/common_core_install_functions.lib not found"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

if [ -s ${SCRIPTHOME}/../lib/common_inirator_functions.lib ]; then
    . ${SCRIPTHOME}/../lib/common_inirator_functions.lib
else
    _err_msg_="File ${SCRIPTHOME}/../lib/common_inirator_functions.lib not found"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

HNAME=`${HOSTNAME} -s`

}


### Function: insert_header_footer ###
#
#   Insert a stage header/footer message
#
# Arguments:
#   $1 : head/foot
#   $2 : Message
#   $3 : Logfile
# Return Values:
#   none
insert_header_footer()
{

if [ "$1" != "head" ] && [ "$1" != "foot" ]; then
    _err_msg_="Only Param of head/foot is allowed...exiting!"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi
_type_=$1

_msg_=$2

_logfile_=$3

_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`
if [ "$_type_" == "head" ]; then
    log_msg -s "\n----------------------------------------------------------------------------" -l "${LOGFILE}"
    log_msg -s "----------------------------------------------------------------------------" -l "${LOGFILE}"
    log_msg -s "$_time_ : $_msg_" -l "${LOGFILE}"
    log_msg -s "----------------------------------------------------------------------------" -l "${LOGFILE}"
fi

if [ "$_type_" == "foot" ]; then
    log_msg -s "\n----------------------------------------------------------------------------" -l "${LOGFILE}"
    log_msg -s "$_time_ : $_msg_" -l "${LOGFILE}"
    log_msg -s "----------------------------------------------------------------------------" -l "${LOGFILE}"
fi
}

## Function: read_storage_type ###
#
# Arguments:
#   none
# Return Values:
#   set varibale STORAGE_TYPE
read_storage_type()
{
# Read the storage type
if [ -s ${ENIQ_CONF_DIR}/${SUNOS_INI} ]; then
    STORAGE_TYPE=`iniget STOR_TYPE -f ${ENIQ_CONF_DIR}/${SUNOS_INI} -v STORAGE_TYPE`
else
    if [ -s ${ENIQ_CONF_DIR}/san_details ]; then
        STORAGE_TYPE=`$CAT ${ENIQ_CONF_DIR}/san_details | $EGREP "^STORAGE_TYPE=" | $AWK -F\= '{print $2}'`
    fi
fi

if [ ! "${STORAGE_TYPE}" ]; then
    _err_msg_="Could not read STORAGE_TYPE param "
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi
}

create_admin_group()
{
insert_header_footer head "Entering Privileged Group Creation Stage\n" ${LOGFILE}

if [ ! -f /etc/group.orig ]; then
    $CP -p /etc/group /etc/group.orig
fi

_admin_grp_name_=ENIQ_ADMIN_ROLE
_grp_check=0


log_msg -l ${LOGFILE} -s "Checking whether ${_admin_grp_name_} group already created"
$GETENT group ${_admin_grp_name_} >> /dev/null 2>&1
    if [ $? -eq 0 ]; then
		_grp_check=1
       	$ECHO "Group ${_admin_grp_name_} already exists" 
    else
                $ECHO "Group ${_admin_grp_name_} does not exists"
		$ECHO "Creating group ${_admin_grp_name_}"
		$GROUPADD ${_admin_grp_name_}
		if [ $? -eq 0 ]; then
			$ECHO "${_admin_grp_name_} group created successfully\n"
		else	
			_err_msg_="Could not create group ${_admin_grp_name_}"
			abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
		fi
	
    fi
	
	
su_group=sugroup
log_msg -l ${LOGFILE} -q -s "Checking whether ${su_group} group already created"
$GETENT group ${su_group} >> /dev/null 2>&1
if [ $? -eq 0 ]; then
    log_msg -l ${LOGFILE} -q -s "Group ${su_group} already exists"
else
    log_msg -l ${LOGFILE} -q -s "Group ${su_group} does not exists"
    log_msg -l ${LOGFILE} -q -s  "Creating group ${su_group}"
    $GROUPADD ${su_group}
    if [ $? -eq 0 ]; then
       log_msg -l ${LOGFILE} -q -s "${su_group} group created successfully"
    else
       _err_msg_="Could not create group ${su_group}"
       abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
    fi
fi


if [ ! -f /etc/sudoers.orig ]; then
    $CP -p /etc/sudoers /etc/sudoers.orig
fi

_check_pattern_=`$GREP -w %wheel ${SUDOERS}|$GREP -w NOPASSWD`
GROUP_ADD_SUDO="%${_admin_grp_name_}\tALL=(ALL)\tNOPASSWD: ALL , !/usr/bin/sudo,!/usr/bin/su$, !/usr/bin/su -, !/usr/bin/su - root, !/usr/bin/su root, !/usr/bin/passwd root"

if [ ${_grp_check} -eq 1 ]; then
	log_msg -l ${LOGFILE} -s "\n Checking whether ${_admin_grp_name_} group have Admin Privileges\n"	
        log_msg -l ${LOGFILE} -s "Providing Admin Privileges to ${_admin_grp_name_} group"
	$GREP -w ${_admin_grp_name_} ${SUDOERS} >> /dev/null 2>&1
	if [ $? -eq 0 ]; then
		$ECHO "\nAdmin Privileges already provided to ${_admin_grp_name_} group "
	fi
else	
		log_msg -l ${LOGFILE} -s "Providing Admin Privileges to ${_admin_grp_name_} group"
		$SED -i "/$_check_pattern_/a $GROUP_ADD_SUDO" ${SUDOERS} 
		if [ $? -eq 0 ]; then
			$ECHO "Provided Admin Privileges to ${_admin_grp_name_} group "
		else	
			_err_msg_="Could not provide Admin Privileges to ${_admin_grp_name_} "
			abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
		fi	
fi

_update_=1

if [ ${_update_} -eq 1 ]; then
    insert_header_footer foot "Successfully completed Privileged group creation stage" ${LOGFILE}
fi	

}


create_admin_user()
{

insert_header_footer head "Entering Privileged User Creation Stage" "${LOGFILE}"

if [ ! -f /etc/passwd.orig ]; then
    $CP -p /etc/passwd /etc/passwd.orig
fi

if [ ! -f /etc/shadow.orig ]; then
        $CP -p /etc/shadow /etc/shadow.orig
fi

if [ ! -d ${ENIQ_BASE_DIR}/home ]; then
    $ECHO "Creating ${ENIQ_BASE_DIR}/home directory" | $TEE -a ${LOGFILE}
    $MKDIR -p ${ENIQ_BASE_DIR}/home
fi

  
    # Check if there is a skeleton directory for this user...
    unset _user_skel_ _arch_
    _arch_=`$UNAME -p`
    if [ -d ${ENIQ_TEMPL_DIR}/${_arch_}/skel_dir ]; then
        _user_skel_="-m -k ${ENIQ_TEMPL_DIR}/${_arch_}/skel_dir"
    fi

if [ -f ${ENIQ_ADMIN_DIR}/etc/admin_user_list ]; then

while read _line_; do

local _user_name_ _user_home_ USERPASSWORD _user_shell_ _user_realname_

  _user_name_=`$ECHO ${_line_} |$AWK -F "::" '{print $1}'|$AWK -F "=" '{print $2}'`
  _user_home_=`$ECHO ${_line_} |$AWK -F "::" '{print $2}'|$AWK -F "=" '{print $2}'`
  USERPASSWORD=`$ECHO ${_line_} |$AWK -F "::" '{print $3}'|$AWK -F "=" '{print $2}'`
  _user_shell_="/bin/bash"
  _user_realname_=${_user_name_}
 

log_msg -l ${LOGFILE}  -s "\nChecking whether ${_user_name_} user already exist"

 _user_check_=0

$GETENT passwd ${_user_name_} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
		_user_check_=1
        $ECHO "User ${_user_name_} already exist\n" | $TEE -a ${LOGFILE}
    else   
		_user_check_=0
		$ECHO "User ${_user_name_} does not exist\n" | $TEE -a ${LOGFILE}
			
		
	fi
		
	if [ ${_user_check_} -eq 0 ]; then
		log_msg -l i-q ${LOGFILE}  -s "\nCreating home subdirectory ${_user_home_} for ${_user_name_}"
			
			if [ ! -d "${_user_home_}" ]; then
                	$MKDIR -p ${_user_home_}
				if [ $? -eq 0 ]; then
					log_msg -l -q ${LOGFILE}  -s "User ${_user_name_} home directory ${_user_home_} created"
					#$ECHO "${_admin_grp_name_} group added to sudoers file"
				else	
					_err_msg_="Could not create ${_user_home_} directory"
					abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
				fi	
			fi
						

$USERADD -d ${_user_home_} -s ${_user_shell_} -c ${_user_realname_} ${_user_skel_} ${_user_name_} > /dev/null 2>&1
        if [ $? -eq 0 ]; then
                $ECHO -e "User ${_user_name_} created" | $TEE -a ${LOGFILE}
        else
                _err_msg_="Could not create user ${_user_name_}"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi


_USER_PASSWD_CRYPT_ENC_=`$ECHO ${USERPASSWORD} | openssl enc -base64`
_USER_PASSWD_CRYPT_DEC_=`$ECHO ${_USER_PASSWD_CRYPT_ENC_} | openssl enc -base64 -d`

$EXPECT <<EOF >>${LOGFILE} 2>&1
set timeout 20
spawn su root -c "passwd ${_user_name_}"
expect {
"New password:" {send -- "${_USER_PASSWD_CRYPT_DEC_}\r";exp_continue}
"Retype new password:" {send -- "${_USER_PASSWD_CRYPT_DEC_}\r"}
timeout {send user "\nTIMEOUT\n"; exit 9}
}
expect eof
EOF
log_msg -q -s "\nSuccessfully set the password for ${_user_name_}" -l "${LOGFILE}"


_admin_grp_name_=ENIQ_ADMIN_ROLE
        $USERMOD -g ${_admin_grp_name_} ${_user_name_}
        $USERMOD -a -G dc5000,root,sugroup ${_user_name_}
        if [ $? -eq 0 ]; then
              $ECHO -e "User ${_user_name_} added to Privileged group\n" | $TEE -a ${LOGFILE}
        else
              _err_msg_="Could not add user ${_user_name_} to Privileged group"
              abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
		
        #$ECHO "Changing ${_user_home_} ownership to ${name}:${_admin_grp_name_}" | $TEE -a ${LOGFILE}
		log_msg -l -q ${LOGFILE}  -s "Changing ${_user_home_} ownership to ${_user_name_}:${_admin_grp_name_}"
        $CHOWN ${_user_name_}:${_admin_grp_name_} ${_user_home_}
        if [ $? -ne 0 ]; then
            _err_msg_="Could not change ownership of ${_user_home_} to ${_user_name_}:${_admin_grp_name_}"
            abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
    	
		# Change the permissions
		log_msg -l -q ${LOGFILE}  -s "Changing ${_user_home_} permissions to -rwxr-x---"
		#$ECHO "Changing ${home} permissions to -rwxr-x---" | $TEE -a ${LOGFILE}
		$CHMOD 750 ${_user_home_}
			if [ $? -ne 0 ]; then
				_err_msg_="Could not change permissions of ${_user_home_} to -rwxr-x---"
				abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
			fi
			
	fi
	
	if [ ${_user_check_} -eq 1 ]; then
		#$ECHO "\nChecking user ${_user_name_} already part of Admin group\n"
		log_msg -l ${LOGFILE} -s "\nChecking whether user ${_user_name_} is already part of Privileged group"
		_check_user_group_=`$ID ${_user_name_} | $AWK -F\( '{print $3}' | $AWK -F\) '{print $1}'`
			if [ "${_check_user_group_}" == "ENIQ_ADMIN_ROLE" ]; then
				$ECHO "User ${_user_name_} already part of Privileged Group"
			else					
                                $ECHO "User ${_user_name_} is not part of Privileged Group"
                                $ECHO "Adding user ${_user_name_} to the Privileged Group"
				$USERMOD -g ${_admin_grp_name_} ${_user_name_}
                                $USERMOD -a -G dc5000,root,sugroup ${_user_name_}
				if [ $? -eq 0 ]; then
					$ECHO -e "User ${_user_name_} added to Privileged group\n" | $TEE -a ${LOGFILE}
					#log_msg -s "\n User ${_user_name_} added to Admin group" -l ${LOGFILE}				
				else
					_err_msg_="Could not add user ${_user_name_} to Privileged group"
					abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
				fi		
				
			fi			
	fi

			log_msg -s "Creating directory ${_user_home_}/.ssh/" -l ${LOGFILE}
            $MKDIR -p ${_user_home_}/.ssh
                if [ $? -ne 0 ]; then
                    _err_msg_="Could not create ${_user_home_}/.ssh/ directory"
                    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
                fi

            $CHOWN ${_user_name_}:${_admin_grp_name_} ${_user_home_}/.ssh
                if [ $? -ne 0 ]; then
                    _err_msg_="Could not change ownership of ${_user_home_}/.ssh"
                    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
                fi

            #log_msg -s "Changing ${_user_home_}/.ssh permissions to -rwx------" -l ${LOGFILE}
            $CHMOD 700 ${_user_home_}/.ssh
                if [ $? -ne 0 ]; then
                 _err_msg_="Could not change permissions of ${_user_home_}/.ssh to -rwx------"
                 abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
                fi

       $ECHO "Copying ssh keys from stats_coordinator"
       _key_file_=`$LS ${ENIQ_ADMIN_DIR}/etc | $GREP -w ${_user_name_}"_id_rsa.pub"`
       if [ $? -eq 0 ]; then
         $CAT ${ENIQ_ADMIN_DIR}/etc/${_key_file_} >${_user_home_}/.ssh/authorized_keys
         if [ $? -eq 0 ]; then
            $ECHO "Successfully copied keys "
         else
            $ECHO "Failed to copy keys to ${HNAME} "
         fi
	   else
	     log_msg -s "Key file for the user ${_user_name_} is not present on the server." -l ${LOGFILE}
	   fi


        $CHMOD 600 ${_user_home_}/.ssh/authorized_keys >> /dev/null 2>&1
         if [ $? -ne 0 ]; then
                _err_msg_="Could not change permissions of ${_user_home_}/.ssh/authorized_keys file"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
         fi

        $CHOWN ${_user_name_}:${_admin_grp_name_} ${_user_home_}/.ssh/authorized_keys >> /dev/null 2>&1
         if [ $? -ne 0 ]; then
                _err_msg_="Could not change ownership of ${_user_home_}/.ssh/authorized_keys file"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
         fi

        $RESTORECON ${_user_home_}/.ssh/authorized_keys >> /dev/null 2>&1
         if [ $? -ne 0 ]; then
                _err_msg_="Could not run restorecon on ${_user_home_}/.ssh/authorized_keys file"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
         fi
		

update_user_profile ${_user_name_} ${_user_home_}

done < ${ENIQ_ADMIN_DIR}/etc/admin_user_list

fi



insert_header_footer foot "Completed Privileged User Creation Stage" ${LOGFILE}
	
}

create_admin_user_expansion()
{

insert_header_footer head "Entering Privileged User Creation Stage" "${LOGFILE}"

if [ ! -f /etc/passwd.orig ]; then
    $CP -p /etc/passwd /etc/passwd.orig
fi

if [ ! -f /etc/shadow.orig ]; then
        $CP -p /etc/shadow /etc/shadow.orig
fi

if [ ! -d ${ENIQ_BASE_DIR}/home ]; then
    $ECHO "Creating ${ENIQ_BASE_DIR}/home directory" | $TEE -a ${LOGFILE}
    $MKDIR -p ${ENIQ_BASE_DIR}/home
fi

  
    # Check if there is a skeleton directory for this user...
    unset _user_skel_ _arch_
    _arch_=`$UNAME -p`
    if [ -d ${ENIQ_TEMPL_DIR}/${_arch_}/skel_dir ]; then
        _user_skel_="-m -k ${ENIQ_TEMPL_DIR}/${_arch_}/skel_dir"
    fi


if [ -f ${ENIQ_ADMIN_DIR}/etc/SB_user_list ]; then

while read _line_; do

 local _user_name_=`$ECHO ${_line_} |$AWK -F "::" '{print $1}'|$AWK -F "=" {'print $2'}`
 local _user_home_=`$ECHO ${_line_} |$AWK -F "::" '{print $2}'|$AWK -F "=" {'print $2'}`
 local USERPASSWD
 USERPASSWD=`$ECHO ${_line_} |$AWK -F "::" '{print $3}'|$AWK -F "=" '{print $2}'`
 local _user_shell_="/bin/bash"
 local _user_realname_=${_user_name_}


log_msg -l ${LOGFILE}  -s "\nChecking whether ${_user_name_} user already exist"

 _user_check_=0

$GETENT passwd ${_user_name_} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
		_user_check_=1
        $ECHO "User ${_user_name_} already exist\n" | $TEE -a ${LOGFILE}
		
    else  
		_user_check_=0	
		$ECHO "User ${_user_name_} does not exist\n" | $TEE -a ${LOGFILE}			
		
	fi
		
	if [ ${_user_check_} -eq 0 ]; then
		log_msg -l ${LOGFILE} -q -s "\nCreating home subdirectory ${_user_home_} for ${_user_name_}"
			
			if [ ! -d "${_user_home_}" ]; then
                $MKDIR -p ${_user_home_}
				if [ $? -eq 0 ]; then
					log_msg -l ${LOGFILE} -q -s "User ${_user_name_} home directory ${_user_home_} created"
					
				else	
					_err_msg_="Could not create ${_user_home_} directory"
					abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
				fi	
			fi
						

$USERADD -d ${_user_home_} -s ${_user_shell_} -c ${_user_realname_} ${_user_skel_} ${_user_name_} > /dev/null 2>&1
        if [ $? -eq 0 ]; then
                $ECHO -e "\nUser ${_user_name_} created" | $TEE -a ${LOGFILE}
        else
                _err_msg_="Could not create user ${_user_name_}"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi





#Setting password for user in /etc/shdow file

#$CAT /etc/shadow | $GREP ${_user_name_} > ${TEM_DIR}/entry.txt
#$old_entry=`$CAT /etc/shadow | $GREP ${_user_name_}`
#str=abcd
#$SED -i "s/!!/${USERPASSWORD}/g" ${TEM_DIR}/entry.txt
#if [ $? -eq 0 ]; then
    # new_entry=`$CAT ${TEM_DIR}/entry.txt`
#else
     #_err_msg_="Could not update password for the user ${_user_name_}"
     #abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
#fi

#$echo "old=$old_entry"
#$echo "new=$user_entry"

#$$SED -i -e "s/${old_entry}/${user_entry}/g" /etc/shadow

$SED -i.sedbackup "s;^\(${_user_name_}:\)[^:]*\(:.*\)$;\1${USERPASSWD}\2;" /etc/shadow

if [ $? -ne 0 ]; then
     _err_msg_="Could not update password for user ${_user_name_}"
     abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
else
     log_msg -s "\nPassword set successfully for user ${_user_name_}" -l ${LOGFILE}
fi




_admin_grp_name_=ENIQ_ADMIN_ROLE                

$USERMOD -g ${_admin_grp_name_} ${_user_name_}
$USERMOD -a -G dc5000,root,sugroup ${_user_name_}
	if [ $? -eq 0 ]; then
		$ECHO -e "User ${_user_name_} added to Privileged group\n" | $TEE -a ${LOGFILE}
        #log_msg -s "\n User ${_user_name_} added to Admin group" -l ${LOGFILE}
    else
        _err_msg_="Could not add user ${_user_name_} to Privileged group"
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
    fi
		
        #$ECHO "Changing ${_user_home_} ownership to ${name}:${_admin_grp_name_}" | $TEE -a ${LOGFILE}
		log_msg -l ${LOGFILE} -q -s "Changing ${_user_home_} ownership to ${_user_name_}:${_admin_grp_name_}"
        $CHOWN ${_user_name_}:${_admin_grp_name_} ${_user_home_}
        if [ $? -ne 0 ]; then
            _err_msg_="Could not change ownership of ${_user_home_} to ${_user_name_}:${_admin_grp_name_}"
            abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
    	
		# Change the permissions
		log_msg -l ${LOGFILE} -q -s "Changing ${_user_home_} permissions to -rwxr-x---"
		#$ECHO "Changing ${home} permissions to -rwxr-x---" | $TEE -a ${LOGFILE}
		$CHMOD 750 ${_user_home_}
			if [ $? -ne 0 ]; then
				_err_msg_="Could not change permissions of ${_user_home_} to -rwxr-x---"
				abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
			fi
			
	fi
	
	if [ ${_user_check_} -eq 1 ]; then
		#$ECHO "\nChecking user ${_user_name_} already part of Admin group\n"
		log_msg -l ${LOGFILE} -s "\nChecking user ${_user_name_} already part of Privileged group\n"
		_check_user_group_=`$ID ${_user_name_} | $AWK -F\( '{print $3}' | $AWK -F\) '{print $1}'`
			if [ "${_check_user_group_}" == "ENIQ_ADMIN_ROLE" ]; then
				$ECHO "User ${_user_name_} already part of Privileged Group\n"
			else					
				$USERMOD -g ${_admin_grp_name_} ${_user_name_}
                                $USERMOD -a -G dc5000,root ${_user_name_}
				if [ $? -eq 0 ]; then
					$ECHO -e "User ${_user_name_} added to Privileged group\n" | $TEE -a ${LOGFILE}
					#log_msg -s "\n User ${_user_name_} added to Admin group" -l ${LOGFILE}				
				else
					_err_msg_="Could not add user ${_user_name_} to Privileged group"
					abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
				fi		
				
			fi			
	fi

log_msg -s "Creating directory ${_user_home_}/.ssh/" -l ${LOGFILE}
	$MKDIR -p ${_user_home_}/.ssh
	if [ $? -ne 0 ]; then
		_err_msg_="Could not create ${_user_home_}/.ssh/ directory"
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
	fi

	$CHOWN ${_user_name_}:${_admin_grp_name_} ${_user_home_}/.ssh
    if [ $? -ne 0 ]; then
		_err_msg_="Could not change ownership of ${_user_home_}/.ssh"
		abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
    fi

    #log_msg -s -q "Changing ${_user_home_}/.ssh permissions to -rwx------" -l ${LOGFILE}
	$CHMOD 700 ${_user_home_}/.ssh
    if [ $? -ne 0 ]; then
		_err_msg_="Could not change permissions of ${_user_home_}/.ssh to -rwx------"
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
    fi

       #$TOUCH ${_user_home_}/.ssh/authorized_keys 
       $ECHO "Copying ssh keys from stats_coordinator"
       _key_file_=`$LS ${ENIQ_ADMIN_DIR}/etc | $GREP -w ${_user_name_}"_id_rsa.pub"`
       #$CP ${ENIQ_ADMIN_DIR}/etc/${_key_file_} ${_user_home_}/.ssh/authorized_keys
	   if [ $? -eq 0 ]; then
          $CAT ${ENIQ_ADMIN_DIR}/etc/${_key_file_} >${_user_home_}/.ssh/authorized_keys
          if [ $? -eq 0 ]; then
              $ECHO "Successfully copied keys"
          else
              $ECHO "Failed to copy keys to $HOST "
          fi
	   else
	        log_msg -s "Key file for the user ${_user_name_} is not present on the server." -l ${LOGFILE}
	   fi




           $CHMOD 600 ${_user_home_}/.ssh/authorized_keys >> /dev/null 2>&1
         if [ $? -ne 0 ]; then
                _err_msg_="Could not change permissions of ${_user_home_}/.ssh/authorized_keys file"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
         fi

        $CHOWN ${_user_name_}:${_admin_grp_name_} ${_user_home_}/.ssh/authorized_keys >> /dev/null 2>&1
         if [ $? -ne 0 ]; then
                _err_msg_="Could not change ownership of ${_user_home_}/.ssh/authorized_keys file"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
         fi

        $RESTORECON ${_user_home_}/.ssh/authorized_keys >> /dev/null 2>&1
         if [ $? -ne 0 ]; then
                _err_msg_="Could not run restorecon on ${_user_home_}/.ssh/authorized_keys file"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
         fi


		
update_user_profile ${_user_name_} ${_user_home_}
done < ${ENIQ_ADMIN_DIR}/etc/SB_user_list

fi

insert_header_footer foot "Completed Privileged User Creation Stage" ${LOGFILE}
	
}






### Function: rollback_admin_user ###
#
# Rollback Admin users created for Root Dependency Removal
#
# Arguments:
#   none
# Return Values:
#   none
rollback_admin_user()
{
insert_header_footer head "Entering Rollback Privileged Users Stage\n" ${LOGFILE}


gid=`$CAT /etc/group | $GREP ENIQ_ADMIN_ROLE | $AWK -F":" '{print $3}'`
$CAT /etc/passwd | $GREP $gid >${TEM_DIR}/list.txt
for line in `$CAT ${TEM_DIR}/list.txt`; do
 $ECHO $line | $AWK -F ":" '{print $1}'>>${TEM_DIR}/users.txt
done



for var in `$CAT ${TEM_DIR}/users.txt`; do

local _user_name_=$var
#$ECHO "Name is" ${_user_name_}

#log_msg -l ${LOGFILE}  -s "\nChecking ${_user_name_} user exist\n"
$GETENT passwd ${_user_name_} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
                _user_check_=1
        #$ECHO "User ${_user_name_} exist\n" | $TEE -a ${LOGFILE}
   # else
                #$ECHO "User ${_user_name_} does not exist\n" | $TEE -a ${LOGFILE}
        fi

if [ ${_user_check_} -eq 1 ]; then
      $USERMOD -g ${_user_name_} ${_user_name_}
      $GPASSWD -d ${_user_name_} root > /dev/null 2>&1
      $GPASSWD -d ${_user_name_} dc5000 > /dev/null 2>&1
	  $GPASSWD -d ${_user_name_} sugroup > /dev/null 2>&1
      if [ $? -ne 0 ]; then
         #$ECHO -e "\n User ${_user_name_} removed from Privileged group\n" | $TEE -a ${LOGFILE}
         #log_msg -s "\n User ${_user_name_} added to Admin group" -l ${LOGFILE}
        _err_msg_="Could not remove ${_user_name_} from Privileged group"
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
      fi


fi


done

users=`$CAT ${TEM_DIR}/users.txt`
users=`$ECHO $users | $TR ' ' ','`
log_msg -s "\nPrivileged users removed from privileged group : $users" -l ${LOGFILE}

insert_header_footer foot "Successfully completed Rollback Privileged Users stage" ${LOGFILE}



}


### Function: rollback_admin_group ###
#
# Rollback Admin Group created for Root Dependency Removal
#
# Arguments:
#   none
# Return Values:
#   none
rollback_admin_group()
{
insert_header_footer head "Entering Rollback Privileged Group Stage\n" ${LOGFILE}

if [ ! -f /etc/group.rollbak ]; then
    $CP -p /etc/group /etc/group.rollbak
fi

_admin_grp_name_=ENIQ_ADMIN_ROLE
_grp_check=0


log_msg -l ${LOGFILE} -s "Checking whether ${_admin_grp_name_} group present"
$GETENT group ${_admin_grp_name_} >> /dev/null 2>&1
    if [ $? -eq 0 ]; then
                _grp_check=1
        $ECHO "Group ${_admin_grp_name_} present"
    else
                _err_msg_="No ${_admin_grp_name_} group found"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
    fi

if [ ! -f /etc/sudoers.rollbak ]; then
    $CP -p /etc/sudoers /etc/sudoers.rollbak
fi



if [ ${_grp_check} -eq 1 ]; then

        log_msg -l ${LOGFILE} -s "\nChecking whether ${_admin_grp_name_} have Admin Privileges"
        $GREP -w ${_admin_grp_name_} ${SUDOERS} >> /dev/null 2>&1
        if [ $? -eq 0 ]; then
		         log_msg -l ${LOGFILE} -s "${_admin_grp_name_} have Admin Privileges\n"
                 _check_pattern_=`$GREP -w ${_admin_grp_name_} ${SUDOERS}`
                 #$SED -i "/$_check_pattern_/d" ${SUDOERS}
				 $SED -i "/${_admin_grp_name_}/d" ${SUDOERS}
                  if [ $? -eq 0 ]; then
                     log_msg -l ${LOGFILE} -s "Removed Admin Privileges of ${_admin_grp_name_} group"
                 fi
        else
                                _err_msg_="No ${_admin_grp_name_} group entry found in sudoers file"
                #abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
fi

#Delete Admin group
if [ ${_grp_check} -eq 1 ]; then
        $GROUPDEL ${_admin_grp_name_}
        if [ $? -eq 0 ]; then
                $ECHO -e "Removed ${_admin_grp_name_} group" | $TEE -a ${LOGFILE}
        else
                _err_msg_="Could not delete ${_admin_grp_name_} group"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
fi

_update_=1

if [ ${_update_} -eq 1 ]; then
    insert_header_footer foot "Successfully completed Rollback Admin group stage" ${LOGFILE}
fi

}
             
### Function: check_node_harden ###
#
# It checks whether node hardening is applied on the server
#
# Arguments:
#   none
# Return Values:
#   none
check_node_harden()
{

#insert_header_footer head "Checking Node Hardening applied on server" "${LOGFILE}"

host=`$HOSTNAME`


if [ ! -f /ericsson/security/bin/nh_verification.py ]; then
        _err_msg_="Node Hardening script /ericsson/security/bin/nh_verification.py Not Found"
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

if [ ! -f $ENIQ_CORE_INST_DIR/bin/eniq_nh_verify.py ]; then
	 _err_msg_="Node Hardening Verify Script $ENIQ_CORE_INST_DIR/bin/eniq_nh_verify.py Not Found."
         abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"

else
        $PYTHON $ENIQ_CORE_INST_DIR/bin/eniq_nh_verify.py |grep Boolean > ${TEM_DIR}/nh_status
                if [ $? -ne 0 ]; then
                        _err_msg_="Error executing Node Hardening Verification script"
                        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
                fi
        status=`$CAT ${TEM_DIR}/nh_status|$AWK '{print $3}'`
        $ECHO $host::$status >>${ENIQ_ADMIN_DIR}/etc/nh_status.txt
        if [ "${status}" == 1 ]; then
           $ECHO "Full Node Hardening is Applied on Server" | $TEE -a ${LOGFILE}
        elif [ "${status}" == 0 ]; then
           _err_msg_="Full Node Hardening is not Applied on Server, please apply Full Node Hardening to proceed further..."
             log_msg -s  "${_err_msg_}"
        else
           _err_msg_="Error executing Node Hardening Verification script"
           abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
fi

$RM -f ${TEM_DIR}/nh_status

#insert_header_footer foot "Completed check Node Hardening Stage" ${LOGFILE}

}


### Function: admin_ssh_enable ###
#
# It provides ssh access to users which are part of Admin group
# by adding users to AllowUsers list.
# Arguments:
#   none
# Return Values:
#   none
admin_ssh_enable()
{
insert_header_footer head "Allow ssh access to Privileged users " "${LOGFILE}"

if [ ! -f /ericsson/security/bin/enable_ssh_login.py ]; then
        _err_msg_="Node Hardening script /ericsson/security/bin/enable_ssh_login.py not found"
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

if [ ! -f $ENIQ_CORE_INST_DIR/bin/eniq_enable_admin_ssh.py ]; then
	_err_msg_="Enable Admin SSH Script $ENIQ_CORE_INST_DIR/bin/eniq_enable_admin_ssh.py Not Found."
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
else
        $PYTHON $ENIQ_CORE_INST_DIR/bin/eniq_enable_admin_ssh.py |grep Boolean > ${TEM_DIR}/nh_enable_admin_ssh
                if [ $? -ne 0 ]; then
                        _err_msg_="Error executing enable admin ssh script"
                        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
                fi
        status=`$CAT ${TEM_DIR}/nh_enable_admin_ssh|$AWK '{print $3}'`
        if [ ${action} == "expansion" ]; then
              for line in `$CAT ${ENIQ_ADMIN_DIR}/etc/SB_user_list`; do
                  $ECHO $line | $AWK -F "::" '{print $1}'| $AWK -F "=" '{print $2}' >> ${TEM_DIR}/USER_LIST_REMOTE
              done
              user_list_remote=`$CAT ${TEM_DIR}/USER_LIST_REMOTE`
              user_list_remote=`$ECHO $user_list_remote | $TR ' ' ','`
        else
              for line in `$CAT ${ENIQ_ADMIN_DIR}/etc/admin_user_list`; do
                  $ECHO $line | $AWK -F "::" '{print $1}'| $AWK -F "=" '{print $2}' >> ${TEM_DIR}/USER_LIST_REMOTE
              done
              user_list_remote=`$CAT ${TEM_DIR}/USER_LIST_REMOTE`
              user_list_remote=`$ECHO $user_list_remote | $TR ' ' ','`
        fi
        if [ "${status}" == 1 ]; then
           $ECHO "SSH access allowed to Privileged users: $user_list_remote" | $TEE -a ${LOGFILE}
        elif [ "${status}" == 0 ]; then
           _err_msg_="Failed to allow SSH to Admin users"
           abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        else
           _err_msg_="Error executing enable admin ssh script"
           abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
fi

$RM -f ${TEM_DIR}/nh_enable_admin_ssh

}

### Function: admin_ssh_disable ###
#
# It removes ssh access of users which were part of Admin group
# by removing users from AllowUsers list.
# Arguments:
#   none
# Return Values:
#   none
admin_ssh_disable()
{
insert_header_footer head "Remove SSH access of Privileged users " "${LOGFILE}"

if [ ! -f /ericsson/security/bin/remove_privileged_ssh_access.py ]; then
    _err_msg_="Node Hardening script /ericsson/security/bin/remove_privileged_ssh_access.py Not Found."
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

if [ ! -f $ENIQ_CORE_INST_DIR/bin/eniq_disable_admin_ssh.py ]; then
        _err_msg_="Disable Privilege User SSH Script $ENIQ_CORE_INST_DIR/bin/eniq_disable_admin_ssh.py Not Found."
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
else
        $PYTHON $ENIQ_CORE_INST_DIR/bin/eniq_disable_admin_ssh.py |grep Boolean > ${TEM_DIR}/user_status
if [ $? -ne 0 ]; then
        _err_msg_="Error executing disable privilege user SSH script"
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi
        status=`$CAT ${TEM_DIR}/user_status|$AWK '{print $3}' | $CUT -c 1`
		
	user_list=`$CAT /eniq/admin/etc/user_removal_data.txt`
	user_list=`$ECHO $user_list | $TR ' ' ','`
if [ "${status}" == 1 ]; then
                $ECHO "SSH Access Revoked of Privileged Users: $user_list" | $TEE -a ${LOGFILE}
        elif [ "${status}" == 0 ]; then
                _err_msg_="Unable to revoke Privileged User SSH Access"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        else
                _err_msg_="Error executing disable privilege user SSH script"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
fi

$RM -f ${TEM_DIR}/user_status
}



### Function: enable_internal_dcuser_ssh_access ###
#
# It enables dcuser ssh access internally within Blades
#
# Arguments:
#   none
# Return Values:
#   none
enable_internal_dcuser_ssh_access()
{
insert_header_footer head "Allow inter-server dcuser SSH Access" "${LOGFILE}"

if [ ! -f /ericsson/security/bin/dcuser_ssh_login.py ]; then
        _err_msg_="Node Hardening script /ericsson/security/bin/dcuser_ssh_login.py not found"
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi


if [ ! -f $ENIQ_CORE_INST_DIR/bin/eniq_dcuser_enable_ssh.py ]; then
	 _err_msg_="Dcuser Enable SSH Script $ENIQ_CORE_INST_DIR/bin/eniq_dcuser_enable_ssh.py Not Found."
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
else
        $PYTHON $ENIQ_CORE_INST_DIR/bin/eniq_dcuser_enable_ssh.py
        if [ $? -ne 0 ]; then
                        _err_msg_="Error executing dcuser enable ssh script"
                        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
fi

}


### Function: disable_ssh_access ###
#
# It will disable ssh to root and dcuser from External World
#
# Arguments:
#   none
# Return Values:
#   none
disable_ssh_access()
{
insert_header_footer head "Block SSH access for root and dcuser from external world" "${LOGFILE}"

if [ ! -f /ericsson/security/bin/disable_ssh_login.py ]; then
        _err_msg_="Node Hardening script /ericsson/security/bin/disable_ssh_login.py Not Found."
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

if [ ! -f $ENIQ_CORE_INST_DIR/bin/eniq_disable_ssh_login.py ]; then
        _err_msg_="Disable Root SSH Script $ENIQ_CORE_INST_DIR/bin/eniq_disable_ssh_login.py Not Found."
else
        $PYTHON $ENIQ_CORE_INST_DIR/bin/eniq_disable_ssh_login.py
        if [ $? -ne 0 ]; then
                _err_msg_="Error executing disable root ssh script"
                        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
fi
}


### Function: inter_blade_root_ssh_access ###
#
# It will disable ssh to root and dcuser from External World
#
# Arguments:
#   none
# Return Values:
#   none
inter_blade_root_ssh_access()
{

insert_header_footer head "Allow inter-server Root SSH Access" "${LOGFILE}"

if [ ! -f /ericsson/security/bin/inter_blade_access.py ]; then
        _err_msg_="Node Hardening script /ericsson/security/bin/inter_blade_access.py not found"
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi


if [ ! -f $ENIQ_CORE_INST_DIR/bin/eniq_inter_blade_ssh.py ]; then
        _err_msg_="inter-server SSH Enable Script $ENIQ_CORE_INST_DIR/bin/eniq_inter_blade_ssh.py Not Found."
	abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
else
        $PYTHON $ENIQ_CORE_INST_DIR/bin/eniq_inter_blade_ssh.py
        if [ $? -ne 0 ]; then
                        _err_msg_="Error executing inter-server ssh enable script"
                        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
fi


}


### Function: sshd_service_restart ###
#
# It will restart sshd service
#
# Arguments:
#   none
# Return Values:
#   none
sshd_service_restart()
{

insert_header_footer head "Restarting SSHD service" "${LOGFILE}"
if [ ! -f /ericsson/security/bin/sshd_service_restart.py ]; then
                _err_msg_="Node Hardening SSH service restart script /ericsson/security/bin/sshd_service_restart.py not found"
                abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        else
                $PYTHON /ericsson/security/bin/sshd_service_restart.py
                if [ $? -ne 0 ]; then
                        _err_msg_="Error executing SSH service restart script"
                        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
                fi
        fi
}


### Function: rollback_admin_ssh ###
#
# Rollback Admin ssh enabled for Root Dependency Removal
#
# Arguments:
#   none
# Return Values:
#   none
rollback_admin_ssh()
{
insert_header_footer head "Entering Rollback SSH Access Stage\n" ${LOGFILE}

if [ ! -f /ericsson/security/bin/ssh_rollback_adminrole.py ]; then
        _err_msg_="Node Hardening script /ericsson/security/bin/ssh_rollback_adminrole.py Not Found"
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi


if [ ! -f $ENIQ_CORE_INST_DIR/bin/eniq_rollback_admin_ssh.py ]; then
        _err_msg_="Rollback Admin SSH Script $ENIQ_CORE_INST_DIR/bin/eniq_rollback_admin_ssh.py Not Found."
	abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
else
        $PYTHON $ENIQ_CORE_INST_DIR/bin/eniq_rollback_admin_ssh.py |grep Boolean > /tmp/nh_rollback
        if [ $? -ne 0 ]; then
        	_err_msg_="Error executing rollback admin ssh script"
                 abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
        status=`$CAT /tmp/nh_rollback|$AWK {'print $3'}`
        gid=`$CAT /etc/group | $GREP ENIQ_ADMIN_ROLE | $AWK -F":" '{print $3}'`
        $CAT /etc/passwd | $GREP $gid >${TEM_DIR}/list.txt
        for line in `$CAT ${TEM_DIR}/list.txt`; do
         $ECHO $line | $AWK -F ":" '{print $1}'>>${TEM_DIR}/users_list_revoke.txt
        done
        users=`$CAT ${TEM_DIR}/users_list_revoke.txt`
        users=`$ECHO $users | $TR ' ' ','`
        if [ "${status}" == 1 ]; then
           #$ECHO "Rollback done Successfully" | $TEE -a ${LOGFILE}
           $ECHO "Revoked SSH access for users : $users" | $TEE -a ${LOGFILE}
           $ECHO "Enabled SSH access for Root and dcuser" | $TEE -a ${LOGFILE}
        elif [ "${status}" == 0 ]; then
           _err_msg_="Rollback Failed"
           abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        else
           _err_msg_="Error executing rollback admin ssh script"
           abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
        fi
fi

$RM -rf /tmp/nh_rollback

insert_header_footer head "Successfully completed Rollback SSH Access Stage\n" ${LOGFILE}

}

### Function: delete_remote_admin_users ###
#
# Remove admin rights of selected users
#
# Arguments:
#   none
# Return Values:
#   none
delete_remote_admin_users()
{
insert_header_footer head "Admin Previlege Removal stage\n" ${LOGFILE}

for _user_input_ in `$CAT ${ENIQ_ADMIN_DIR}/etc/user_removal_data.txt`;do

local _user_name_=${_user_input_}

log_msg -l ${LOGFILE}  -s "\nChecking whether ${_user_name_} user exists"

$GETENT passwd ${_user_name_} > /dev/null 2>&1 
	if [ $? -eq 0 ]; then
        	_user_check_=1
		$ECHO "User ${_user_name_} exist\n" | $TEE -a ${LOGFILE}
	else
		_user_check_=0
		$ECHO "User ${_user_name_} does not exist\n" | $TEE -a ${LOGFILE}
	fi



if [[ ${_user_check_} == 1 ]]; then

log_msg -l ${LOGFILE} -s "Checking whether user ${_user_name_} is part of Privileged group"
_check_user_group_=`$ID ${_user_name_} | $AWK -F\( '{print $3}' | $AWK -F\) '{print $1}'` > /dev/null 2>&1
if [ $? -ne 0 ]; then
        $ECHO "Could not get user group details"
fi
        if [ "${_check_user_group_}" == "ENIQ_ADMIN_ROLE" ]; then
                $ECHO "User ${_user_name_} is part of Privileged Group"
                $USERMOD -g ${_user_name_} ${_user_name_}
                $GPASSWD -d ${_user_name_} root > /dev/null 2>&1
                $GPASSWD -d ${_user_name_} dc5000 > /dev/null 2>&1
				$GPASSWD -d ${_user_name_} sugroup > /dev/null 2>&1
                if [ $? -eq 0 ]; then
                        $ECHO -e "User ${_user_name_} removed from Privileged group\n" | $TEE -a ${LOGFILE}
                        #log_msg -s "\n User ${_user_name_} added to Admin group" -l ${LOGFILE}
                else
                        _err_msg_="Could not remove ${_user_name_} from Privileged group"
                        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
                fi
        else
                $ECHO "User ${_user_name_} is not part of Privileged group"
        fi
fi

done
}

### Function: update_user_profile ###
#
# Updates roots .profile file
#
# Arguments:
#   $1 : username
#   $2 : userhome
# Return Values:
#   0 : Success
#   1 : Fail
update_user_profile()
{

NAME=$1
HOME="$2/"

#HOME=/root/


if [ -f ${HOME}.bash_profile ]; then
    $CP ${HOME}.bash_profile ${TEM_DIR}/bash_profile.$$.$$
    if [ $? -ne 0 ]; then
        $ECHO "Could not copy ${HOME}.bash_profile to ${TEM_DIR}/bash_profile.$$.$$" | $TEE -a ${LOGFILE}
        return 1
    fi
else
    $TOUCH ${TEM_DIR}/bash_profile.$$.$$
    if [ $? -ne 0 ]; then
        $ECHO "Could not create ${TEM_DIR}/bash_profile.$$.$$" | $TEE -a ${LOGFILE}
        return 1
    fi
fi

local _upd_=0
if [ "$3" ]; then
    $CAT ${TEM_DIR}/bash_profile.$$.$$ | $GREP "_server_type_=" >> /dev/null 2>&1
    if [ $? -ne 0 ]; then
        $CAT ${TEM_DIR}/bash_profile.$$.$$ | $GREP -v "PS1" >> ${TEM_DIR}/profileinter.$$.$$
        $CP ${TEM_DIR}/profileinter.$$.$$ ${TEM_DIR}/bash_profile.$$.$$
        $ECHO "_server_type_=`$CAT /eniq/installation/config/installed_server_type`" >> ${TEM_DIR}/bash_profile.$$.$$
        $ECHO "PS1=`uname -n`'[`cat /eniq/installation/config/installed_server_type`] '\{`/usr/bin/echo $NAME`\}' #: '" >> ${TEM_DIR}/bash_profile.$$.$$
        $ECHO "export PS1\n" >> ${TEM_DIR}/bash_profile.$$.$$
        _upd_=1
    fi
else
    
    $ECHO "# Set up the shell variables:\n" >> ${TEM_DIR}/bash_profile.$$.$$
    $ECHO "EDITOR=vi" >> ${TEM_DIR}/bash_profile.$$.$$
    $ECHO "export EDITOR\n" >> ${TEM_DIR}/bash_profile.$$.$$
    $ECHO "umask 022\n" >> ${TEM_DIR}/bash_profile.$$.$$
    $ECHO "_server_type_=`$CAT /eniq/installation/config/installed_server_type`" >> ${TEM_DIR}/bash_profile.$$.$$
    $ECHO "PS1=`uname -n`'[`cat /eniq/installation/config/installed_server_type`] '\{`/usr/bin/echo $NAME`\}' #: '" >> ${TEM_DIR}/bash_profile.$$.$$
    $ECHO "export PS1\n" >> ${TEM_DIR}/bash_profile.$$.$$
    _upd_=1
fi

if [ ${_upd_} -eq 1 ]; then
    $ECHO "Updating ${HOME}.bash_profile file\n" >> ${LOGFILE}
    $CP ${TEM_DIR}/bash_profile.$$.$$ ${HOME}.bash_profile
    if [ $? -ne 0 ]; then
        $ECHO "Could not copy ${TEM_DIR}/bash_profile.$$.$$ to ${HOME}.bash_profile" | $TEE -a ${LOGFILE}
        return 1
    fi
fi

}



check_feature_enabling()
{

  status=0
  $CAT /etc/group | $GREP -w ENIQ_ADMIN_ROLE > /dev/null 2>&1 
  if [ $? -eq 0 ]; then
    log_msg -s "\nFeature is enabled on $HOST-$TYPE" -l ${LOGFILE} 
    status=0
     $ECHO $HOST::$status >>${ENIQ_ADMIN_DIR}/etc/feature_enable_status.txt
  else
     #_err_msg_="Feature is not enabled on the server, please enable feature first....."
     #abort_script "${_err_msg_}"
     log_msg -s "\nFeature is not enabled on $HOST-$TYPE" -l ${LOGFILE}
	 status=1
	 $ECHO $HOST::$status >>${ENIQ_ADMIN_DIR}/etc/feature_enable_status.txt 

  fi

}



# ********************************************************************
#
#   Main body of program
#
# ********************************************************************
#

# Determine absolute path to software
get_absolute_path

# Set up environment variables for script.
setup_env

# Check that the effective id of the user is root
check_id $DEFAULT_USER

_admin_grp_name_=ENIQ_ADMIN_ROLE


TIMESTAMP=`date '+%Y-%b-%d_%H.%M.%S'`
HOST=`hostname`
TYPE=`$CAT $ENIQ_CONF_DIR/installed_server_type`


while getopts ":l:c:a:r:e:v:d:f:" arg; do
  case $arg in
    l) LOGFILE="$OPTARG"
       ;;
    c) CREATE="$OPTARG"
       ;;
    a) ADD="$OPTARG"
       ;;		
    r) ROLLBACK=$OPTARG
       ;;
    e) EXPANSION=$OPTARG
       ;;
    v) VERIFY=$OPTARG
       ;;	
    d) DELETE=$OPTARG
       ;;
    f) feature=$OPTARG
       ;;
   \?) _err_msg_="`$BASENAME $0` -s <stage>"
       abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
       ;;
  esac
done
shift `expr $OPTIND - 1`


# Log file
if [ ! "${LOGFILE}" ]; then
    $MKDIR -p ${ENIQ_LOG_DIR}/admin_creation
    LOGFILE="${ENIQ_LOG_DIR}/admin_creation/${HNAME}_admin_create.log"
fi

# Create a temporary Directory
TEM_DIR=/tmp/admin_create.$$.$$
if [ -d ${TEM_DIR} ]; then
    $RM -rf ${TEM_DIR}
    if [ $? -ne 0 ]; then
        _err_msg_="Could not delete directory $TEM_DIR. Please delete it manually."
        abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
    fi
fi
$MKDIR -p ${TEM_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory $TEM_DIR"
    abort_script "${_err_msg_}" "${EXEC_SHELL_CMD}"
fi

if [ "$CREATE" != "" ]; then
   log_msg -s "\n================= $TIMESTAMP-Enabling ENIQ Privileged User Support feature on $HOST-$TYPE  ====================\n" -l ${LOGFILE}
   if [ "$CREATE" == "create"  ]; then
      action=create
      create_admin_group
      create_admin_user
      admin_ssh_enable
      disable_ssh_access
      enable_internal_dcuser_ssh_access
      inter_blade_root_ssh_access
      sshd_service_restart	
   log_msg -s "\n================= $TIMESTAMP-Successfully enabled ENIQ Privileged User Support feature on $HOST-$TYPE  ====================\n" -l ${LOGFILE}
   fi
fi

if [ "$ADD" != "" ]; then
    log_msg -s "\n================= $TIMESTAMP-Starting Privileged User Addition on $HOST-$TYPE  ====================\n" -l ${LOGFILE}
   if [ "$ADD" == "add"  ]; then
      action=add
      create_admin_user
      admin_ssh_enable
      sshd_service_restart	
   fi
   log_msg -s "\n================= $TIMESTAMP-Successfully completed Privileged User Addition on $HOST-$TYPE  ====================\n" -l ${LOGFILE}
fi


if [ "$EXPANSION" != "" ]; then
   if [ "$EXPANSION" == "expansion"  ]; then
      log_msg -s "\n================= $TIMESTAMP-Enabling ENIQ Privileged User Support feature on $HOST-$TYPE  ====================\n" -l ${LOGFILE}
      action=expansion
      create_admin_group
      create_admin_user_expansion
      admin_ssh_enable
      disable_ssh_access
      enable_internal_dcuser_ssh_access
      inter_blade_root_ssh_access
      sshd_service_restart
      log_msg -s "\n================= $TIMESTAMP-Successfully enabled ENIQ Privileged User Support feature on $HOST-$TYPE  ====================\n" -l ${LOGFILE}
   fi
fi


if [ "$ROLLBACK" != "" ]; then
   log_msg -s "\n================= $TIMESTAMP-Starting Rollback ENIQ Privileged User Support on $HOST-$TYPE  ====================\n" -l ${LOGFILE}
   if [ "$ROLLBACK" == "rollback"  ]; then
       rollback_admin_ssh
       rollback_admin_user
       rollback_admin_group
       sshd_service_restart

   fi
   log_msg -s "\n================= $TIMESTAMP-Successfully completed Rollback ENIQ Privileged User Support on $HOST-$TYPE  ====================\n" -l ${LOGFILE}
fi


if [ "$VERIFY" != "" ]; then
   if [ "$VERIFY" == "verify"  ]; then
      check_node_harden
   fi
fi


if [ "$feature" != "" ]; then
   if [ "$feature" == "feature_enable"  ]; then
      check_feature_enabling
   fi
fi


if [ "$DELETE" != "" ]; then
   log_msg -s "\n================= $TIMESTAMP-Starting User Privileges Removal on $HOST-$TYPE  ====================\n" -l ${LOGFILE}
   if [ "$DELETE" == "delete"  ]; then
      
      delete_remote_admin_users
      admin_ssh_disable
      sshd_service_restart	
    
   fi
   log_msg -s "\n================= $TIMESTAMP-Successfully completed User Privileges Removal on $HOST-$TYPE  ====================\n" -l ${LOGFILE}
fi


$RM -rf ${TEM_DIR}

exit 0





